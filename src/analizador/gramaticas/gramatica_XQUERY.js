/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_XQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,31],$V1=[1,40],$V2=[1,13],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,32],$V8=[1,33],$V9=[1,34],$Va=[1,35],$Vb=[1,36],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,52],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,55],$Vs=[5,18,20,26,28,29,33,34,36,39,42,46,47,49,50,51,52,53,54,59,67,68,77,96,98,99,100,101,102,103,104,105,106,108,109,110,111,112,113,115,116,117,128,139,140,141,142,143,144,145,146,147],$Vt=[1,57],$Vu=[5,77],$Vv=[2,4],$Vw=[1,62],$Vx=[5,18,20,26,28,29,33,34,36,39,42,46,47,49,50,51,52,53,54,59,67,68,77,81,96,98,99,100,101,102,103,104,105,106,108,109,110,111,112,113,115,116,117,128,139,140,141,142,143,144,145,146,147],$Vy=[2,133],$Vz=[1,66],$VA=[33,36,39],$VB=[5,18,42,67,77],$VC=[1,96],$VD=[1,91],$VE=[1,88],$VF=[1,98],$VG=[1,84],$VH=[1,89],$VI=[1,90],$VJ=[1,94],$VK=[1,95],$VL=[1,97],$VM=[1,99],$VN=[1,92],$VO=[1,93],$VP=[1,100],$VQ=[1,101],$VR=[1,85],$VS=[1,86],$VT=[1,87],$VU=[2,96],$VV=[1,102],$VW=[1,103],$VX=[18,20,55,57,58,61,69],$VY=[5,18,20,26,28,29,33,34,36,39,42,46,47,49,50,51,52,53,54,59,67,68,77,81,96,98,99,100,101,102,103,104,105,106,108,109,110,111,112,113,115,116,117,127,128,139,140,141,142,143,144,145,146,147],$VZ=[1,109],$V_=[1,110],$V$=[2,126],$V01=[1,121],$V11=[1,120],$V21=[1,144],$V31=[1,151],$V41=[1,152],$V51=[1,148],$V61=[1,181],$V71=[1,173],$V81=[1,182],$V91=[1,175],$Va1=[1,176],$Vb1=[1,177],$Vc1=[1,178],$Vd1=[1,179],$Ve1=[1,180],$Vf1=[1,160],$Vg1=[1,168],$Vh1=[1,172],$Vi1=[1,174],$Vj1=[1,161],$Vk1=[1,170],$Vl1=[1,159],$Vm1=[1,162],$Vn1=[1,163],$Vo1=[1,164],$Vp1=[1,165],$Vq1=[1,166],$Vr1=[1,167],$Vs1=[1,169],$Vt1=[1,171],$Vu1=[5,18,26,28,29,33,34,36,39,42,46,47,49,50,51,52,53,54,59,67,68,77,99,100,105,108,128,139,140,141,142,143,144,145,146,147],$Vv1=[2,178],$Vw1=[1,190],$Vx1=[1,191],$Vy1=[1,196],$Vz1=[1,197],$VA1=[1,198],$VB1=[1,199],$VC1=[1,200],$VD1=[1,201],$VE1=[20,105,119,120],$VF1=[5,39,77],$VG1=[1,223],$VH1=[1,228],$VI1=[26,29],$VJ1=[1,233],$VK1=[5,18,19,20,24,26,27,28,29,33,34,36,39,41,42,46,47,49,50,51,52,53,54,55,57,58,59,61,63,64,65,66,67,68,77,99,100,103,104,105,106,108,109,110,111,112,113,115,116,117,119,120,124,127,128,137,138,139,140,141,142,143,144,145,146,147],$VL1=[5,18,39,42,67,77],$VM1=[1,278],$VN1=[5,18,29,33,36,39,42,67,77],$VO1=[1,289],$VP1=[5,18,26,29,33,36,39,42,46,47,49,50,51,52,53,54,59,67,68,77,108,128,139,142,143,144,145,146,147],$VQ1=[5,18,26,29,33,36,39,42,46,47,49,50,51,52,53,54,59,67,68,77,105,108,128,139,140,141,142,143,144,145,146,147],$VR1=[5,18,26,29,33,36,39,42,46,47,67,68,77,108,128,142,143,144,145,146,147],$VS1=[5,18,26,29,33,36,39,42,46,47,67,68,77,108,128,146,147],$VT1=[5,18,26,29,33,34,36,39,42,46,47,49,50,51,52,53,54,59,67,68,77,99,105,108,128,139,140,141,142,143,144,145,146,147],$VU1=[5,18,26,29,33,34,36,39,42,46,47,49,50,51,52,53,54,59,67,68,77,105,108,128,139,140,141,142,143,144,145,146,147],$VV1=[5,18,26,29,33,36,39,42,46,47,49,50,51,52,53,54,67,68,77,108,128,142,143,144,145,146,147],$VW1=[20,24,33,34,36,39,96,98,99,100,101,102,103,104,105,106,109,110,111,112,113,115,116,117],$VX1=[1,304],$VY1=[1,334],$VZ1=[1,363];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FLWOR":6,"FOR":7,"L_LET":8,"IF":9,"LLAMADA_FUNCION":10,"FUNCIONES":11,"FUNCION":12,"LET":13,"FOR_1":14,"FOR_2":15,"L_CONDICION":16,"RETURN":17,"for":18,"dolar":19,"id":20,"in":21,"at":22,"FOR_P":23,"par_izq":24,"L_PARAM":25,"par_der":26,"integer":27,"to":28,"coma":29,"CONDICION":30,"WHERE":31,"ORDER":32,"where":33,"diagonal":34,"EXPR":35,"order":36,"by":37,"L_VALOR":38,"return":39,"VALOR":40,"arroba":41,"if":42,"THEN":43,"ELSE":44,"ELSE_IF":45,"else":46,"then":47,"COMPARACION_XQUERY":48,"eq":49,"ne":50,"lt":51,"le":52,"gt":53,"ge":54,"number":55,"VALOR_LLAMADA":56,"substring":57,"lower":58,"menos":59,"case":60,"upper":61,"doble_pto":62,"double":63,"string":64,"true":65,"false":66,"let":67,"igual":68,"declare":69,"function":70,"PARAMETROS":71,"as":72,"xs":73,"TIPO":74,"llave_izq":75,"SENTENCIAS":76,"llave_der":77,"pto_coma":78,"PARAM":79,"INSTRUCCION":80,"o":81,"RUTA":82,"FILTROS":83,"ATRIBUTO_DESCENDIENTES":84,"DESCENDIENTES_NODO":85,"DESCENDIENTE":86,"PADRE":87,"ATRIBUTO_NODO":88,"HIJOS":89,"RAIZ":90,"NODO_ACTUAL":91,"PADRE_NODO":92,"ANY":93,"EJES":94,"OPC_EJES":95,"diagonal_diagonal_arroba_ast":96,"OPC":97,"diagonal_diagonal_ast":98,"doble_diagonal":99,"diagonal_dos_pts":100,"diagonal_arroba_ast":101,"diagonal_ast":102,"punto":103,"dos_pts":104,"mul":105,"ancestor":106,"bi_pto":107,"or":108,"self":109,"attribute":110,"child":111,"descendant":112,"following":113,"sibling":114,"namespace":115,"parent":116,"preceding":117,"NODO_FUNCION":118,"node":119,"text":120,"PASOS":121,"ANY_ATRIBUTO":122,"ATRIBUTO":123,"any_atributo":124,"LISTA_PREDICADO":125,"PREDICADO":126,"cor_izq":127,"cor_der":128,"ATRIBUTO_PREDICADO":129,"ARITMETICAS":130,"RELACIONALES":131,"LOGICAS":132,"ORDEN":133,"VALORES":134,"PATH":135,"OPC_PATH":136,"last":137,"position":138,"mas":139,"div":140,"mod":141,"mayor":142,"menor":143,"mayor_igual":144,"menor_igual":145,"diferencia":146,"and":147,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"for",19:"dolar",20:"id",21:"in",22:"at",24:"par_izq",26:"par_der",27:"integer",28:"to",29:"coma",33:"where",34:"diagonal",36:"order",37:"by",39:"return",41:"arroba",42:"if",46:"else",47:"then",49:"eq",50:"ne",51:"lt",52:"le",53:"gt",54:"ge",55:"number",57:"substring",58:"lower",59:"menos",60:"case",61:"upper",62:"doble_pto",63:"double",64:"string",65:"true",66:"false",67:"let",68:"igual",69:"declare",70:"function",72:"as",73:"xs",75:"llave_izq",77:"llave_der",78:"pto_coma",81:"o",96:"diagonal_diagonal_arroba_ast",98:"diagonal_diagonal_ast",99:"doble_diagonal",100:"diagonal_dos_pts",101:"diagonal_arroba_ast",102:"diagonal_ast",103:"punto",104:"dos_pts",105:"mul",106:"ancestor",107:"bi_pto",108:"or",109:"self",110:"attribute",111:"child",112:"descendant",113:"following",114:"sibling",115:"namespace",116:"parent",117:"preceding",119:"node",120:"text",124:"any_atributo",127:"cor_izq",128:"cor_der",137:"last",138:"position",139:"mas",140:"div",141:"mod",142:"mayor",143:"menor",144:"mayor_igual",145:"menor_igual",146:"diferencia",147:"and"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[11,2],[11,1],[8,2],[8,1],[7,4],[7,4],[7,3],[14,4],[14,7],[23,6],[15,0],[15,1],[15,5],[15,5],[16,2],[16,1],[30,1],[30,1],[31,5],[32,3],[32,4],[17,2],[17,3],[17,2],[38,3],[38,1],[40,4],[40,5],[40,3],[9,9],[9,10],[9,4],[9,5],[45,4],[43,2],[44,2],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[10,4],[10,4],[10,6],[10,8],[10,6],[10,6],[10,6],[56,2],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[25,3],[25,1],[13,7],[13,6],[13,5],[12,16],[12,12],[76,1],[76,2],[76,2],[76,3],[76,3],[71,3],[71,1],[79,6],[74,1],[4,2],[4,1],[80,4],[80,2],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,2],[84,2],[85,2],[86,2],[87,2],[88,2],[89,2],[90,2],[91,1],[92,1],[93,1],[94,2],[94,6],[94,2],[94,2],[94,2],[94,5],[94,2],[94,4],[94,2],[94,2],[94,2],[94,4],[94,2],[95,1],[95,1],[95,1],[118,1],[118,1],[97,0],[97,1],[97,1],[121,1],[121,1],[122,1],[123,2],[83,0],[83,1],[125,2],[125,1],[126,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,2],[35,1],[35,1],[35,1],[35,3],[35,1],[35,1],[135,3],[135,3],[135,3],[135,3],[135,2],[135,1],[135,2],[136,1],[136,2],[133,3],[133,3],[130,3],[130,3],[130,3],[130,3],[130,3],[131,3],[131,3],[131,3],[131,3],[131,3],[131,3],[132,3],[132,3],[129,2],[129,1],[129,2],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'XQUERY', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 return new NodoAST({label: 'XQUERY', hijos: [...$$[$0-1].hijos], linea: yylineno}); 
break;
case 3: case 4: case 5: case 6:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 7: case 8:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 9:
 this.$ = new NodoAST({label: 'FUNCION', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 10:
 this.$ = new NodoAST({label: 'FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 11:
 this.$ = new NodoAST({label: 'LET', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 12:
 this.$ = new NodoAST({label: 'LET', hijos: [$$[$0]], linea: yylineno});
break;
case 13:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 14:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 15:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 16:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 17:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-3],($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 18:
 this.$ = new NodoAST({label: 'FOR_P', hijos: [($$[$0-5]+$$[$0-4]),...$$[$0-1].hijos], linea: yylineno}); 
break;
case 19:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [], linea: yylineno}); 
break;
case 20:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0]], linea: yylineno}); 
break;
case 21:
 this.$ = new NodoAST({label: 'FOR', hijos: [$$[$0-3],$$[$0-2],$$[$0-1]], linea: yylineno}); 
break;
case 22:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0-3],$$[$0]], linea: yylineno}); 
break;
case 23:
 this.$ = new NodoAST({label: 'LCONDICION', hijos: [...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'L_CONDICION', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'WHERE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 26:
 this.$ = new NodoAST({label: 'ORDER', hijos: [$$[$0]], linea: yylineno}); 
break;
case 27:
 this.$ = new NodoAST({label: 'WHERE', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 28:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 29:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 30:
 this.$ = new NodoAST({label: 'RETURN', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 31:
 this.$ = new NodoAST({label: 'RETURN', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 32:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 33:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 34:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 35:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 36:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 37:
 this.$ = new NodoAST({label: 'VALOR', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 38:
 this.$ = new NodoAST({label: 'IF', hijos: [($$[$0-6]+$$[$0-5]),$$[$0-4],...$$[$0-3].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 39:
 this.$ = new NodoAST({label: 'IF', hijos: [($$[$0-7]+$$[$0-6]),$$[$0-5],...$$[$0-4].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 40:
 this.$ = new NodoAST({label: 'IF', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 41:
 this.$ = new NodoAST({label: 'IF', hijos: [...$$[$0-3].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 42:
 this.$ = new NodoAST({label: 'ELSE_IF', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 43:
 this.$ = new NodoAST({label: 'THEN', hijos: [...$$[$0].hijos,], linea: yylineno}); 
break;
case 44:
 this.$ = new NodoAST({label: 'ELSE', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 45: case 46: case 47: case 48: case 49: case 50: case 167: case 168: case 169: case 170: case 171: case 172:
 this.$ = new NodoAST({label: 'RELACIONALES', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 51:
 this.$ = new NodoAST({label: 'to', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 52:
 
                        if ($$[$0-3] == 'string'){
                              this.$ = new NodoAST({label: 'F_STRING', hijos: [...$$[$0-1].hijos], linea: yylineno}); 
                        }
                        else {
                            this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-3],$$[$0-1]], linea: yylineno}); 
                        }   
                    
break;
case 53:
 this.$ = new NodoAST({label: 'F_NUMBER', hijos: [...$$[$0-1].hijos], linea: yylineno}); 
break;
case 54:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 55:
 this.$ = new NodoAST({label: 'F_SUBSTRING1', hijos: [$$[$0-5],$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 56:
 this.$ = new NodoAST({label: 'F_LOWERCASE', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 57:
 this.$ = new NodoAST({label: 'F_UPPERCASE', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 58:
 this.$ = new NodoAST({label: 'F_LLAMADA', hijos: [$$[$0-5],$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 59:
 this.$ = new NodoAST({label: 'VALOR_LLAMADA', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 60: case 61: case 62: case 63: case 64: case 65:
 this.$ = new NodoAST({label: 'VALOR_LLAMADA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 66: case 78:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 67: case 79:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 68:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 69:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 70:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 71:
 this.$ = new NodoAST({label: 'FUNCION', hijos: [$$[$0-13],$$[$0-11],$$[$0-9],$$[$0-4],$$[$0-2]], linea: yylineno}); 
break;
case 72:
 this.$ = new NodoAST({label: 'FUNCION_SIN_TIPO', hijos: [$$[$0-9],$$[$0-7],$$[$0-5],$$[$0-2]], linea: yylineno}); 
break;
case 73:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 74: case 75:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 76: case 77:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 80:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],...$$[$0].hijos], linea: yylineno}); 
break;
case 81:

             if ($$[$0] == 'string'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
             else if ($$[$0] == 'boolean'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
            else if ($$[$0] == 'integer'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
            else if ($$[$0] == 'double'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
            else{
                 tablaErrores.Errores.getInstance().push(new errorGram.Error({ tipo: 'Semántico', linea: `${yylineno + 1}`, descripcion: `No es un tipo valido "${$$[$0]}"  Columna: ${this._$.first_column + 1}.`}));
             }
        
break;
case 82:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 83:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 84:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-3].hijos, $$[$0-2], ...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 85:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 97:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 98:
 this.$ = new NodoAST({label: 'ATRIBUTO_DESCENDIENTES', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 99: case 100:
 this.$ = new NodoAST({label: 'DESCENDIENTES_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 101:
 this.$ = new NodoAST({label: 'PADRE', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 102:
 this.$ = new NodoAST({label: 'ATRIBUTO_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 103:
 this.$ = new NodoAST({label: 'HIJOS', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 104:
 this.$ = new NodoAST({label: 'RAIZ', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 105:
 this.$ = new NodoAST({label: 'NODO_ACTUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 106:
 this.$ = new NodoAST({label: 'PADRE_NODO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 107:
 this.$ = new NodoAST({label: 'ANY', hijos: [$$[$0]], linea: yylineno}); 
break;
case 108: case 110: case 111: case 112: case 114: case 116: case 117: case 118: case 120:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 109:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-5], $$[$0-4]], linea: yylineno}); 
break;
case 113:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-4], $$[$0-3]], linea: yylineno}); 
break;
case 115: case 119:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-3], $$[$0-2]], linea: yylineno}); 
break;
case 121: case 122: case 123:
 this.$ = new NodoAST({label: 'OPC_EJES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 124: case 125:
 this.$ = new NodoAST({label: 'NODO_FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 126:
 this.$ = new NodoAST({label: 'OPC', hijos: [], linea: yylineno}); 
break;
case 127: case 128:
 this.$ = new NodoAST({label: 'OPC', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 129: case 130:
 this.$ = new NodoAST({label: 'PASOS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 131:
 this.$ = new NodoAST({label: 'ANY_ATRIBUTO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 132:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 133:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [], linea: yylineno}); 
break;
case 134:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 135:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 136:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 137:
 this.$ = new NodoAST({label: 'PREDICADO', hijos: [$$[$0-2], ...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 138: case 139: case 140: case 141: case 142: case 143: case 145: case 146: case 147: case 149: case 150:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 144:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 148:
 this.$ = new NodoAST({label: 'EXPR', hijos: [...$$[$0-1].hijos], linea: yylineno}); 
break;
case 151: case 152:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 153: case 154:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0-2],...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 155:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-1].hijos,$$[$0],$$[$01]], linea: yylineno}); 
break;
case 156:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 157:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 158:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 159:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 160: case 161:
 this.$ = new NodoAST({label: 'ORDEN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 162: case 163: case 164: case 165: case 166:
 this.$ = new NodoAST({label: 'ARITMETICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 173: case 174:
 this.$ = new NodoAST({label: 'LOGICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 175:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 176:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 177:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 178:
 this.$ = new NodoAST({label: 'integer', hijos: [$$[$0]], linea: yylineno}); 
break;
case 179:
 this.$ = new NodoAST({label: 'double', hijos: [$$[$0]], linea: yylineno}); 
break;
case 180:
 this.$ = new NodoAST({label: 'string', hijos: [$$[$0]], linea: yylineno}); 
break;
case 181:
 this.$ = new NodoAST({label: 'id', hijos: [$$[$0]], linea: yylineno}); 
break;
case 182:
 this.$ = new NodoAST({label: 'punto', hijos: [$$[$0]], linea: yylineno}); 
break;
case 183:
 this.$ = new NodoAST({label: 'dos_pts', hijos: [$$[$0]], linea: yylineno}); 
break;
case 184: case 185:
 this.$ = new NodoAST({label: 'boolean', hijos: [$$[$0]], linea: yylineno}); 
break;
case 186:
 this.$ = new NodoAST({label: 'xquery', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:19,13:12,14:11,18:$V0,20:[1,14],34:$V1,42:$V2,55:$V3,57:$V4,58:$V5,61:$V6,67:$V7,69:$V8,80:4,82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq},{1:[3]},{5:[1,53],20:$Vr,34:$V1,80:54,82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq},{5:[1,56]},o($Vs,[2,83],{81:$Vt}),o($Vu,[2,3]),{5:$Vv,13:58,67:$V7},o($Vu,[2,5]),o($Vu,[2,6]),{7:59,10:60,12:61,14:11,18:$V0,20:$Vw,55:$V3,57:$V4,58:$V5,61:$V6,69:$V8},o($Vx,$Vy,{83:63,125:64,126:65,127:$Vz}),o($VA,[2,19],{80:4,82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,15:67,4:68,20:$Vr,24:[1,69],34:$V1,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq}),o($VB,[2,12]),{10:83,19:$VC,20:$VD,24:[1,70],27:$VE,34:$VF,35:71,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o([5,20,34,81,96,98,99,100,101,102,103,104,105,106,109,110,111,112,113,115,116,117,127],$VU,{24:$VV,62:$VW}),{24:[1,104]},{24:[1,105]},{59:[1,106]},{59:[1,107]},o($VX,[2,10]),o($VY,[2,86]),o($VY,[2,87]),o($VY,[2,88]),o($VY,[2,89]),o($VY,[2,90]),o($VY,[2,91]),o($VY,[2,92]),o($VY,[2,93]),o($VY,[2,94]),o($VY,[2,95]),{20:$VZ,95:108,105:$V_,118:111,119:$VP,120:$VQ},{19:[1,112]},{19:[1,113]},{70:[1,114]},o($VY,$V$,{97:115,118:116,121:117,122:118,123:119,41:$V01,119:$VP,120:$VQ,124:$V11}),o($VY,$V$,{118:116,121:117,122:118,123:119,97:122,41:$V01,119:$VP,120:$VQ,124:$V11}),o($VY,$V$,{118:116,121:117,122:118,123:119,97:123,41:$V01,119:$VP,120:$VQ,124:$V11}),o($VY,$V$,{118:116,121:117,122:118,123:119,97:124,41:$V01,119:$VP,120:$VQ,124:$V11}),o($VY,$V$,{118:116,121:117,122:118,123:119,97:125,41:$V01,119:$VP,120:$VQ,124:$V11}),o($VY,$V$,{118:116,121:117,122:118,123:119,97:126,41:$V01,119:$VP,120:$VQ,124:$V11}),o($VY,$V$,{118:116,121:117,122:118,123:119,97:127,41:$V01,119:$VP,120:$VQ,124:$V11}),o($VY,[2,105]),o($VY,[2,106]),o($VY,[2,107]),{59:[1,129],107:[1,128]},{107:[1,130]},{107:[1,131]},{59:[1,133],107:[1,132]},{59:[1,135],107:[1,134]},{107:[1,136]},{107:[1,137]},{59:[1,139],107:[1,138]},{107:[1,140]},{1:[2,1]},o($Vs,[2,82],{81:$Vt}),o($VY,$VU),{1:[2,2]},{20:$Vr,34:$V1,82:141,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq},o($VB,[2,11]),o($Vu,[2,7]),o($Vu,[2,8]),o($VX,[2,9]),{24:$VV,62:$VW},o($Vx,[2,85]),o($Vx,[2,134],{126:142,127:$Vz}),o($VY,[2,136]),{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:143,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{16:145,17:146,30:147,31:149,32:150,33:$V31,36:$V41,39:$V51},o($VA,[2,20],{82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,80:54,20:$Vr,34:$V1,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq}),{10:83,19:$VC,20:$VD,24:$V21,25:154,27:[1,153],34:$VF,35:155,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:[1,156],20:$VD,24:$V21,27:$VE,34:$VF,35:157,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{28:$V61,34:$V71,43:158,47:$V81,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1},o($Vu1,[2,138]),o($Vu1,[2,139]),o($Vu1,[2,140]),o($Vu1,[2,141]),o($Vu1,[2,142]),o($Vu1,[2,143]),{20:$VZ,95:183,105:$V_,118:111,119:$VP,120:$VQ},o($Vu1,[2,145]),o($Vu1,[2,146]),o($Vu1,[2,147]),o($Vu1,[2,149]),o($Vu1,[2,150]),o($Vu1,$V$,{118:116,121:117,122:118,123:119,97:184,20:[1,185],41:$V01,119:$VP,120:$VQ,124:$V11}),o($Vu1,[2,176]),{24:[1,186]},{24:[1,187]},o($Vu1,$Vv1),o($Vu1,[2,179]),o($Vu1,[2,180]),o($Vu1,[2,181],{24:$VV,62:$VW}),o($Vu1,[2,182]),o($Vu1,[2,183]),o($Vu1,[2,184]),o($Vu1,[2,185]),{4:188,20:$Vr,34:$V1,80:4,82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq},{20:$Vw1,41:$Vx1,136:189},{20:$Vw1,41:$Vx1,136:192},o($Vu1,[2,156]),o($VY,[2,124]),o($VY,[2,125]),{10:83,19:$VC,20:$VD,24:$V21,25:193,27:$VE,34:$VF,35:155,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{20:[1,194]},{4:202,19:$Vy1,20:$Vr,27:$Vz1,34:$V1,56:195,63:$VA1,64:$VB1,65:$VC1,66:$VD1,80:4,82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq},{4:202,19:$Vy1,20:$Vr,27:$Vz1,34:$V1,56:203,63:$VA1,64:$VB1,65:$VC1,66:$VD1,80:4,82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq},{60:[1,204]},{60:[1,205]},o($VY,[2,97]),o($VY,[2,121]),o($VY,[2,122]),o($VY,[2,123]),{20:[1,206]},{20:[1,207]},{20:[1,208]},o($VY,[2,98]),o($VY,[2,127]),o($VY,[2,128]),o($VY,[2,129]),o($VY,[2,130]),o($VY,[2,131]),{20:[1,209]},o($VY,[2,99]),o($VY,[2,100]),o($VY,[2,101]),o($VY,[2,102]),o($VY,[2,103]),o($VY,[2,104]),o($VE1,[2,108]),{108:[1,210]},o($VE1,[2,110]),o($VE1,[2,111]),o($VE1,[2,112]),{108:[1,211]},o($VE1,[2,114]),{114:[1,212]},o($VE1,[2,116]),o($VE1,[2,117]),o($VE1,[2,118]),{114:[1,213]},o($VE1,[2,120]),o($Vx,$Vy,{125:64,126:65,83:214,127:$Vz}),o($VY,[2,135]),{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,128:[1,215],139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:157,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{17:216,30:217,31:149,32:150,33:$V31,36:$V41,39:$V51},o($VF1,[2,15],{9:218,42:$V2}),o($VA,[2,24]),{9:221,19:[1,220],24:$VG1,38:219,40:222,42:$V2},o($VA,[2,25]),o($VA,[2,26]),{19:[1,224]},{37:[1,225]},o([26,28,29,34,49,50,51,52,53,54,59,68,99,100,105,108,139,140,141,142,143,144,145,146,147],$Vv1),{26:[1,227],29:$VH1},o($VI1,[2,67],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1}),{4:188,20:[1,229],34:$V1,80:4,82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq},{26:[1,230],28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1},{44:231,45:232,46:$VJ1},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:234,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:235,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:236,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:237,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:238,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:239,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:240,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:241,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:242,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:243,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:244,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:245,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:246,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:247,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:248,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o($Vu1,[2,155]),{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:249,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:250,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:251,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:252,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:253,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:254,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:255,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:256,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o($Vu1,[2,144]),o($Vu1,[2,175]),o($Vu1,[2,177]),{26:[1,257]},{26:[1,258]},o($Vu1,[2,186],{82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,80:54,20:$Vr,96:$V9,98:$Va,101:$Vd,102:$Ve,103:$Vf,104:$Vg,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq}),{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:259,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o($VK1,[2,158]),{20:[1,260]},o([5,18,26,28,29,33,34,36,39,42,46,47,49,50,51,52,53,54,59,67,68,77,105,108,128,139,140,141,142,143,144,145,146,147],[2,157],{129:72,130:73,131:74,132:75,133:76,134:77,94:78,135:79,126:80,118:81,48:82,10:83,35:261,19:$VC,20:$VD,24:$V21,27:$VE,41:$VG,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,119:$VP,120:$VQ,124:$VR,127:$Vz,137:$VS,138:$VT}),{26:[1,262],29:$VH1},{24:[1,263]},{26:[1,264]},{20:[1,265]},o($VI1,[2,60]),o($VI1,[2,61]),o($VI1,[2,62]),o($VI1,[2,63]),o($VI1,[2,64]),o($VI1,[2,65],{82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,80:54,20:$Vr,34:$V1,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq}),{29:[1,266]},{24:[1,267]},{24:[1,268]},{21:[1,269],22:[1,270]},{62:[1,271],68:[1,272]},{62:[1,273]},o($VY,[2,132]),{59:[1,274]},{109:[1,275]},{107:[1,276]},{107:[1,277]},o($Vx,[2,84]),o($VY,[2,137]),o($VF1,[2,13]),o($VA,[2,23]),o($VF1,[2,14]),o($VL1,[2,30],{29:$VM1}),{20:[1,279]},o($VL1,[2,32]),o($VN1,[2,34]),{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:280,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{20:[1,281]},{19:[1,283],24:$VG1,38:282,40:222},{27:[1,284]},{29:[1,285]},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:286,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o([20,26,28,34,49,50,51,52,53,54,59,68,81,96,98,99,100,101,102,103,104,105,106,108,109,110,111,112,113,115,116,117,127,139,140,141,142,143,144,145,146,147],$VU),o($Vu1,[2,148]),o($VL1,[2,40]),{44:288,46:$VO1},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:290,41:$VG,42:[1,291],48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o($VP1,[2,162],{28:$V61,34:$V71,99:$Vh1,100:$Vi1,105:$Vj1,140:$Vm1,141:$Vn1}),o($VP1,[2,163],{28:$V61,34:$V71,99:$Vh1,100:$Vi1,105:$Vj1,140:$Vm1,141:$Vn1}),o($VQ1,[2,164],{28:$V61,34:$V71,99:$Vh1,100:$Vi1}),o($VQ1,[2,165],{28:$V61,34:$V71,99:$Vh1,100:$Vi1}),o($VQ1,[2,166],{28:$V61,34:$V71,99:$Vh1,100:$Vi1}),o($VR1,[2,167],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1}),o($VR1,[2,168],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1}),o($VR1,[2,169],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1}),o($VR1,[2,170],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1}),o($VS1,[2,171],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1}),o($VS1,[2,172],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1}),o([5,18,26,29,33,36,39,42,46,47,67,77,108,128],[2,173],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1}),o([5,18,26,29,33,36,39,42,46,47,67,77,108,128,147],[2,174],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1}),o($VT1,[2,151],{28:$V61,100:$Vi1}),o($VU1,[2,152],{28:$V61,99:$Vh1,100:$Vi1}),o($VV1,[2,45],{28:$V61,34:$V71,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1}),o($VV1,[2,46],{28:$V61,34:$V71,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1}),o($VV1,[2,47],{28:$V61,34:$V71,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1}),o($VV1,[2,48],{28:$V61,34:$V71,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1}),o($VV1,[2,49],{28:$V61,34:$V71,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1}),o($VV1,[2,50],{28:$V61,34:$V71,59:$Vf1,99:$Vh1,100:$Vi1,105:$Vj1,139:$Vl1,140:$Vm1,141:$Vn1}),o($Vu1,[2,51]),{28:$V61,34:$V71,46:[2,43],49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1},o($Vu1,[2,160]),o($Vu1,[2,161]),o($VT1,[2,153],{28:$V61,100:$Vi1}),o($VK1,[2,159]),o($VU1,[2,154],{28:$V61,99:$Vh1,100:$Vi1}),o($Vu1,[2,52]),{10:83,19:$VC,20:$VD,24:$V21,25:292,27:$VE,34:$VF,35:155,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o($Vu1,[2,53]),o($VI1,[2,59]),{27:[1,293]},{4:202,19:$Vy1,20:$Vr,27:$Vz1,34:$V1,56:294,63:$VA1,64:$VB1,65:$VC1,66:$VD1,80:4,82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq},{4:202,19:$Vy1,20:$Vr,27:$Vz1,34:$V1,56:295,63:$VA1,64:$VB1,65:$VC1,66:$VD1,80:4,82:10,84:20,85:21,86:22,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,96:$V9,98:$Va,99:$Vb,100:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq},o($VW1,[2,16]),{19:[1,296]},{68:[1,297]},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:298,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{20:[1,299]},{109:[1,300]},{107:[1,301]},o($VE1,[2,115]),o($VE1,[2,119]),{19:[1,303],24:$VG1,40:302},o($VL1,[2,31],{34:$VX1}),{26:[1,305],28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1},{34:[1,306]},o($VA,[2,28],{29:$VM1}),{20:[1,307]},{26:[1,308]},{19:[1,310],23:309},o($VI1,[2,66],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1}),{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:311,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o($VL1,[2,41]),{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:290,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o($VL1,[2,44],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1}),{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:312,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},{26:[1,313],29:$VH1},{26:[1,314],29:[1,315]},{26:[1,316]},{26:[1,317]},{20:[1,318]},{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:319,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o($VB,[2,70],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1}),{24:[1,320]},{107:[1,321]},o($VE1,[2,113]),o($VN1,[2,33]),{20:[1,322]},{20:[1,323],41:[1,324]},o($VN1,[2,37]),{10:83,19:$VC,20:$VD,24:$V21,27:$VE,34:$VF,35:325,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o($VA,[2,29],{34:$VX1}),o($VA,[2,21]),o($VA,[2,22]),{20:[1,326]},{26:[1,327],28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1},{28:$V61,34:$V71,43:328,47:$V81,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1},o($Vu1,[2,58]),o($Vu1,[2,54]),{27:[1,329]},o($Vu1,[2,56]),o($Vu1,[2,57]),{21:[1,330]},o($VB,[2,69],{17:331,28:$V61,34:$V71,39:$V51,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1}),{19:$VY1,71:332,79:333},o($VE1,[2,109]),{34:$VX1},o($VN1,[2,35]),{20:[1,335]},o($VA,[2,27],{28:$V61,34:$V71,49:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,59:$Vf1,68:$Vg1,99:$Vh1,100:$Vi1,105:$Vj1,108:$Vk1,139:$Vl1,140:$Vm1,141:$Vn1,142:$Vo1,143:$Vp1,144:$Vq1,145:$Vr1,146:$Vs1,147:$Vt1}),{21:[1,336]},{43:337,47:$V81},{46:[2,42]},{26:[1,338]},o($VW1,[2,17]),o($VB,[2,68]),{26:[1,339],29:[1,340]},o($VI1,[2,79]),{20:[1,341]},o($VN1,[2,36]),{24:[1,342]},{44:343,45:344,46:$VJ1},o($Vu1,[2,55]),{72:[1,345],75:[1,346]},{19:$VY1,79:347},{72:[1,348]},{10:83,19:$VC,20:$VD,24:$V21,25:349,27:$VE,34:$VF,35:155,41:$VG,48:82,55:$V3,57:$V4,58:$V5,61:$V6,63:$VH,64:$VI,65:$VJ,66:$VK,94:78,99:$VL,100:$VM,103:$VN,104:$VO,106:$Vi,109:$Vj,110:$Vk,111:$Vl,112:$Vm,113:$Vn,115:$Vo,116:$Vp,117:$Vq,118:81,119:$VP,120:$VQ,124:$VR,126:80,127:$Vz,129:72,130:73,131:74,132:75,133:76,134:77,135:79,137:$VS,138:$VT},o($VL1,[2,38]),{44:350,46:$VO1},{73:[1,351]},{6:353,7:5,8:354,9:7,10:8,11:9,12:19,13:12,14:11,18:$V0,20:$Vw,42:$V2,55:$V3,57:$V4,58:$V5,61:$V6,67:$V7,69:$V8,76:352},o($VI1,[2,78]),{73:[1,355]},{26:[1,356],29:$VH1},o($VL1,[2,39]),{62:[1,357]},{77:[1,358]},{77:[2,73]},{7:360,9:359,13:58,14:11,18:$V0,42:$V2,67:$V7,77:$Vv},{62:[1,361]},o($VA,[2,18]),{20:$VZ1,74:362},{78:[1,364]},{17:365,39:$V51,77:[2,74]},{17:366,39:$V51,77:[2,75]},{20:$VZ1,74:367},{75:[1,368]},o([26,29,75],[2,81]),o($VX,[2,72]),{77:[2,76]},{77:[2,77]},o($VI1,[2,80]),{6:353,7:5,8:354,9:7,10:8,11:9,12:19,13:12,14:11,18:$V0,20:$Vw,42:$V2,55:$V3,57:$V4,58:$V5,61:$V6,67:$V7,69:$V8,76:369},{77:[1,370]},{78:[1,371]},o($VX,[2,71])],
defaultActions: {53:[2,1],56:[2,2],328:[2,42],353:[2,73],365:[2,76],366:[2,77]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores"); 
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('comment');
break;
case 1:this.popState();
break;
case 2:/* skip commentario content*/
break;
case 3:/* skip whitespace */
break;
case 4:return 18;
break;
case 5:return 33;
break;
case 6:return 36;
break;
case 7:return 39;
break;
case 8:return  'if';
break;
case 9:return 21;
break;
case 10:return 37;
break;
case 11:return 67;
break;
case 12:return 'data';
break;
case 13:return 47;
break;
case 14:return 46;
break;
case 15:return 49;
break;
case 16:return 50;
break;
case 17:return 51;
break;
case 18:return 52;
break;
case 19:return 53;
break;
case 20:return 54;
break;
case 21:return 28;
break;
case 22:return 22;
break;
case 23:return 67;
break;
case 24:return 69;
break;
case 25:return 72;
break;
case 26:return 70;
break;
case 27:return 65;
break;
case 28:return 66;
break;
case 29:return 55;
break;
case 30:return 57;
break;
case 31:return 61;
break;
case 32:return 60;
break;
case 33:return 58;
break;
case 34:return 73;
break;
case 35:return 137;
break;
case 36:return 138;
break;
case 37:return 119;
break;
case 38:return 120;
break;
case 39:return 'comment';
break;
case 40:return 106;
break;
case 41:return 110;
break;
case 42:return 111;
break;
case 43:return 112;
break;
case 44:return 113;
break;
case 45:return 115;
break;
case 46:return 116;
break;
case 47:return 117;
break;
case 48:return 114;
break;
case 49:return 109;
break;
case 50:return 81;
break;
case 51:return 139;
break;
case 52:return 59;
break;
case 53:return 105;
break;
case 54:return 68;
break;
case 55:return 146;
break;
case 56:return 145;
break;
case 57:return 144;
break;
case 58:return 143;
break;
case 59:return 142;
break;
case 60:return 19;
break;
case 61:return 29;
break;
case 62:return 78;
break;
case 63:return 127;
break;
case 64:return 128;
break;
case 65:return 24;
break;
case 66:return 26;
break;
case 67:return 75;
break;
case 68:return 77;
break;
case 69:return 63;
break;
case 70:return 27;
break;
case 71:return 64;
break;
case 72:return 64;
break;
case 73:return 141;
break;
case 74:return 140;
break;
case 75:return 147;
break;
case 76:return 108;
break;
case 77:return 20;
break;
case 78:return 104;
break;
case 79:return 96;
break;
case 80:return 98;
break;
case 81:return 99;
break;
case 82:return 100;
break;
case 83:return 101;
break;
case 84:return 102;
break;
case 85:return 34;
break;
case 86:return 103;
break;
case 87:return 107;
break;
case 88:return 62;
break;
case 89:return 124;
break;
case 90:return 41;    
break;
case 91:
  const er = new errorGram.Error({ tipo: 'léxico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es válido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 92:return 5;
break;
}
},
rules: [/^(?:\(:)/,/^(?::\))/,/^(?:.)/,/^(?:\s+)/,/^(?:for\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:by\b)/,/^(?:let\b)/,/^(?:data\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:let\b)/,/^(?:declare\b)/,/^(?:as\b)/,/^(?:function\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:number\b)/,/^(?:substring\b)/,/^(?:upper\b)/,/^(?:case\b)/,/^(?:lower\b)/,/^(?:xs\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\$)/,/^(?:,)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:["m"]["o"]["d"])/,/^(?:["d"]["i"]["v"])/,/^(?:["a"]["n"]["d"])/,/^(?:["o"]["r"])/,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9_]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?::)/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:.)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_XQUERY;
exports.Parser = gramatica_XQUERY.Parser;
exports.parse = function () { return gramatica_XQUERY.parse.apply(gramatica_XQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}