/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_XQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,34],$V1=[1,41],$V2=[1,13],$V3=[1,47],$V4=[1,16],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,14],$Vb=[1,15],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,53],$Vn=[1,46],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,56],$Vu=[5,19,25,29,30,32,35,36,38,39,41,43,44,48,50,51,52,53,54,55,63,69,97,99,100,101,102,103,104,105,106,107,109,110,111,112,113,115,116,117,129,139,140,141,142,143,144,145],$Vv=[1,58],$Vw=[5,41],$Vx=[5,19,25,29,30,32,35,36,38,39,41,43,44,48,50,51,52,53,54,55,63,69,82,97,99,100,101,102,103,104,105,106,107,109,110,111,112,113,115,116,117,129,139,140,141,142,143,144,145],$Vy=[2,120],$Vz=[1,62],$VA=[1,67],$VB=[2,83],$VC=[1,71],$VD=[5,19,25,29,30,32,35,36,38,39,41,43,44,48,50,51,52,53,54,55,63,69,82,97,99,100,101,102,103,104,105,106,107,109,110,111,112,113,115,116,117,128,129,139,140,141,142,143,144,145],$VE=[1,78],$VF=[1,79],$VG=[1,81],$VH=[1,82],$VI=[2,113],$VJ=[1,89],$VK=[1,90],$VL=[1,138],$VM=[1,133],$VN=[1,123],$VO=[1,130],$VP=[1,140],$VQ=[1,142],$VR=[1,132],$VS=[1,139],$VT=[1,141],$VU=[1,134],$VV=[1,135],$VW=[1,127],$VX=[1,126],$VY=[1,128],$VZ=[1,129],$V_=[1,131],$V$=[1,136],$V01=[1,137],$V11=[1,149],$V21=[1,150],$V31=[1,146],$V41=[29,32,35],$V51=[1,159],$V61=[19,106,119,120],$V71=[1,190],$V81=[1,182],$V91=[1,181],$Va1=[1,192],$Vb1=[1,193],$Vc1=[1,194],$Vd1=[1,195],$Ve1=[1,196],$Vf1=[1,197],$Vg1=[1,177],$Vh1=[1,185],$Vi1=[1,189],$Vj1=[1,191],$Vk1=[1,178],$Vl1=[1,187],$Vm1=[1,176],$Vn1=[1,179],$Vo1=[1,180],$Vp1=[1,183],$Vq1=[1,184],$Vr1=[1,186],$Vs1=[1,188],$Vt1=[5,25,29,30,32,35,38,39,41,44,48,50,51,52,53,54,55,63,69,100,101,106,109,129,139,140,141,142,143,144,145],$Vu1=[5,25,29,30,32,35,36,38,39,41,44,48,50,51,52,53,54,55,63,69,100,101,106,109,129,139,140,141,142,143,144,145],$Vv1=[2,167],$Vw1=[1,206],$Vx1=[1,207],$Vy1=[1,228],$Vz1=[25,36],$VA1=[18,19,22,23,30,38,43,57,59,60,62,65,66,100,101,104,105,107,110,111,112,113,115,116,117,119,120,124,125,128,137,138,146,147,148],$VB1=[5,41,44],$VC1=[1,269],$VD1=[5,29,32,35,36,41,44],$VE1=[1,278],$VF1=[1,279],$VG1=[1,277],$VH1=[19,22,30,43,97,99,100,101,102,103,104,105,106,107,110,111,112,113,115,116,117],$VI1=[5,25,29,32,35,38,39,41,44,48,50,51,52,53,54,55,63,69,109,129,139,142,143,144,145],$VJ1=[5,25,29,32,35,38,39,41,44,48,50,51,52,53,54,55,63,69,106,109,129,139,140,141,142,143,144,145],$VK1=[5,25,29,32,35,38,39,41,44,48,69,109,129,142,143,144,145],$VL1=[5,25,29,32,35,41,44,48,69,109,129,144,145],$VM1=[5,25,29,30,32,35,38,39,41,44,48,50,51,52,53,54,55,63,69,100,106,109,129,139,140,141,142,143,144,145],$VN1=[5,25,29,30,32,35,38,39,41,44,48,50,51,52,53,54,55,63,69,106,109,129,139,140,141,142,143,144,145],$VO1=[5,25,29,32,35,38,39,41,44,48,50,51,52,53,54,55,69,109,129,142,143,144,145],$VP1=[1,294],$VQ1=[1,325],$VR1=[5,41,44,48],$VS1=[1,375],$VT1=[1,376],$VU1=[1,377],$VV1=[1,378],$VW1=[25,36,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FLWOR":6,"FOR":7,"HTML":8,"LET":9,"FUNCION":10,"IF":11,"LLAMADA_FUNCION":12,"FOR_1":13,"FOR_2":14,"L_CONDICION":15,"RETURN":16,"for":17,"dolar":18,"id":19,"in":20,"at":21,"par_izq":22,"integer":23,"to":24,"par_der":25,"CONDICION":26,"WHERE":27,"ORDER":28,"where":29,"diagonal":30,"EXPR":31,"order":32,"by":33,"L_VALOR":34,"return":35,"coma":36,"VALOR":37,"menor":38,"mayor":39,"llave_izq":40,"llave_der":41,"data":42,"child":43,"if":44,"THEN":45,"ELSE":46,"then":47,"else":48,"COMPARACION_XQUERY":49,"eq":50,"ne":51,"lt":52,"le":53,"gt":54,"ge":55,"L_PARAM":56,"number":57,"VALORES":58,"tk_string":59,"substring":60,"VALOR_LLAMADA":61,"lower":62,"menos":63,"case":64,"string":65,"upper":66,"doble_pto":67,"let":68,"igual":69,"declare":70,"function":71,"PARAMETROS":72,"as":73,"xs":74,"TIPO":75,"pto_coma":76,"PARAM":77,"tk_double":78,"tk_integer":79,"tk_boolean":80,"INSTRUCCION":81,"o":82,"RUTA":83,"FILTROS":84,"ATRIBUTO_DESCENDIENTES":85,"DESCENDIENTES_NODO":86,"DESCENDIENTE":87,"PADRE":88,"ATRIBUTO_NODO":89,"HIJOS":90,"RAIZ":91,"NODO_ACTUAL":92,"PADRE_NODO":93,"ANY":94,"EJES":95,"OPC_EJES":96,"diagonal_diagonal_arroba_ast":97,"OPC":98,"diagonal_diagonal_ast":99,"doble_diagonal":100,"diagonal_dos_pts":101,"diagonal_arroba_ast":102,"diagonal_ast":103,"punto":104,"dos_pts":105,"mul":106,"ancestor":107,"bi_pto":108,"or":109,"self":110,"attribute":111,"descendant":112,"following":113,"sibling":114,"namespace":115,"parent":116,"preceding":117,"NODO_FUNCION":118,"node":119,"text":120,"PASOS":121,"ANY_ATRIBUTO":122,"ATRIBUTO":123,"any_atributo":124,"arroba":125,"LISTA_PREDICADO":126,"PREDICADO":127,"cor_izq":128,"cor_der":129,"ATRIBUTO_PREDICADO":130,"ARITMETICAS":131,"RELACIONALES":132,"LOGICAS":133,"ORDEN":134,"PATH":135,"OPC_PATH":136,"last":137,"position":138,"mas":139,"div":140,"mod":141,"mayor_igual":142,"menor_igual":143,"diferencia":144,"and":145,"double":146,"true":147,"false":148,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"for",18:"dolar",19:"id",20:"in",21:"at",22:"par_izq",23:"integer",24:"to",25:"par_der",29:"where",30:"diagonal",32:"order",33:"by",35:"return",36:"coma",38:"menor",39:"mayor",40:"llave_izq",41:"llave_der",42:"data",43:"child",44:"if",47:"then",48:"else",50:"eq",51:"ne",52:"lt",53:"le",54:"gt",55:"ge",57:"number",59:"tk_string",60:"substring",62:"lower",63:"menos",64:"case",65:"string",66:"upper",67:"doble_pto",68:"let",69:"igual",70:"declare",71:"function",73:"as",74:"xs",76:"pto_coma",78:"tk_double",79:"tk_integer",80:"tk_boolean",82:"o",97:"diagonal_diagonal_arroba_ast",99:"diagonal_diagonal_ast",100:"doble_diagonal",101:"diagonal_dos_pts",102:"diagonal_arroba_ast",103:"diagonal_ast",104:"punto",105:"dos_pts",106:"mul",107:"ancestor",108:"bi_pto",109:"or",110:"self",111:"attribute",112:"descendant",113:"following",114:"sibling",115:"namespace",116:"parent",117:"preceding",119:"node",120:"text",124:"any_atributo",125:"arroba",128:"cor_izq",129:"cor_der",137:"last",138:"position",139:"mas",140:"div",141:"mod",142:"mayor_igual",143:"menor_igual",144:"diferencia",145:"and",146:"double",147:"true",148:"false"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,4],[7,3],[13,4],[13,7],[14,1],[14,5],[15,2],[15,1],[26,1],[26,1],[27,5],[28,3],[28,4],[16,2],[16,3],[16,2],[16,2],[34,3],[34,1],[37,4],[8,10],[8,14],[8,16],[8,16],[8,11],[11,9],[45,2],[45,2],[46,2],[46,2],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[12,4],[12,4],[12,4],[12,6],[12,8],[12,6],[12,6],[12,15],[61,2],[61,1],[61,1],[56,3],[56,1],[9,7],[9,6],[10,16],[72,3],[72,1],[77,6],[75,1],[75,1],[75,1],[75,1],[4,2],[4,1],[81,4],[81,2],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,2],[85,2],[86,2],[87,2],[88,2],[89,2],[90,2],[91,2],[92,1],[93,1],[94,1],[95,2],[95,6],[95,2],[95,2],[95,2],[95,5],[95,2],[95,4],[95,2],[95,2],[95,2],[95,4],[95,2],[96,1],[96,1],[96,1],[118,1],[118,1],[98,0],[98,1],[98,1],[121,1],[121,1],[122,1],[123,2],[84,0],[84,1],[126,2],[126,1],[127,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,2],[31,1],[31,1],[31,1],[31,3],[31,1],[31,1],[135,3],[135,3],[135,3],[135,3],[135,2],[135,1],[136,1],[136,2],[134,3],[134,3],[131,3],[131,3],[131,3],[131,3],[131,3],[132,3],[132,3],[132,3],[132,3],[132,3],[132,3],[133,3],[133,3],[130,2],[130,1],[130,2],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'XQUERY', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 return new NodoAST({label: 'XQUERY', hijos: [...$$[$0-1].hijos], linea: yylineno}); 
break;
case 3: case 4: case 5: case 6: case 7: case 8:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 9:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 10:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 11:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 12:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 13:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-3],($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 14:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0]], linea: yylineno}); 
break;
case 15:
 this.$ = new NodoAST({label: 'FOR', hijos: [$$[$0-3],$$[$0-2],$$[$0-1]], linea: yylineno}); 
break;
case 16:
 this.$ = new NodoAST({label: 'LCONDICION', hijos: [...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 17:
 this.$ = new NodoAST({label: 'L_CONDICION', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 18:
 this.$ = new NodoAST({label: 'WHERE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 19:
 this.$ = new NodoAST({label: 'ORDER', hijos: [$$[$0]], linea: yylineno}); 
break;
case 20:
 this.$ = new NodoAST({label: 'WHERE', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 21:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 22:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 23: case 25:
 this.$ = new NodoAST({label: 'RETURN', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'RETURN', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 26:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 27:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 28:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 29:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 30:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-8],$$[$0-5],$$[$0-1]], linea: yylineno}); 
break;
case 31:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-12],$$[$0-9],$$[$0-6],$$[$0-1]], linea: yylineno}); 
break;
case 32: case 33:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-14],$$[$0-11],$$[$0-8],$$[$0-6],$$[$0-1]], linea: yylineno}); 
break;
case 34:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-9],$$[$0-5],$$[$0-1]], linea: yylineno}); 
break;
case 35:
 this.$ = new NodoAST({label: 'IF', hijos: [($$[$0-6]+$$[$0-5]),$$[$0-4],...$$[$0-3].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 36:
 this.$ = new NodoAST({label: 'THEN', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 37:
 this.$ = new NodoAST({label: 'THEN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 38:
 this.$ = new NodoAST({label: 'ELSE', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 39:
 this.$ = new NodoAST({label: 'ELSE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 40:
 this.$ = new NodoAST({label: 'eq', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 41:
 this.$ = new NodoAST({label: 'ne', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 42:
 this.$ = new NodoAST({label: 'lt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 43:
 this.$ = new NodoAST({label: 'le', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 44:
 this.$ = new NodoAST({label: 'gt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 45:
 this.$ = new NodoAST({label: 'ge', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 46:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 47:
 this.$ = new NodoAST({label: 'F_NUMBER', hijos: [$$[$0-3],$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 48:
 this.$ = new NodoAST({label: 'F_STRING', hijos: [$$[$0-3],$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 49:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [$$[$0-5],$$[$0-4],...$$[$0-3].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 50:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [$$[$0-7],$$[$0-6],...$$[$0-5].hijos,$$[$0-3],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 51:
 this.$ = new NodoAST({label: 'F_LOWERCASE', hijos: [($$[$0-5]+'-'+$$[$0-3]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 52:
 this.$ = new NodoAST({label: 'F_UPPERCASE', hijos: [($$[$0-5]+'-'+$$[$0-3]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 53:
 this.$ = new NodoAST({label: 'F_HTML', hijos: [$$[$0-13],$$[$0-11],$$[$0-10],$$[$0-8],$$[$0-7],...$$[$0-6].hijos,$$[$0-5],$$[$0-1]], linea: yylineno}); 
break;
case 54:
 this.$ = new NodoAST({label: 'dolar id', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 55: case 166:
 this.$ = new NodoAST({label: 'string', hijos: [$$[$0]], linea: yylineno}); 
break;
case 56: case 167:
 this.$ = new NodoAST({label: 'id', hijos: [$$[$0]], linea: yylineno}); 
break;
case 57: case 62:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 58: case 63:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 59:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 60:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 64:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-3],$$[$0-2],$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 65: case 66: case 67: case 68:
 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 69:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 70:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 71:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-3].hijos, $$[$0-2], ...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 72:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 84:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 85:
 this.$ = new NodoAST({label: 'ATRIBUTO_DESCENDIENTES', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 86: case 87:
 this.$ = new NodoAST({label: 'DESCENDIENTES_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 88:
 this.$ = new NodoAST({label: 'PADRE', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 89:
 this.$ = new NodoAST({label: 'ATRIBUTO_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 90:
 this.$ = new NodoAST({label: 'HIJOS', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 91:
 this.$ = new NodoAST({label: 'RAIZ', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 92:
 this.$ = new NodoAST({label: 'NODO_ACTUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 93:
 this.$ = new NodoAST({label: 'PADRE_NODO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'ANY', hijos: [$$[$0]], linea: yylineno}); 
break;
case 95: case 97: case 98: case 99: case 101: case 103: case 104: case 105: case 107:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 96:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-5], $$[$0-4]], linea: yylineno}); 
break;
case 100:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-4], $$[$0-3]], linea: yylineno}); 
break;
case 102: case 106:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-3], $$[$0-2]], linea: yylineno}); 
break;
case 108: case 109: case 110:
 this.$ = new NodoAST({label: 'OPC_EJES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 111: case 112:
 this.$ = new NodoAST({label: 'NODO_FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 113:
 this.$ = new NodoAST({label: 'OPC', hijos: [], linea: yylineno}); 
break;
case 114: case 115:
 this.$ = new NodoAST({label: 'OPC', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 116: case 117:
 this.$ = new NodoAST({label: 'PASOS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 118:
 this.$ = new NodoAST({label: 'ANY_ATRIBUTO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 119:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 120:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [], linea: yylineno}); 
break;
case 121:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 122:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 123:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 124:
 this.$ = new NodoAST({label: 'PREDICADO', hijos: [$$[$0-2], ...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 125: case 126: case 127: case 128: case 129: case 130: case 132: case 133: case 134: case 136: case 137:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 131:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 135:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 138: case 139:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 140: case 141:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0-2],...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 142:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-1].hijos,$$[$0],$$[$01]], linea: yylineno}); 
break;
case 143:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 144:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 145:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 146: case 147:
 this.$ = new NodoAST({label: 'ORDEN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 148: case 149: case 150: case 151: case 152:
 this.$ = new NodoAST({label: 'ARITMETICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 153: case 154: case 155: case 156: case 157: case 158:
 this.$ = new NodoAST({label: 'RELACIONALES', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 159: case 160:
 this.$ = new NodoAST({label: 'LOGICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 161:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 162:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 163:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 164:
 this.$ = new NodoAST({label: 'integer', hijos: [$$[$0]], linea: yylineno}); 
break;
case 165:
 this.$ = new NodoAST({label: 'double', hijos: [$$[$0]], linea: yylineno}); 
break;
case 168:
 this.$ = new NodoAST({label: 'punto', hijos: [$$[$0]], linea: yylineno}); 
break;
case 169:
 this.$ = new NodoAST({label: 'dos_pts', hijos: [$$[$0]], linea: yylineno}); 
break;
case 170: case 171:
 this.$ = new NodoAST({label: 'boolean', hijos: [$$[$0]], linea: yylineno}); 
break;
case 172:
 this.$ = new NodoAST({label: 'xquery', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:12,17:$V0,19:[1,17],30:$V1,38:$V2,43:$V3,44:$V4,57:$V5,59:$V6,60:$V7,62:$V8,66:$V9,68:$Va,70:$Vb,81:4,83:11,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,94:32,95:33,97:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs},{1:[3]},{5:[1,54],19:$Vt,30:$V1,43:$V3,81:55,83:11,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,94:32,95:33,97:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs},{5:[1,57]},o($Vu,[2,70],{82:$Vv}),o($Vw,[2,3]),o($Vw,[2,4]),o($Vw,[2,5]),o($Vw,[2,6]),o($Vw,[2,7]),o($Vw,[2,8]),o($Vx,$Vy,{84:59,126:60,127:61,128:$Vz}),{4:64,14:63,19:$Vt,22:[1,65],30:$V1,43:$V3,81:4,83:11,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,94:32,95:33,97:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs},{19:[1,66],43:$VA},{18:[1,68]},{71:[1,69]},{22:[1,70]},o([5,19,30,43,82,97,99,100,101,102,103,104,105,106,107,110,111,112,113,115,116,117,128],$VB,{22:$VC}),{22:[1,72]},{22:[1,73]},{22:[1,74]},{63:[1,75]},{63:[1,76]},o($VD,[2,73]),o($VD,[2,74]),o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),o($VD,[2,81]),o($VD,[2,82]),{19:$VE,96:77,106:$VF,118:80,119:$VG,120:$VH},{18:[1,83]},o($VD,$VI,{98:84,118:85,121:86,122:87,123:88,119:$VG,120:$VH,124:$VJ,125:$VK}),o($VD,$VI,{118:85,121:86,122:87,123:88,98:91,119:$VG,120:$VH,124:$VJ,125:$VK}),o($VD,$VI,{118:85,121:86,122:87,123:88,98:92,119:$VG,120:$VH,124:$VJ,125:$VK}),o($VD,$VI,{118:85,121:86,122:87,123:88,98:93,119:$VG,120:$VH,124:$VJ,125:$VK}),o($VD,$VI,{118:85,121:86,122:87,123:88,98:94,119:$VG,120:$VH,124:$VJ,125:$VK}),o($VD,$VI,{118:85,121:86,122:87,123:88,98:95,119:$VG,120:$VH,124:$VJ,125:$VK}),o($VD,$VI,{118:85,121:86,122:87,123:88,98:96,119:$VG,120:$VH,124:$VJ,125:$VK}),o($VD,[2,92]),o($VD,[2,93]),o($VD,[2,94]),{63:[1,98],108:[1,97]},{108:[1,99]},{108:[1,100]},{63:[1,102],108:[1,101]},{63:[1,104],108:[1,103]},{108:[1,105]},{108:[1,106]},{63:[1,108],108:[1,107]},{108:[1,109]},{1:[2,1]},o($Vu,[2,69],{82:$Vv}),o($VD,$VB),{1:[2,2]},{19:$Vt,30:$V1,43:$V3,83:110,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,94:32,95:33,97:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs},o($Vx,[2,72]),o($Vx,[2,121],{127:111,128:$Vz}),o($VD,[2,123]),{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:112,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{15:143,16:144,26:145,27:147,28:148,29:$V11,32:$V21,35:$V31},o($V41,[2,14],{83:11,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,94:32,95:33,81:55,19:$Vt,30:$V1,43:$V3,97:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs}),{23:[1,151]},{39:[1,152]},{39:[1,153]},{19:[1,154]},{19:[1,155]},{18:[1,156]},{18:$VL,19:$V51,23:$VO,56:157,58:158,65:$VR,104:$VU,105:$VV,146:$V_,147:$V$,148:$V01},{18:$VL,19:$V51,23:$VO,58:160,65:$VR,104:$VU,105:$VV,146:$V_,147:$V$,148:$V01},{18:$VL,19:$V51,23:$VO,58:161,65:$VR,104:$VU,105:$VV,146:$V_,147:$V$,148:$V01},{18:[1,163],19:[1,165],61:162,65:[1,164]},{64:[1,166]},{64:[1,167]},o($VD,[2,84]),o($VD,[2,108]),o($VD,[2,109]),o($VD,[2,110]),o($VD,[2,111]),o($VD,[2,112]),{19:[1,168]},o($VD,[2,85]),o($VD,[2,114]),o($VD,[2,115]),o($VD,[2,116]),o($VD,[2,117]),o($VD,[2,118]),{19:[1,169]},o($VD,[2,86]),o($VD,[2,87]),o($VD,[2,88]),o($VD,[2,89]),o($VD,[2,90]),o($VD,[2,91]),o($V61,[2,95]),{109:[1,170]},o($V61,[2,97]),o($V61,[2,98]),o($V61,[2,99]),{109:[1,171]},o($V61,[2,101]),{114:[1,172]},o($V61,[2,103]),o($V61,[2,104]),o($V61,[2,105]),{114:[1,173]},o($V61,[2,107]),o($Vx,$Vy,{126:60,127:61,84:174,128:$Vz}),o($VD,[2,122]),{30:$V71,38:$V81,39:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,69:$Vh1,100:$Vi1,101:$Vj1,106:$Vk1,109:$Vl1,129:[1,175],139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1,144:$Vr1,145:$Vs1},o($Vt1,[2,125]),o($Vt1,[2,126]),o($Vt1,[2,127]),o($Vt1,[2,128]),o($Vt1,[2,129]),o($Vt1,[2,130]),{19:$VE,96:198,106:$VF,118:80,119:$VG,120:$VH},o($Vt1,[2,132]),o($Vt1,[2,133]),o($Vt1,[2,134]),{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:199,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},o($Vt1,[2,136]),o($Vt1,[2,137]),o($Vt1,$VI,{118:85,121:86,122:87,123:88,98:200,19:[1,201],119:$VG,120:$VH,124:$VJ,125:$VK}),o($Vt1,[2,162]),{22:[1,202]},{22:[1,203]},o($Vu1,[2,164]),o($Vu1,[2,165]),o($Vu1,[2,166]),o($Vt1,$Vv1,{22:$VC}),o($Vu1,[2,168]),o($Vu1,[2,169]),o($Vu1,[2,170]),o($Vu1,[2,171]),{4:204,19:$Vt,30:$V1,43:$V3,81:4,83:11,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,94:32,95:33,97:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs},{19:$Vw1,125:$Vx1,136:205},{19:$Vw1,125:$Vx1,136:208},o($Vt1,[2,143]),{19:[1,209]},{16:210,26:211,27:147,28:148,29:$V11,32:$V21,35:$V31},o($Vw,[2,11],{11:212,44:$V4}),o($V41,[2,17]),{8:215,11:216,18:[1,214],34:213,37:217,38:[1,218],44:$V4},o($V41,[2,18]),o($V41,[2,19]),{18:[1,219]},{33:[1,220]},{24:[1,221]},{40:[1,222]},{40:[1,223]},{67:[1,224]},{67:[1,225]},{19:[1,226]},{25:[1,227],36:$Vy1},o($Vz1,[2,58]),o($Vz1,$Vv1),{25:[1,229]},{25:[1,230]},{36:[1,231]},{19:[1,232]},{36:[2,55]},{36:[2,56]},{22:[1,233]},{22:[1,234]},{20:[1,235],21:[1,236]},o($VD,[2,119]),{63:[1,237]},{110:[1,238]},{108:[1,239]},{108:[1,240]},o($Vx,[2,71]),o($VD,[2,124]),{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:241,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:242,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:243,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:244,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:245,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:246,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:247,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:248,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:249,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:250,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:251,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:252,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:253,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:254,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:255,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},o($Vt1,[2,142]),{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:256,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:257,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:258,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:259,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:260,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:261,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},o($Vt1,[2,131]),{25:[1,262],30:$V71,38:$V81,39:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,69:$Vh1,100:$Vi1,101:$Vj1,106:$Vk1,109:$Vl1,139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1,144:$Vr1,145:$Vs1},o($Vt1,[2,161]),o($Vt1,[2,163]),{25:[1,263]},{25:[1,264]},o($Vu1,[2,172],{83:11,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,94:32,95:33,81:55,19:$Vt,43:$V3,97:$Vc,99:$Vd,102:$Vg,103:$Vh,104:$Vi,105:$Vj,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs}),{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:265,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},o($VA1,[2,144]),{19:[1,266]},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:267,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{39:[1,268]},o($Vw,[2,9]),o($V41,[2,16]),o($Vw,[2,10]),o($VB1,[2,23],{36:$VC1}),{19:[1,270]},o($VB1,[2,25]),o($VB1,[2,26]),o($VD1,[2,28]),{19:[1,271],43:$VA},{19:[1,272]},{18:[1,274],34:273,37:217},{23:[1,275]},{7:276,13:12,17:$V0,18:$VE1,19:$VF1,42:$VG1},{42:[1,280]},{69:[1,281]},{19:[1,282]},{30:[1,283]},o($Vt1,[2,46]),{18:$VL,19:$V51,23:$VO,58:284,65:$VR,104:$VU,105:$VV,146:$V_,147:$V$,148:$V01},o($Vt1,[2,47]),o($Vt1,[2,48]),{23:[1,285]},{36:[2,54]},{65:[1,286]},{65:[1,287]},o($VH1,[2,12]),{18:[1,288]},{110:[1,289]},{108:[1,290]},o($V61,[2,102]),o($V61,[2,106]),o($VI1,[2,148],{30:$V71,100:$Vi1,101:$Vj1,106:$Vk1,140:$Vn1,141:$Vo1}),o($VI1,[2,149],{30:$V71,100:$Vi1,101:$Vj1,106:$Vk1,140:$Vn1,141:$Vo1}),o($VJ1,[2,150],{30:$V71,100:$Vi1,101:$Vj1}),o($VJ1,[2,151],{30:$V71,100:$Vi1,101:$Vj1}),o($VJ1,[2,152],{30:$V71,100:$Vi1,101:$Vj1}),o($VK1,[2,153],{30:$V71,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1}),o($VK1,[2,154],{30:$V71,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1}),o($VK1,[2,155],{30:$V71,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1}),o($VK1,[2,156],{30:$V71,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1}),o($VL1,[2,157],{30:$V71,38:$V81,39:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1}),o($VL1,[2,158],{30:$V71,38:$V81,39:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1}),o([5,25,29,32,35,41,44,48,109,129],[2,159],{30:$V71,38:$V81,39:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,69:$Vh1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1,144:$Vr1,145:$Vs1}),o([5,25,29,32,35,41,44,48,109,129,145],[2,160],{30:$V71,38:$V81,39:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,69:$Vh1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1,144:$Vr1}),o($VM1,[2,138],{101:$Vj1}),o($VN1,[2,139],{100:$Vi1,101:$Vj1}),o($VO1,[2,40],{30:$V71,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1}),o($VO1,[2,41],{30:$V71,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1}),o($VO1,[2,42],{30:$V71,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1}),o($VO1,[2,43],{30:$V71,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1}),o($VO1,[2,44],{30:$V71,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1}),o($VO1,[2,45],{30:$V71,63:$Vg1,100:$Vi1,101:$Vj1,106:$Vk1,139:$Vm1,140:$Vn1,141:$Vo1}),o($Vt1,[2,135]),o($Vt1,[2,146]),o($Vt1,[2,147]),o($VM1,[2,140],{101:$Vj1}),o($VA1,[2,145]),o($VN1,[2,141],{100:$Vi1,101:$Vj1}),{40:[1,291]},{18:[1,293],37:292},o($VB1,[2,24],{30:$VP1}),{39:[1,295]},{30:[1,296]},o($V41,[2,21],{36:$VC1}),{19:[1,297]},{25:[1,298]},{41:[1,299]},{22:[1,300]},{19:[1,301]},{67:[1,302]},{22:[1,303]},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:304,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{22:[1,305]},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:306,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},o($Vz1,[2,57]),{25:[1,307],36:[1,308]},{25:[1,309]},{25:[1,310]},{19:[1,311]},{108:[1,312]},o($V61,[2,100]),{19:$VF1},o($VD1,[2,27]),{19:[1,313]},{19:[1,314]},{40:[1,315]},{12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:316,38:$VQ,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},o($V41,[2,22],{30:$VP1}),o($V41,[2,15]),{38:[1,317]},{18:[1,318]},{41:[1,319]},{19:[1,320]},{18:[1,321]},o($Vw,[2,60],{16:322,30:$V71,35:$V31,38:$V81,39:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,69:$Vh1,100:$Vi1,101:$Vj1,106:$Vk1,109:$Vl1,139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1,144:$Vr1,145:$Vs1}),{18:$VQ1,72:323,77:324},{25:[1,326],30:$V71,38:$V81,39:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,69:$Vh1,100:$Vi1,101:$Vj1,106:$Vk1,109:$Vl1,139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1,144:$Vr1,145:$Vs1},o($Vt1,[2,49]),{23:[1,327]},o($Vt1,[2,51]),o($Vt1,[2,52]),{20:[1,328]},o($V61,[2,96]),{30:$VP1},o($VD1,[2,29]),{7:276,13:12,17:$V0,18:$VE1,42:$VG1},o($V41,[2,20],{30:$V71,38:$V81,39:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,69:$Vh1,100:$Vi1,101:$Vj1,106:$Vk1,109:$Vl1,139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1,144:$Vr1,145:$Vs1}),{30:[1,329]},{19:[1,330]},{38:[1,331]},{22:[1,332]},{19:[1,333]},o($Vw,[2,59]),{25:[1,334],36:[1,335]},o($Vz1,[2,63]),{19:[1,336]},{45:337,47:[1,338]},{25:[1,339]},o($VH1,[2,13]),{19:[1,340]},{25:[1,341],30:[1,342]},{30:[1,343]},{18:$VL,19:$V51,23:$VO,56:344,58:158,65:$VR,104:$VU,105:$VV,146:$V_,147:$V$,148:$V01},{30:[1,345]},{73:[1,346]},{18:$VQ1,77:347},{73:[1,348]},{46:349,48:[1,350]},{8:351,12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:352,38:$V2,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},o($Vt1,[2,50]),{39:[1,353]},{41:[1,354]},{19:[1,355]},{19:[1,356]},{25:[1,357],36:$Vy1},{19:[1,358]},{74:[1,359]},o($Vz1,[2,62]),{74:[1,360]},o($VB1,[2,35]),{8:361,12:125,18:$VL,19:$VM,22:$VN,23:$VO,30:$VP,31:362,38:$V2,43:$V3,49:124,57:$V5,58:118,59:$V6,60:$V7,62:$V8,65:$VR,66:$V9,95:119,100:$VS,101:$VT,104:$VU,105:$VV,107:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp,115:$Vq,116:$Vr,117:$Vs,118:122,119:$VG,120:$VH,124:$VW,125:$VX,127:121,128:$Vz,130:113,131:114,132:115,133:116,134:117,135:120,137:$VY,138:$VZ,146:$V_,147:$V$,148:$V01},{48:[2,36]},{30:$V71,38:$V81,39:$V91,48:[2,37],50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,69:$Vh1,100:$Vi1,101:$Vj1,106:$Vk1,109:$Vl1,139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1,144:$Vr1,145:$Vs1},o($VR1,[2,30]),{38:[1,363]},{25:[1,364]},{39:[1,365]},{41:[1,366]},{25:[1,367]},{67:[1,368]},{67:[1,369]},o($VB1,[2,38]),o($VB1,[2,39],{30:$V71,38:$V81,39:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,63:$Vg1,69:$Vh1,100:$Vi1,101:$Vj1,106:$Vk1,109:$Vl1,139:$Vm1,140:$Vn1,141:$Vo1,142:$Vp1,143:$Vq1,144:$Vr1,145:$Vs1}),{30:[1,370]},{41:[1,371]},o($VR1,[2,34]),{38:[1,372]},{41:[1,373]},{59:$VS1,75:374,78:$VT1,79:$VU1,80:$VV1},{59:$VS1,75:379,78:$VT1,79:$VU1,80:$VV1},{19:[1,380]},{38:[1,381]},{30:[1,382]},{38:[1,383]},{40:[1,384]},o($VW1,[2,65]),o($VW1,[2,66]),o($VW1,[2,67]),o($VW1,[2,68]),o($Vz1,[2,64]),{39:[1,385]},{30:[1,386]},{19:[1,387]},{30:[1,388]},{6:389,7:5,8:6,9:7,10:8,11:9,12:10,13:12,17:$V0,19:[1,390],38:$V2,44:$V4,57:$V5,59:$V6,60:$V7,62:$V8,66:$V9,68:$Va,70:$Vb},o($VR1,[2,31]),{19:[1,391]},{39:[1,392]},{43:[1,393]},{41:[1,394]},{22:$VC},{39:[1,395]},o($Vt1,[2,53]),{39:[1,396]},{76:[1,397]},o($VR1,[2,32]),o($VR1,[2,33]),o($Vw,[2,61])],
defaultActions: {54:[2,1],57:[2,2],164:[2,55],165:[2,56],232:[2,54],351:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores"); 
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 17;
break;
case 2:return 29;
break;
case 3:return 32;
break;
case 4:return 35;
break;
case 5:return  'if';
break;
case 6:return 20;
break;
case 7:return 33;
break;
case 8:return 68;
break;
case 9:return 42;
break;
case 10:return 47;
break;
case 11:return 48;
break;
case 12:return 50;
break;
case 13:return 51;
break;
case 14:return 52;
break;
case 15:return 53;
break;
case 16:return 54;
break;
case 17:return 55;
break;
case 18:return 24;
break;
case 19:return 21;
break;
case 20:return 68;
break;
case 21:return 70;
break;
case 22:return 73;
break;
case 23:return 71;
break;
case 24:return 147;
break;
case 25:return 148;
break;
case 26:return 57;
break;
case 27:return 59;
break;
case 28:return 78;
break;
case 29:return 79;
break;
case 30:return 80;
break;
case 31:return 60;
break;
case 32:return 66;
break;
case 33:return 64;
break;
case 34:return 62;
break;
case 35:return 74;
break;
case 36:return 137;
break;
case 37:return 138;
break;
case 38:return 119;
break;
case 39:return 120;
break;
case 40:return 'comment';
break;
case 41:return 107;
break;
case 42:return 111;
break;
case 43:return 43;
break;
case 44:return 112;
break;
case 45:return 113;
break;
case 46:return 115;
break;
case 47:return 116;
break;
case 48:return 117;
break;
case 49:return 114;
break;
case 50:return 110;
break;
case 51:return 82;
break;
case 52:return 139;
break;
case 53:return 63;
break;
case 54:return 106;
break;
case 55:return 69;
break;
case 56:return 144;
break;
case 57:return 143;
break;
case 58:return 142;
break;
case 59:return 38;
break;
case 60:return 39;
break;
case 61:return 18;
break;
case 62:return 36;
break;
case 63:return 76;
break;
case 64:return 128;
break;
case 65:return 129;
break;
case 66:return 22;
break;
case 67:return 25;
break;
case 68:return 40;
break;
case 69:return 41;
break;
case 70:return 146;
break;
case 71:return 23;
break;
case 72:return 65;
break;
case 73:return 65;
break;
case 74:return 141;
break;
case 75:return 140;
break;
case 76:return 145;
break;
case 77:return 109;
break;
case 78:return 19;
break;
case 79:return 105;
break;
case 80:return 97;
break;
case 81:return 99;
break;
case 82:return 100;
break;
case 83:return 101;
break;
case 84:return 102;
break;
case 85:return 103;
break;
case 86:return 30;
break;
case 87:return 104;
break;
case 88:return 108;
break;
case 89:return 67;
break;
case 90:return 124;
break;
case 91:return 125;    
break;
case 92:
  const er = new errorGram.Error({ tipo: 'léxico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es válido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 93:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:for\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:by\b)/,/^(?:let\b)/,/^(?:data\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:let\b)/,/^(?:declare\b)/,/^(?:as\b)/,/^(?:function\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:double\b)/,/^(?:integer\b)/,/^(?:boolean\b)/,/^(?:substring\b)/,/^(?:upper\b)/,/^(?:case\b)/,/^(?:lower\b)/,/^(?:xs\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\$)/,/^(?:,)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:["m"]["o"]["d"])/,/^(?:["d"]["i"]["v"])/,/^(?:["a"]["n"]["d"])/,/^(?:["o"]["r"])/,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9_]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?::)/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_XQUERY;
exports.Parser = gramatica_XQUERY.Parser;
exports.parse = function () { return gramatica_XQUERY.parse.apply(gramatica_XQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}