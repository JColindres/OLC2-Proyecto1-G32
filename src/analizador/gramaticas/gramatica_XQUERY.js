/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_XQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,20],$V2=[1,29],$V3=[1,9],$V4=[1,35],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,41],$Vg=[1,34],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[5,16,26,27,29,32,40,69,71,72,73,74,75,76,77,78,79,83,84,85,86,88,89,90],$Vn=[1,45],$Vo=[5,16,26,27,29,32,40,54,69,71,72,73,74,75,76,77,78,79,83,84,85,86,88,89,90],$Vp=[2,91],$Vq=[1,49],$Vr=[5,16,26,27,29,32,40,54,69,71,72,73,74,75,76,77,78,79,83,84,85,86,88,89,90,101],$Vs=[1,56],$Vt=[1,57],$Vu=[1,59],$Vv=[1,60],$Vw=[2,84],$Vx=[1,67],$Vy=[1,68],$Vz=[1,110],$VA=[1,101],$VB=[1,107],$VC=[1,114],$VD=[1,113],$VE=[1,115],$VF=[1,111],$VG=[1,112],$VH=[1,104],$VI=[1,103],$VJ=[1,105],$VK=[1,106],$VL=[1,108],$VM=[1,109],$VN=[1,122],$VO=[1,123],$VP=[1,119],$VQ=[26,29,32],$VR=[5,16,22,26,27,29,32,35,36,40,47,48,49,50,51,52,54,69,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,88,89,90,101,102,113,114,115,116,117,118,119,120],$VS=[16,78,92,93],$VT=[1,149],$VU=[1,141],$VV=[1,140],$VW=[1,151],$VX=[1,152],$VY=[1,153],$VZ=[1,154],$V_=[1,155],$V$=[1,156],$V01=[1,148],$V11=[1,150],$V21=[1,137],$V31=[1,136],$V41=[1,146],$V51=[1,135],$V61=[1,138],$V71=[1,139],$V81=[1,142],$V91=[1,143],$Va1=[1,144],$Vb1=[1,145],$Vc1=[1,147],$Vd1=[22,26,27,29,32,35,36,47,48,49,50,51,52,72,73,78,81,82,102,113,114,115,116,117,118,119,120],$Ve1=[1,164],$Vf1=[1,165],$Vg1=[5,38],$Vh1=[1,170],$Vi1=[16,19,20,27,40,72,73,76,77,79,83,84,85,86,88,89,90,92,93,97,98,101,111,112,121,122],$Vj1=[5,38,41],$Vk1=[1,215],$Vl1=[5,26,29,32,33,38,41],$Vm1=[16,19,27,40,69,71,72,73,74,75,76,77,78,79,83,84,85,86,88,89,90],$Vn1=[22,26,29,32,35,36,47,48,49,50,51,52,81,82,102,113,116,117,118,119,120],$Vo1=[22,26,29,32,35,36,47,48,49,50,51,52,78,81,82,102,113,114,115,116,117,118,119,120],$Vp1=[22,26,29,32,35,36,82,102,116,117,118,119,120],$Vq1=[22,26,29,32,82,102,118,119,120],$Vr1=[22,26,27,29,32,35,36,47,48,49,50,51,52,72,78,81,82,102,113,114,115,116,117,118,119,120],$Vs1=[22,26,27,29,32,35,36,47,48,49,50,51,52,78,81,82,102,113,114,115,116,117,118,119,120],$Vt1=[22,26,29,32,35,36,47,48,49,50,51,52,82,102,116,117,118,119,120],$Vu1=[1,231],$Vv1=[5,38,41,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FLWOR":6,"FOR":7,"HTML":8,"FOR_1":9,"FOR_2":10,"L_CONDICION":11,"RETURN":12,"IF":13,"for":14,"dolar":15,"id":16,"in":17,"at":18,"par_izq":19,"integer":20,"to":21,"par_der":22,"CONDICION":23,"WHERE":24,"ORDER":25,"where":26,"diagonal":27,"EXPR":28,"order":29,"by":30,"L_VALOR":31,"return":32,"coma":33,"VALOR":34,"menor":35,"mayor":36,"llave_izq":37,"llave_der":38,"data":39,"child":40,"if":41,"THEN":42,"ELSE":43,"then":44,"else":45,"COMPARACION_XQUERY":46,"eq":47,"ne":48,"lt":49,"le":50,"gt":51,"ge":52,"INSTRUCCION":53,"o":54,"RUTA":55,"FILTROS":56,"ATRIBUTO_DESCENDIENTES":57,"DESCENDIENTES_NODO":58,"DESCENDIENTE":59,"PADRE":60,"ATRIBUTO_NODO":61,"HIJOS":62,"RAIZ":63,"NODO_ACTUAL":64,"PADRE_NODO":65,"ANY":66,"EJES":67,"OPC_EJES":68,"diagonal_diagonal_arroba_ast":69,"OPC":70,"diagonal_diagonal_ast":71,"doble_diagonal":72,"diagonal_dos_pts":73,"diagonal_arroba_ast":74,"diagonal_ast":75,"punto":76,"dos_pts":77,"mul":78,"ancestor":79,"bi_pto":80,"menos":81,"or":82,"self":83,"attribute":84,"descendant":85,"following":86,"sibling":87,"namespace":88,"parent":89,"preceding":90,"NODO_FUNCION":91,"node":92,"text":93,"PASOS":94,"ANY_ATRIBUTO":95,"ATRIBUTO":96,"any_atributo":97,"arroba":98,"LISTA_PREDICADO":99,"PREDICADO":100,"cor_izq":101,"cor_der":102,"ATRIBUTO_PREDICADO":103,"ARITMETICAS":104,"RELACIONALES":105,"LOGICAS":106,"ORDEN":107,"VALORES":108,"PATH":109,"OPC_PATH":110,"last":111,"position":112,"mas":113,"div":114,"mod":115,"mayor_igual":116,"menor_igual":117,"igual":118,"diferencia":119,"and":120,"double":121,"string":122,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"for",15:"dolar",16:"id",17:"in",18:"at",19:"par_izq",20:"integer",21:"to",22:"par_der",26:"where",27:"diagonal",29:"order",30:"by",32:"return",33:"coma",35:"menor",36:"mayor",37:"llave_izq",38:"llave_der",39:"data",40:"child",41:"if",44:"then",45:"else",47:"eq",48:"ne",49:"lt",50:"le",51:"gt",52:"ge",54:"o",69:"diagonal_diagonal_arroba_ast",71:"diagonal_diagonal_ast",72:"doble_diagonal",73:"diagonal_dos_pts",74:"diagonal_arroba_ast",75:"diagonal_ast",76:"punto",77:"dos_pts",78:"mul",79:"ancestor",80:"bi_pto",81:"menos",82:"or",83:"self",84:"attribute",85:"descendant",86:"following",87:"sibling",88:"namespace",89:"parent",90:"preceding",92:"node",93:"text",97:"any_atributo",98:"arroba",101:"cor_izq",102:"cor_der",111:"last",112:"position",113:"mas",114:"div",115:"mod",116:"mayor_igual",117:"menor_igual",118:"igual",119:"diferencia",120:"and",121:"double",122:"string"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[7,4],[7,4],[7,3],[9,4],[9,7],[10,1],[10,5],[11,2],[11,1],[23,1],[23,1],[24,5],[25,3],[25,4],[12,2],[12,3],[12,2],[12,2],[31,3],[31,1],[34,4],[8,10],[8,14],[8,16],[8,16],[8,11],[13,9],[42,2],[43,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[4,2],[4,1],[53,4],[53,2],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,2],[57,2],[58,2],[59,2],[60,2],[61,2],[62,2],[63,2],[64,1],[65,1],[66,1],[67,2],[67,6],[67,2],[67,2],[67,2],[67,5],[67,2],[67,4],[67,2],[67,2],[67,2],[67,4],[67,2],[68,1],[68,1],[68,1],[91,1],[91,1],[70,0],[70,1],[70,1],[94,1],[94,1],[95,1],[96,2],[56,0],[56,1],[99,2],[99,1],[100,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,2],[28,1],[28,1],[28,1],[28,3],[28,1],[109,3],[109,3],[109,3],[109,3],[109,2],[109,1],[110,1],[110,2],[107,3],[107,3],[104,3],[104,3],[104,3],[104,3],[104,3],[105,3],[105,3],[105,3],[105,3],[105,3],[105,3],[106,3],[106,3],[103,2],[103,1],[103,2],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'XQUERY', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 return new NodoAST({label: 'XQUERY', hijos: [...$$[$0-1].hijos], linea: yylineno}); 
break;
case 3: case 4:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 5:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 6:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 7:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 8:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 9:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-3],($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 10:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0]], linea: yylineno}); 
break;
case 11:
 this.$ = new NodoAST({label: 'FOR', hijos: [$$[$0-3],$$[$0-2],$$[$0-1]], linea: yylineno}); 
break;
case 12:
 this.$ = new NodoAST({label: 'LCONDICION', hijos: [...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 13:
 this.$ = new NodoAST({label: 'L_CONDICION', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 14:
 this.$ = new NodoAST({label: 'WHERE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 15:
 this.$ = new NodoAST({label: 'ORDER', hijos: [$$[$0]], linea: yylineno}); 
break;
case 16:
 this.$ = new NodoAST({label: 'WHERE', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 17:
 this.$ = new NodoAST({label: 'ORDER', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 18:
 this.$ = new NodoAST({label: 'ORDER', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 19: case 21:
 this.$ = new NodoAST({label: 'RETURN', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 20:
 this.$ = new NodoAST({label: 'RETURN', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 22:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 23:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 26:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-8],$$[$0-5],$$[$0-1]], linea: yylineno}); 
break;
case 27:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-12],$$[$0-9],$$[$0-6],$$[$0-1]], linea: yylineno}); 
break;
case 28: case 29:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-14],$$[$0-11],$$[$0-8],$$[$0-6],$$[$0-1]], linea: yylineno}); 
break;
case 30:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-9],$$[$0-5],$$[$0-1]], linea: yylineno}); 
break;
case 31:
 this.$ = new NodoAST({label: 'IF', hijos: [($$[$0-6]+$$[$0-5]),$$[$0-4],...$$[$0-3].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 32:
 this.$ = new NodoAST({label: 'THEN', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 33:
 this.$ = new NodoAST({label: 'ELSE', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 34:
 this.$ = new NodoAST({label: 'eq', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 35:
 this.$ = new NodoAST({label: 'ne', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 36:
 this.$ = new NodoAST({label: 'lt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 37:
 this.$ = new NodoAST({label: 'le', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 38:
 this.$ = new NodoAST({label: 'gt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 39:
 this.$ = new NodoAST({label: 'ge', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 40:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 41:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 42:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-3].hijos, $$[$0-2], ...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 43:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 55:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 56:
 this.$ = new NodoAST({label: 'ATRIBUTO_DESCENDIENTES', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 57: case 58:
 this.$ = new NodoAST({label: 'DESCENDIENTES_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 59:
 this.$ = new NodoAST({label: 'PADRE', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 60:
 this.$ = new NodoAST({label: 'ATRIBUTO_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 61:
 this.$ = new NodoAST({label: 'HIJOS', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 62:
 this.$ = new NodoAST({label: 'RAIZ', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 63:
 this.$ = new NodoAST({label: 'NODO_ACTUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 64:
 this.$ = new NodoAST({label: 'PADRE_NODO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 65:
 this.$ = new NodoAST({label: 'ANY', hijos: [$$[$0]], linea: yylineno}); 
break;
case 66: case 68: case 69: case 70: case 72: case 74: case 75: case 76: case 78:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 67:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-5], $$[$0-4]], linea: yylineno}); 
break;
case 71:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-4], $$[$0-3]], linea: yylineno}); 
break;
case 73: case 77:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-3], $$[$0-2]], linea: yylineno}); 
break;
case 79: case 80: case 81:
 this.$ = new NodoAST({label: 'OPC_EJES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 82: case 83:
 this.$ = new NodoAST({label: 'NODO_FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 84:
 this.$ = new NodoAST({label: 'OPC', hijos: [], linea: yylineno}); 
break;
case 85: case 86:
 this.$ = new NodoAST({label: 'OPC', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 87: case 88:
 this.$ = new NodoAST({label: 'PASOS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 89:
 this.$ = new NodoAST({label: 'ANY_ATRIBUTO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 90:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 91:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [], linea: yylineno}); 
break;
case 92:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 93:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 95:
 this.$ = new NodoAST({label: 'PREDICADO', hijos: [$$[$0-2], ...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 96: case 97: case 98: case 99: case 100: case 101: case 103: case 104: case 105: case 107:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 102:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 106:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 108: case 109:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 110: case 111:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0-2],...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 112:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-1].hijos,$$[$0],$$[$01]], linea: yylineno}); 
break;
case 113:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 114:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 115:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 116: case 117:
 this.$ = new NodoAST({label: 'ORDEN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 118: case 119: case 120: case 121: case 122:
 this.$ = new NodoAST({label: 'ARITMETICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 123: case 124: case 125: case 126: case 127: case 128:
 this.$ = new NodoAST({label: 'RELACIONALES', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 129: case 130:
 this.$ = new NodoAST({label: 'LOGICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 131:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 132:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 133:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 134:
 this.$ = new NodoAST({label: 'integer', hijos: [$$[$0]], linea: yylineno}); 
break;
case 135:
 this.$ = new NodoAST({label: 'double', hijos: [$$[$0]], linea: yylineno}); 
break;
case 136:
 this.$ = new NodoAST({label: 'string', hijos: [$$[$0]], linea: yylineno}); 
break;
case 137:
 this.$ = new NodoAST({label: 'id', hijos: [$$[$0]], linea: yylineno}); 
break;
case 138:
 this.$ = new NodoAST({label: 'punto', hijos: [$$[$0]], linea: yylineno}); 
break;
case 139:
 this.$ = new NodoAST({label: 'dos_pts', hijos: [$$[$0]], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:6,9:8,14:$V0,16:$V1,27:$V2,35:$V3,40:$V4,53:4,55:7,57:10,58:11,59:12,60:13,61:14,62:15,63:16,64:17,65:18,66:19,67:21,69:$V5,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl},{1:[3]},{5:[1,42],16:$V1,27:$V2,40:$V4,53:43,55:7,57:10,58:11,59:12,60:13,61:14,62:15,63:16,64:17,65:18,66:19,67:21,69:$V5,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl},{5:[1,44]},o($Vm,[2,41],{54:$Vn}),{5:[2,3]},{5:[2,4]},o($Vo,$Vp,{56:46,99:47,100:48,101:$Vq}),{4:51,10:50,16:$V1,19:[1,52],27:$V2,40:$V4,53:4,55:7,57:10,58:11,59:12,60:13,61:14,62:15,63:16,64:17,65:18,66:19,67:21,69:$V5,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl},{16:[1,53],40:[1,54]},o($Vr,[2,44]),o($Vr,[2,45]),o($Vr,[2,46]),o($Vr,[2,47]),o($Vr,[2,48]),o($Vr,[2,49]),o($Vr,[2,50]),o($Vr,[2,51]),o($Vr,[2,52]),o($Vr,[2,53]),o($Vr,[2,54]),{16:$Vs,68:55,78:$Vt,91:58,92:$Vu,93:$Vv},{15:[1,61]},o($Vr,$Vw,{70:62,91:63,94:64,95:65,96:66,92:$Vu,93:$Vv,97:$Vx,98:$Vy}),o($Vr,$Vw,{91:63,94:64,95:65,96:66,70:69,92:$Vu,93:$Vv,97:$Vx,98:$Vy}),o($Vr,$Vw,{91:63,94:64,95:65,96:66,70:70,92:$Vu,93:$Vv,97:$Vx,98:$Vy}),o($Vr,$Vw,{91:63,94:64,95:65,96:66,70:71,92:$Vu,93:$Vv,97:$Vx,98:$Vy}),o($Vr,$Vw,{91:63,94:64,95:65,96:66,70:72,92:$Vu,93:$Vv,97:$Vx,98:$Vy}),o($Vr,$Vw,{91:63,94:64,95:65,96:66,70:73,92:$Vu,93:$Vv,97:$Vx,98:$Vy}),o($Vr,$Vw,{91:63,94:64,95:65,96:66,70:74,92:$Vu,93:$Vv,97:$Vx,98:$Vy}),o($Vr,[2,63]),o($Vr,[2,64]),o($Vr,[2,65]),{80:[1,75],81:[1,76]},{80:[1,77]},{80:[1,78]},{80:[1,79],81:[1,80]},{80:[1,81],81:[1,82]},{80:[1,83]},{80:[1,84]},{80:[1,85],81:[1,86]},{80:[1,87]},{1:[2,1]},o($Vm,[2,40],{54:$Vn}),{1:[2,2]},{16:$V1,27:$V2,40:$V4,55:88,57:10,58:11,59:12,60:13,61:14,62:15,63:16,64:17,65:18,66:19,67:21,69:$V5,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl},o($Vo,[2,43]),o($Vo,[2,92],{100:89,101:$Vq}),o($Vr,[2,94]),{16:$Vz,19:$VA,20:$VB,27:$VC,28:90,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{11:116,12:117,23:118,24:120,25:121,26:$VN,29:$VO,32:$VP},o($VQ,[2,10],{55:7,57:10,58:11,59:12,60:13,61:14,62:15,63:16,64:17,65:18,66:19,67:21,53:43,16:$V1,27:$V2,40:$V4,69:$V5,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl}),{20:[1,124]},{36:[1,125]},{36:[1,126]},o($Vr,[2,55]),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),o($VR,[2,82]),o($VR,[2,83]),{16:[1,127]},o($Vr,[2,56]),o($VR,[2,85]),o($VR,[2,86]),o($VR,[2,87]),o($VR,[2,88]),o($VR,[2,89]),{16:[1,128]},o($Vr,[2,57]),o($Vr,[2,58]),o($Vr,[2,59]),o($Vr,[2,60]),o($Vr,[2,61]),o($Vr,[2,62]),o($VS,[2,66]),{82:[1,129]},o($VS,[2,68]),o($VS,[2,69]),o($VS,[2,70]),{82:[1,130]},o($VS,[2,72]),{87:[1,131]},o($VS,[2,74]),o($VS,[2,75]),o($VS,[2,76]),{87:[1,132]},o($VS,[2,78]),o($Vo,$Vp,{99:47,100:48,56:133,101:$Vq}),o($Vr,[2,93]),{27:$VT,35:$VU,36:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,82:$V41,102:[1,134],113:$V51,114:$V61,115:$V71,116:$V81,117:$V91,118:$Va1,119:$Vb1,120:$Vc1},o($Vd1,[2,96]),o($Vd1,[2,97]),o($Vd1,[2,98]),o($Vd1,[2,99]),o($Vd1,[2,100]),o($Vd1,[2,101]),{16:$Vs,68:157,78:$Vt,91:58,92:$Vu,93:$Vv},o($Vd1,[2,103]),o($Vd1,[2,104]),o($Vd1,[2,105]),{16:$Vz,19:$VA,20:$VB,27:$VC,28:158,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},o($Vd1,[2,107]),o($Vd1,$Vw,{91:63,94:64,95:65,96:66,70:159,16:[1,160],92:$Vu,93:$Vv,97:$Vx,98:$Vy}),o($Vd1,[2,132]),{19:[1,161]},{19:[1,162]},o($Vd1,[2,134]),o($Vd1,[2,135]),o($Vd1,[2,136]),o($Vd1,[2,137]),o($Vd1,[2,138]),o($Vd1,[2,139]),{16:$Ve1,98:$Vf1,110:163},{16:$Ve1,98:$Vf1,110:166},o($Vd1,[2,113]),{12:167,23:168,24:120,25:121,26:$VN,29:$VO,32:$VP},o($Vg1,[2,7],{13:169,41:$Vh1}),o($VQ,[2,13]),{8:173,13:174,15:[1,172],31:171,34:175,35:$V3,41:$Vh1},o($VQ,[2,14]),o($VQ,[2,15]),{15:[1,176]},{30:[1,177]},{21:[1,178]},{37:[1,179]},{37:[1,180]},{17:[1,181],18:[1,182]},o($VR,[2,90]),{81:[1,183]},{83:[1,184]},{80:[1,185]},{80:[1,186]},o($Vo,[2,42]),o($VR,[2,95]),{16:$Vz,19:$VA,20:$VB,27:$VC,28:187,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:188,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:189,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:190,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:191,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:192,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:193,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:194,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:195,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:196,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:197,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:198,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:199,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:200,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:201,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},o($Vd1,[2,112]),{16:$Vz,19:$VA,20:$VB,27:$VC,28:202,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:203,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:204,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:205,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:206,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:207,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},o($Vd1,[2,102]),{22:[1,208],27:$VT,35:$VU,36:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,82:$V41,113:$V51,114:$V61,115:$V71,116:$V81,117:$V91,118:$Va1,119:$Vb1,120:$Vc1},o($Vd1,[2,131]),o($Vd1,[2,133]),{22:[1,209]},{22:[1,210]},{16:$Vz,19:$VA,20:$VB,27:$VC,28:211,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},o($Vi1,[2,114]),{16:[1,212]},{16:$Vz,19:$VA,20:$VB,27:$VC,28:213,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},o($Vg1,[2,5]),o($VQ,[2,12]),o($Vg1,[2,6]),{19:[1,214]},o($Vj1,[2,19],{33:$Vk1}),{16:[1,216]},o($Vj1,[2,21]),o($Vj1,[2,22]),o($Vl1,[2,24]),{16:[1,217]},{15:[1,219],31:218,34:175},{20:[1,220]},{7:221,9:8,14:$V0,15:[1,223],39:[1,222]},{39:[1,224]},o($Vm1,[2,8]),{15:[1,225]},{83:[1,226]},{80:[1,227]},o($VS,[2,73]),o($VS,[2,77]),o($Vn1,[2,118],{27:$VT,72:$V01,73:$V11,78:$V21,114:$V61,115:$V71}),o($Vn1,[2,119],{27:$VT,72:$V01,73:$V11,78:$V21,114:$V61,115:$V71}),o($Vo1,[2,120],{27:$VT,72:$V01,73:$V11}),o($Vo1,[2,121],{27:$VT,72:$V01,73:$V11}),o($Vo1,[2,122],{27:$VT,72:$V01,73:$V11}),o($Vp1,[2,123],{27:$VT,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71}),o($Vp1,[2,124],{27:$VT,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71}),o($Vp1,[2,125],{27:$VT,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71}),o($Vp1,[2,126],{27:$VT,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71}),o($Vq1,[2,127],{27:$VT,35:$VU,36:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71,116:$V81,117:$V91}),o($Vq1,[2,128],{27:$VT,35:$VU,36:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71,116:$V81,117:$V91}),o([22,26,29,32,82,102],[2,129],{27:$VT,35:$VU,36:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71,116:$V81,117:$V91,118:$Va1,119:$Vb1,120:$Vc1}),o([22,26,29,32,82,102,120],[2,130],{27:$VT,35:$VU,36:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71,116:$V81,117:$V91,118:$Va1,119:$Vb1}),o($Vr1,[2,108],{73:$V11}),o($Vs1,[2,109],{72:$V01,73:$V11}),o($Vt1,[2,34],{27:$VT,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71}),o($Vt1,[2,35],{27:$VT,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71}),o($Vt1,[2,36],{27:$VT,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71}),o($Vt1,[2,37],{27:$VT,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71}),o($Vt1,[2,38],{27:$VT,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71}),o($Vt1,[2,39],{27:$VT,72:$V01,73:$V11,78:$V21,81:$V31,113:$V51,114:$V61,115:$V71}),o($Vd1,[2,106]),o($Vd1,[2,116]),o($Vd1,[2,117]),o($Vr1,[2,110],{73:$V11}),o($Vi1,[2,115]),o($Vs1,[2,111],{72:$V01,73:$V11}),{15:[1,228]},{15:[1,230],34:229},o($Vj1,[2,20],{27:$Vu1}),{27:[1,232]},o($VQ,[2,17],{33:$Vk1}),{16:[1,233]},{22:[1,234]},{38:[1,235]},{19:[1,236]},{16:[1,237]},{19:[1,238]},{16:[1,239]},{80:[1,240]},o($VS,[2,71]),{16:[1,241]},o($Vl1,[2,23]),{16:[1,242]},{16:[1,243]},{16:$Vz,19:$VA,20:$VB,27:$VC,28:244,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},o($VQ,[2,18],{27:$Vu1}),o($VQ,[2,11]),{35:[1,245]},{15:[1,246]},{38:[1,247]},{15:[1,248]},{17:[1,249]},o($VS,[2,67]),{27:[1,250]},{27:$Vu1},o($Vl1,[2,25]),o($VQ,[2,16],{27:$VT,35:$VU,36:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,82:$V41,113:$V51,114:$V61,115:$V71,116:$V81,117:$V91,118:$Va1,119:$Vb1,120:$Vc1}),{27:[1,251]},{16:[1,252]},{35:[1,253]},{16:[1,254]},o($Vm1,[2,9]),{16:$Vz,19:$VA,20:$VB,27:$VC,28:255,40:$V4,46:102,67:97,72:$VD,73:$VE,76:$VF,77:$VG,79:$Ve,83:$Vf,84:$Vg,85:$Vh,86:$Vi,88:$Vj,89:$Vk,90:$Vl,91:100,92:$Vu,93:$Vv,97:$VH,98:$VI,100:99,101:$Vq,103:91,104:92,105:93,106:94,107:95,108:96,109:98,111:$VJ,112:$VK,121:$VL,122:$VM},{16:[1,256]},{22:[1,257],27:[1,258]},{27:[1,259]},{27:[1,260]},{22:[1,261],27:$VT,35:$VU,36:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,72:$V01,73:$V11,78:$V21,81:$V31,82:$V41,113:$V51,114:$V61,115:$V71,116:$V81,117:$V91,118:$Va1,119:$Vb1,120:$Vc1},{36:[1,262]},{38:[1,263]},{16:[1,264]},{16:[1,265]},{16:[1,266]},{42:267,44:[1,268]},o($Vv1,[2,26]),{35:[1,269]},{22:[1,270]},{36:[1,271]},{22:[1,272]},{43:273,45:[1,274]},{8:275,35:$V3},{27:[1,276]},{38:[1,277]},o($Vv1,[2,30]),{38:[1,278]},o($Vj1,[2,31]),{8:279,35:$V3},{45:[2,32]},{16:[1,280]},{35:[1,281]},{35:[1,282]},o($Vj1,[2,33]),{36:[1,283]},{27:[1,284]},{27:[1,285]},o($Vv1,[2,27]),{16:[1,286]},{40:[1,287]},{36:[1,288]},{36:[1,289]},o($Vv1,[2,28]),o($Vv1,[2,29])],
defaultActions: {5:[2,3],6:[2,4],42:[2,1],44:[2,2],275:[2,32]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores"); 
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 14;
break;
case 2:return 26;
break;
case 3:return 29;
break;
case 4:return 32;
break;
case 5:return  'if';
break;
case 6:return 17;
break;
case 7:return 30;
break;
case 8:return 'let';
break;
case 9:return 39;
break;
case 10:return 44;
break;
case 11:return 45;
break;
case 12:return 47;
break;
case 13:return 48;
break;
case 14:return 49;
break;
case 15:return 50;
break;
case 16:return 51;
break;
case 17:return 52;
break;
case 18:return 21;
break;
case 19:return 18;
break;
case 20:return 'let';
break;
case 21:return 'declare';
break;
case 22:return 'as';
break;
case 23:return 'function';
break;
case 24:return 111;
break;
case 25:return 112;
break;
case 26:return 92;
break;
case 27:return 93;
break;
case 28:return 'comment';
break;
case 29:return 79;
break;
case 30:return 84;
break;
case 31:return 40;
break;
case 32:return 85;
break;
case 33:return 86;
break;
case 34:return 88;
break;
case 35:return 89;
break;
case 36:return 90;
break;
case 37:return 87;
break;
case 38:return 83;
break;
case 39:return 54;
break;
case 40:return 113;
break;
case 41:return 81;
break;
case 42:return 78;
break;
case 43:return 118;
break;
case 44:return 119;
break;
case 45:return 117;
break;
case 46:return 116;
break;
case 47:return 35;
break;
case 48:return 36;
break;
case 49:return 15;
break;
case 50:return 33;
break;
case 51:return 101;
break;
case 52:return 102;
break;
case 53:return 19;
break;
case 54:return 22;
break;
case 55:return 37;
break;
case 56:return 38;
break;
case 57:return 121;
break;
case 58:return 20;
break;
case 59:return 122;
break;
case 60:return 122;
break;
case 61:return 115;
break;
case 62:return 114;
break;
case 63:return 120;
break;
case 64:return 82;
break;
case 65:return 16;
break;
case 66:return 77;
break;
case 67:return 69;
break;
case 68:return 71;
break;
case 69:return 72;
break;
case 70:return 73;
break;
case 71:return 74;
break;
case 72:return 75;
break;
case 73:return 27;
break;
case 74:return 76;
break;
case 75:return 80;
break;
case 76:return 'doble_pto';
break;
case 77:return 97;
break;
case 78:return 98;    
break;
case 79:
  const er = new errorGram.Error({ tipo: 'léxico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es válido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 80:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:for\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:by\b)/,/^(?:let\b)/,/^(?:data\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:let\b)/,/^(?:declare\b)/,/^(?:as\b)/,/^(?:function\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\$)/,/^(?:,)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:["m"]["o"]["d"])/,/^(?:["d"]["i"]["v"])/,/^(?:["a"]["n"]["d"])/,/^(?:["o"]["r"])/,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9_]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?::)/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_XQUERY;
exports.Parser = gramatica_XQUERY.Parser;
exports.parse = function () { return gramatica_XQUERY.parse.apply(gramatica_XQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}