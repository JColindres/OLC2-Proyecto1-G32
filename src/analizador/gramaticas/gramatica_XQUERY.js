/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_XQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,32],$V1=[1,41],$V2=[1,13],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,33],$V9=[1,34],$Va=[1,35],$Vb=[1,36],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,40],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,53],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,56],$Vt=[5,18,20,26,28,29,33,34,36,39,42,46,47,49,50,51,52,53,54,61,66,67,76,95,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,114,115,116,127,137,138,139,140,141,142,143,144,145],$Vu=[1,58],$Vv=[5,76],$Vw=[2,4],$Vx=[1,63],$Vy=[5,18,20,26,28,29,33,34,36,39,42,46,47,49,50,51,52,53,54,61,66,67,76,80,95,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,114,115,116,127,137,138,139,140,141,142,143,144,145],$Vz=[2,129],$VA=[1,67],$VB=[33,36,39],$VC=[5,18,42,66,76],$VD=[1,97],$VE=[1,92],$VF=[1,89],$VG=[1,99],$VH=[1,85],$VI=[1,91],$VJ=[1,98],$VK=[1,100],$VL=[1,93],$VM=[1,94],$VN=[1,101],$VO=[1,102],$VP=[1,86],$VQ=[1,87],$VR=[1,88],$VS=[1,90],$VT=[1,95],$VU=[1,96],$VV=[2,92],$VW=[1,103],$VX=[1,104],$VY=[18,20,55,57,58,60,63,68],$VZ=[5,18,20,26,28,29,33,34,36,39,42,46,47,49,50,51,52,53,54,61,66,67,76,80,95,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,114,115,116,126,127,137,138,139,140,141,142,143,144,145],$V_=[1,111],$V$=[1,112],$V01=[2,122],$V11=[1,123],$V21=[1,122],$V31=[1,146],$V41=[1,153],$V51=[1,154],$V61=[1,150],$V71=[1,183],$V81=[1,175],$V91=[1,184],$Va1=[1,177],$Vb1=[1,178],$Vc1=[1,179],$Vd1=[1,180],$Ve1=[1,181],$Vf1=[1,182],$Vg1=[1,162],$Vh1=[1,170],$Vi1=[1,174],$Vj1=[1,176],$Vk1=[1,163],$Vl1=[1,172],$Vm1=[1,161],$Vn1=[1,164],$Vo1=[1,165],$Vp1=[1,166],$Vq1=[1,167],$Vr1=[1,168],$Vs1=[1,169],$Vt1=[1,171],$Vu1=[1,173],$Vv1=[5,18,26,28,29,33,34,36,39,42,46,47,49,50,51,52,53,54,61,66,67,76,98,99,104,107,127,137,138,139,140,141,142,143,144,145],$Vw1=[2,173],$Vx1=[2,176],$Vy1=[1,192],$Vz1=[1,193],$VA1=[1,198],$VB1=[1,201],$VC1=[1,203],$VD1=[1,202],$VE1=[20,104,118,119],$VF1=[5,39,76],$VG1=[1,223],$VH1=[1,228],$VI1=[26,29],$VJ1=[1,233],$VK1=[19,20,24,27,34,41,55,57,58,60,63,65,98,99,102,103,105,108,109,110,111,112,114,115,116,118,119,123,126,135,136,146,147,148],$VL1=[5,18,39,42,66,76],$VM1=[1,278],$VN1=[5,18,29,33,36,39,42,66,76],$VO1=[1,289],$VP1=[5,18,26,29,33,36,39,42,46,47,49,50,51,52,53,54,61,66,67,76,107,127,137,140,141,142,143,144,145],$VQ1=[5,18,26,29,33,36,39,42,46,47,49,50,51,52,53,54,61,66,67,76,104,107,127,137,138,139,140,141,142,143,144,145],$VR1=[5,18,26,29,33,36,39,42,46,47,66,67,76,107,127,140,141,142,143,144,145],$VS1=[5,18,26,29,33,36,39,42,46,47,66,67,76,107,127,144,145],$VT1=[5,18,26,29,33,34,36,39,42,46,47,49,50,51,52,53,54,61,66,67,76,98,104,107,127,137,138,139,140,141,142,143,144,145],$VU1=[5,18,26,29,33,34,36,39,42,46,47,49,50,51,52,53,54,61,66,67,76,104,107,127,137,138,139,140,141,142,143,144,145],$VV1=[5,18,26,29,33,36,39,42,46,47,49,50,51,52,53,54,66,67,76,107,127,140,141,142,143,144,145],$VW1=[20,24,33,34,36,39,95,97,98,99,100,101,102,103,104,105,108,109,110,111,112,114,115,116],$VX1=[1,303],$VY1=[1,333],$VZ1=[1,364];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FLWOR":6,"FOR":7,"L_LET":8,"IF":9,"LLAMADA_FUNCION":10,"FUNCIONES":11,"FUNCION":12,"LET":13,"FOR_1":14,"FOR_2":15,"L_CONDICION":16,"RETURN":17,"for":18,"dolar":19,"id":20,"in":21,"at":22,"FOR_P":23,"par_izq":24,"L_PARAM":25,"par_der":26,"integer":27,"to":28,"coma":29,"CONDICION":30,"WHERE":31,"ORDER":32,"where":33,"diagonal":34,"EXPR":35,"order":36,"by":37,"L_VALOR":38,"return":39,"VALOR":40,"arroba":41,"if":42,"THEN":43,"ELSE":44,"ELSE_IF":45,"else":46,"then":47,"COMPARACION_XQUERY":48,"eq":49,"ne":50,"lt":51,"le":52,"gt":53,"ge":54,"number":55,"VALORES":56,"tk_string":57,"substring":58,"VALOR_LLAMADA":59,"lower":60,"menos":61,"case":62,"upper":63,"doble_pto":64,"string":65,"let":66,"igual":67,"declare":68,"function":69,"PARAMETROS":70,"as":71,"xs":72,"TIPO":73,"llave_izq":74,"SENTENCIAS":75,"llave_der":76,"pto_coma":77,"PARAM":78,"INSTRUCCION":79,"o":80,"RUTA":81,"FILTROS":82,"ATRIBUTO_DESCENDIENTES":83,"DESCENDIENTES_NODO":84,"DESCENDIENTE":85,"PADRE":86,"ATRIBUTO_NODO":87,"HIJOS":88,"RAIZ":89,"NODO_ACTUAL":90,"PADRE_NODO":91,"ANY":92,"EJES":93,"OPC_EJES":94,"diagonal_diagonal_arroba_ast":95,"OPC":96,"diagonal_diagonal_ast":97,"doble_diagonal":98,"diagonal_dos_pts":99,"diagonal_arroba_ast":100,"diagonal_ast":101,"punto":102,"dos_pts":103,"mul":104,"ancestor":105,"bi_pto":106,"or":107,"self":108,"attribute":109,"child":110,"descendant":111,"following":112,"sibling":113,"namespace":114,"parent":115,"preceding":116,"NODO_FUNCION":117,"node":118,"text":119,"PASOS":120,"ANY_ATRIBUTO":121,"ATRIBUTO":122,"any_atributo":123,"LISTA_PREDICADO":124,"PREDICADO":125,"cor_izq":126,"cor_der":127,"ATRIBUTO_PREDICADO":128,"ARITMETICAS":129,"RELACIONALES":130,"LOGICAS":131,"ORDEN":132,"PATH":133,"OPC_PATH":134,"last":135,"position":136,"mas":137,"div":138,"mod":139,"mayor":140,"menor":141,"mayor_igual":142,"menor_igual":143,"diferencia":144,"and":145,"double":146,"true":147,"false":148,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"for",19:"dolar",20:"id",21:"in",22:"at",24:"par_izq",26:"par_der",27:"integer",28:"to",29:"coma",33:"where",34:"diagonal",36:"order",37:"by",39:"return",41:"arroba",42:"if",46:"else",47:"then",49:"eq",50:"ne",51:"lt",52:"le",53:"gt",54:"ge",55:"number",57:"tk_string",58:"substring",60:"lower",61:"menos",62:"case",63:"upper",64:"doble_pto",65:"string",66:"let",67:"igual",68:"declare",69:"function",71:"as",72:"xs",74:"llave_izq",76:"llave_der",77:"pto_coma",80:"o",95:"diagonal_diagonal_arroba_ast",97:"diagonal_diagonal_ast",98:"doble_diagonal",99:"diagonal_dos_pts",100:"diagonal_arroba_ast",101:"diagonal_ast",102:"punto",103:"dos_pts",104:"mul",105:"ancestor",106:"bi_pto",107:"or",108:"self",109:"attribute",110:"child",111:"descendant",112:"following",113:"sibling",114:"namespace",115:"parent",116:"preceding",118:"node",119:"text",123:"any_atributo",126:"cor_izq",127:"cor_der",135:"last",136:"position",137:"mas",138:"div",139:"mod",140:"mayor",141:"menor",142:"mayor_igual",143:"menor_igual",144:"diferencia",145:"and",146:"double",147:"true",148:"false"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[11,2],[11,1],[8,2],[8,1],[7,4],[7,4],[7,3],[14,4],[14,7],[23,6],[15,0],[15,1],[15,5],[15,5],[16,2],[16,1],[30,1],[30,1],[31,5],[32,3],[32,4],[17,2],[17,3],[17,2],[38,3],[38,1],[40,4],[40,5],[40,3],[9,9],[9,10],[9,4],[9,5],[45,4],[43,2],[44,2],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[10,4],[10,4],[10,4],[10,6],[10,8],[10,6],[10,6],[10,6],[59,2],[59,1],[59,1],[25,3],[25,1],[13,7],[13,6],[12,16],[12,11],[75,1],[75,2],[75,2],[75,3],[75,3],[70,3],[70,1],[78,6],[73,1],[4,2],[4,1],[79,4],[79,2],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,2],[83,2],[84,2],[85,2],[86,2],[87,2],[88,2],[89,2],[90,1],[91,1],[92,1],[93,2],[93,6],[93,2],[93,2],[93,2],[93,5],[93,2],[93,4],[93,2],[93,2],[93,2],[93,4],[93,2],[94,1],[94,1],[94,1],[117,1],[117,1],[96,0],[96,1],[96,1],[120,1],[120,1],[121,1],[122,2],[82,0],[82,1],[124,2],[124,1],[125,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,2],[35,1],[35,1],[35,1],[35,3],[35,1],[35,1],[133,3],[133,3],[133,3],[133,3],[133,2],[133,1],[134,1],[134,2],[132,3],[132,3],[129,3],[129,3],[129,3],[129,3],[129,3],[130,3],[130,3],[130,3],[130,3],[130,3],[130,3],[131,3],[131,3],[128,2],[128,1],[128,2],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'XQUERY', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 return new NodoAST({label: 'XQUERY', hijos: [...$$[$0-1].hijos], linea: yylineno}); 
break;
case 3: case 4: case 5: case 6:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 7: case 8:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 9:
 this.$ = new NodoAST({label: 'FUNCION', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 10:
 this.$ = new NodoAST({label: 'FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 11:
 this.$ = new NodoAST({label: 'LET', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 12:
 this.$ = new NodoAST({label: 'LET', hijos: [$$[$0]], linea: yylineno});
break;
case 13:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 14:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 15:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 16:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 17:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-3],($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 18:
 this.$ = new NodoAST({label: 'FOR_P', hijos: [($$[$0-5]+$$[$0-4]),...$$[$0-1].hijos], linea: yylineno}); 
break;
case 19:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [], linea: yylineno}); 
break;
case 20:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0]], linea: yylineno}); 
break;
case 21:
 this.$ = new NodoAST({label: 'FOR', hijos: [$$[$0-3],$$[$0-2],$$[$0-1]], linea: yylineno}); 
break;
case 22:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0-3],$$[$0]], linea: yylineno}); 
break;
case 23:
 this.$ = new NodoAST({label: 'LCONDICION', hijos: [...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'L_CONDICION', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'WHERE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 26:
 this.$ = new NodoAST({label: 'ORDER', hijos: [$$[$0]], linea: yylineno}); 
break;
case 27:
 this.$ = new NodoAST({label: 'WHERE', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 28:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 29:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 30:
 this.$ = new NodoAST({label: 'RETURN', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 31:
 this.$ = new NodoAST({label: 'RETURN', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 32:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 33:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 34:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 35:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 36:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 37:
 this.$ = new NodoAST({label: 'VALOR', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 38:
 this.$ = new NodoAST({label: 'IF', hijos: [($$[$0-6]+$$[$0-5]),$$[$0-4],...$$[$0-3].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 39:
 this.$ = new NodoAST({label: 'IF', hijos: [($$[$0-7]+$$[$0-6]),$$[$0-5],...$$[$0-4].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 40:
 this.$ = new NodoAST({label: 'IF', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 41:
 this.$ = new NodoAST({label: 'IF', hijos: [...$$[$0-3].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 42:
 this.$ = new NodoAST({label: 'ELSE_IF', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 43:
 this.$ = new NodoAST({label: 'THEN', hijos: [...$$[$0].hijos,], linea: yylineno}); 
break;
case 44:
 this.$ = new NodoAST({label: 'ELSE', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 45:
 this.$ = new NodoAST({label: 'eq', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 46:
 this.$ = new NodoAST({label: 'ne', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 47:
 this.$ = new NodoAST({label: 'lt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 48:
 this.$ = new NodoAST({label: 'le', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 49:
 this.$ = new NodoAST({label: 'gt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 50:
 this.$ = new NodoAST({label: 'ge', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 51:
 this.$ = new NodoAST({label: 'to', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 52:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 53:
 this.$ = new NodoAST({label: 'F_NUMBER', hijos: [$$[$0-3],...$$[$0-1].hijos], linea: yylineno}); 
break;
case 54:
 this.$ = new NodoAST({label: 'F_STRING', hijos: [$$[$0-3],...$$[$0-1].hijos], linea: yylineno}); 
break;
case 55:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [...$$[$0-3].hijos,$$[$0-1]], linea: yylineno}); 
break;
case 56:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [...$$[$0-5].hijos,$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 57:
 this.$ = new NodoAST({label: 'F_LOWERCASE', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 58:
 this.$ = new NodoAST({label: 'F_UPPERCASE', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 59:
 this.$ = new NodoAST({label: 'F_LLAMADA', hijos: [$$[$0-5],$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 60:
 this.$ = new NodoAST({label: 'dolar id', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 61: case 175:
 this.$ = new NodoAST({label: 'string', hijos: [$$[$0]], linea: yylineno}); 
break;
case 62: case 176:
 this.$ = new NodoAST({label: 'id', hijos: [$$[$0]], linea: yylineno}); 
break;
case 63: case 74:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 64: case 75:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 65:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 66:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 67:
 this.$ = new NodoAST({label: 'FUNCION', hijos: [$$[$0-13],$$[$0-11],$$[$0-9],$$[$0-4],$$[$0-2]], linea: yylineno}); 
break;
case 69:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 70: case 71:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 72: case 73:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 76:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],...$$[$0].hijos], linea: yylineno}); 
break;
case 77:

             if ($$[$0] == 'string'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
             else if ($$[$0] == 'boolean'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
            else if ($$[$0] == 'integer'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
            else if ($$[$0] == 'double'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
            else{
                 tablaErrores.Errores.getInstance().push(new errorGram.Error({ tipo: 'Semántico', linea: `${yylineno + 1}`, descripcion: `No es un tipo valido "${$$[$0]}"  Columna: ${this._$.first_column + 1}.`}));
             }
        
break;
case 78:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 79:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 80:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-3].hijos, $$[$0-2], ...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 81:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 93:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'ATRIBUTO_DESCENDIENTES', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 95: case 96:
 this.$ = new NodoAST({label: 'DESCENDIENTES_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 97:
 this.$ = new NodoAST({label: 'PADRE', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 98:
 this.$ = new NodoAST({label: 'ATRIBUTO_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 99:
 this.$ = new NodoAST({label: 'HIJOS', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 100:
 this.$ = new NodoAST({label: 'RAIZ', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 101:
 this.$ = new NodoAST({label: 'NODO_ACTUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 102:
 this.$ = new NodoAST({label: 'PADRE_NODO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 103:
 this.$ = new NodoAST({label: 'ANY', hijos: [$$[$0]], linea: yylineno}); 
break;
case 104: case 106: case 107: case 108: case 110: case 112: case 113: case 114: case 116:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 105:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-5], $$[$0-4]], linea: yylineno}); 
break;
case 109:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-4], $$[$0-3]], linea: yylineno}); 
break;
case 111: case 115:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-3], $$[$0-2]], linea: yylineno}); 
break;
case 117: case 118: case 119:
 this.$ = new NodoAST({label: 'OPC_EJES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 120: case 121:
 this.$ = new NodoAST({label: 'NODO_FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 122:
 this.$ = new NodoAST({label: 'OPC', hijos: [], linea: yylineno}); 
break;
case 123: case 124:
 this.$ = new NodoAST({label: 'OPC', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 125: case 126:
 this.$ = new NodoAST({label: 'PASOS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 127:
 this.$ = new NodoAST({label: 'ANY_ATRIBUTO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 128:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 129:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [], linea: yylineno}); 
break;
case 130:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 131:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 132:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 133:
 this.$ = new NodoAST({label: 'PREDICADO', hijos: [$$[$0-2], ...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 134: case 135: case 136: case 137: case 138: case 139: case 141: case 142: case 143: case 145: case 146:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 140:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 144:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 147: case 148:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 149: case 150:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0-2],...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 151:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-1].hijos,$$[$0],$$[$01]], linea: yylineno}); 
break;
case 152:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 153:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 154:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 155: case 156:
 this.$ = new NodoAST({label: 'ORDEN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 157: case 158: case 159: case 160: case 161:
 this.$ = new NodoAST({label: 'ARITMETICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 162: case 163: case 164: case 165: case 166: case 167:
 this.$ = new NodoAST({label: 'RELACIONALES', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 168: case 169:
 this.$ = new NodoAST({label: 'LOGICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 170:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 171:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 172:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 173:
 this.$ = new NodoAST({label: 'integer', hijos: [$$[$0]], linea: yylineno}); 
break;
case 174:
 this.$ = new NodoAST({label: 'double', hijos: [$$[$0]], linea: yylineno}); 
break;
case 177:
 this.$ = new NodoAST({label: 'punto', hijos: [$$[$0]], linea: yylineno}); 
break;
case 178:
 this.$ = new NodoAST({label: 'dos_pts', hijos: [$$[$0]], linea: yylineno}); 
break;
case 179: case 180:
 this.$ = new NodoAST({label: 'boolean', hijos: [$$[$0]], linea: yylineno}); 
break;
case 181:
 this.$ = new NodoAST({label: 'xquery', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:20,13:12,14:11,18:$V0,20:[1,14],34:$V1,42:$V2,55:$V3,57:$V4,58:$V5,60:$V6,63:$V7,66:$V8,68:$V9,79:4,81:10,83:21,84:22,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,95:$Va,97:$Vb,98:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr},{1:[3]},{5:[1,54],20:$Vs,34:$V1,79:55,81:10,83:21,84:22,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,95:$Va,97:$Vb,98:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr},{5:[1,57]},o($Vt,[2,79],{80:$Vu}),o($Vv,[2,3]),{5:$Vw,13:59,66:$V8},o($Vv,[2,5]),o($Vv,[2,6]),{7:60,10:61,12:62,14:11,18:$V0,20:$Vx,55:$V3,57:$V4,58:$V5,60:$V6,63:$V7,68:$V9},o($Vy,$Vz,{82:64,124:65,125:66,126:$VA}),o($VB,[2,19],{79:4,81:10,83:21,84:22,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,15:68,4:69,20:$Vs,24:[1,70],34:$V1,95:$Va,97:$Vb,98:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr}),o($VC,[2,12]),{10:84,19:$VD,20:$VE,24:[1,71],27:$VF,34:$VG,35:72,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o([5,20,34,80,95,97,98,99,100,101,102,103,104,105,108,109,110,111,112,114,115,116,126],$VV,{24:$VW,64:$VX}),{24:[1,105]},{24:[1,106]},{24:[1,107]},{61:[1,108]},{61:[1,109]},o($VY,[2,10]),o($VZ,[2,82]),o($VZ,[2,83]),o($VZ,[2,84]),o($VZ,[2,85]),o($VZ,[2,86]),o($VZ,[2,87]),o($VZ,[2,88]),o($VZ,[2,89]),o($VZ,[2,90]),o($VZ,[2,91]),{20:$V_,94:110,104:$V$,117:113,118:$VN,119:$VO},{19:[1,114]},{19:[1,115]},{69:[1,116]},o($VZ,$V01,{96:117,117:118,120:119,121:120,122:121,41:$V11,118:$VN,119:$VO,123:$V21}),o($VZ,$V01,{117:118,120:119,121:120,122:121,96:124,41:$V11,118:$VN,119:$VO,123:$V21}),o($VZ,$V01,{117:118,120:119,121:120,122:121,96:125,41:$V11,118:$VN,119:$VO,123:$V21}),o($VZ,$V01,{117:118,120:119,121:120,122:121,96:126,41:$V11,118:$VN,119:$VO,123:$V21}),o($VZ,$V01,{117:118,120:119,121:120,122:121,96:127,41:$V11,118:$VN,119:$VO,123:$V21}),o($VZ,$V01,{117:118,120:119,121:120,122:121,96:128,41:$V11,118:$VN,119:$VO,123:$V21}),o($VZ,$V01,{117:118,120:119,121:120,122:121,96:129,41:$V11,118:$VN,119:$VO,123:$V21}),o($VZ,[2,101]),o($VZ,[2,102]),o($VZ,[2,103]),{61:[1,131],106:[1,130]},{106:[1,132]},{106:[1,133]},{61:[1,135],106:[1,134]},{61:[1,137],106:[1,136]},{106:[1,138]},{106:[1,139]},{61:[1,141],106:[1,140]},{106:[1,142]},{1:[2,1]},o($Vt,[2,78],{80:$Vu}),o($VZ,$VV),{1:[2,2]},{20:$Vs,34:$V1,81:143,83:21,84:22,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,95:$Va,97:$Vb,98:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr},o($VC,[2,11]),o($Vv,[2,7]),o($Vv,[2,8]),o($VY,[2,9]),{24:$VW,64:$VX},o($Vy,[2,81]),o($Vy,[2,130],{125:144,126:$VA}),o($VZ,[2,132]),{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:145,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{16:147,17:148,30:149,31:151,32:152,33:$V41,36:$V51,39:$V61},o($VB,[2,20],{81:10,83:21,84:22,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,79:55,20:$Vs,34:$V1,95:$Va,97:$Vb,98:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr}),{10:84,19:$VD,20:$VE,24:$V31,25:156,27:[1,155],34:$VG,35:157,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:[1,158],20:$VE,24:$V31,27:$VF,34:$VG,35:159,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{28:$V71,34:$V81,43:160,47:$V91,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1},o($Vv1,[2,134]),o($Vv1,[2,135]),o($Vv1,[2,136]),o($Vv1,[2,137]),o($Vv1,[2,138]),o($Vv1,[2,139]),{20:$V_,94:185,104:$V$,117:113,118:$VN,119:$VO},o($Vv1,[2,141]),o($Vv1,[2,142]),o($Vv1,[2,143]),o($Vv1,[2,145]),o($Vv1,[2,146]),o($Vv1,$V01,{117:118,120:119,121:120,122:121,96:186,20:[1,187],41:$V11,118:$VN,119:$VO,123:$V21}),o($Vv1,[2,171]),{24:[1,188]},{24:[1,189]},o($Vv1,$Vw1),o($Vv1,[2,174]),o($Vv1,[2,175]),o($Vv1,$Vx1,{24:$VW,64:$VX}),o($Vv1,[2,177]),o($Vv1,[2,178]),o($Vv1,[2,179]),o($Vv1,[2,180]),{4:190,20:$Vs,34:$V1,79:4,81:10,83:21,84:22,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,95:$Va,97:$Vb,98:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr},{20:$Vy1,41:$Vz1,134:191},{20:$Vy1,41:$Vz1,134:194},o($Vv1,[2,152]),o($VZ,[2,120]),o($VZ,[2,121]),{10:84,19:$VD,20:$VE,24:$V31,25:195,27:$VF,34:$VG,35:157,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{20:[1,196]},{19:$VD,20:$VA1,27:$VF,56:197,65:$VI,102:$VL,103:$VM,146:$VS,147:$VT,148:$VU},{19:$VD,20:$VA1,27:$VF,56:199,65:$VI,102:$VL,103:$VM,146:$VS,147:$VT,148:$VU},{19:$VB1,20:$VC1,59:200,65:$VD1},{62:[1,204]},{62:[1,205]},o($VZ,[2,93]),o($VZ,[2,117]),o($VZ,[2,118]),o($VZ,[2,119]),{20:[1,206]},{20:[1,207]},{20:[1,208]},o($VZ,[2,94]),o($VZ,[2,123]),o($VZ,[2,124]),o($VZ,[2,125]),o($VZ,[2,126]),o($VZ,[2,127]),{20:[1,209]},o($VZ,[2,95]),o($VZ,[2,96]),o($VZ,[2,97]),o($VZ,[2,98]),o($VZ,[2,99]),o($VZ,[2,100]),o($VE1,[2,104]),{107:[1,210]},o($VE1,[2,106]),o($VE1,[2,107]),o($VE1,[2,108]),{107:[1,211]},o($VE1,[2,110]),{113:[1,212]},o($VE1,[2,112]),o($VE1,[2,113]),o($VE1,[2,114]),{113:[1,213]},o($VE1,[2,116]),o($Vy,$Vz,{124:65,125:66,82:214,126:$VA}),o($VZ,[2,131]),{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,127:[1,215],137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:159,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{17:216,30:217,31:151,32:152,33:$V41,36:$V51,39:$V61},o($VF1,[2,15],{9:218,42:$V2}),o($VB,[2,24]),{9:221,19:[1,220],24:$VG1,38:219,40:222,42:$V2},o($VB,[2,25]),o($VB,[2,26]),{19:[1,224]},{37:[1,225]},o([26,28,29,34,49,50,51,52,53,54,61,67,98,99,104,107,137,138,139,140,141,142,143,144,145],$Vw1),{26:[1,227],29:$VH1},o($VI1,[2,64],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1}),{4:190,20:[1,229],34:$V1,79:4,81:10,83:21,84:22,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,95:$Va,97:$Vb,98:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr},{26:[1,230],28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1},{44:231,45:232,46:$VJ1},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:234,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:235,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:236,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:237,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:238,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:239,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:240,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:241,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:242,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:243,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:244,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:245,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:246,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:247,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:248,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o($Vv1,[2,151]),{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:249,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:250,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:251,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:252,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:253,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:254,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:255,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:256,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o($Vv1,[2,140]),o($Vv1,[2,170]),o($Vv1,[2,172]),{26:[1,257]},{26:[1,258]},o($Vv1,[2,181],{81:10,83:21,84:22,85:23,86:24,87:25,88:26,89:27,90:28,91:29,92:30,93:31,79:55,20:$Vs,95:$Va,97:$Vb,100:$Ve,101:$Vf,102:$Vg,103:$Vh,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr}),{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:259,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o($VK1,[2,153]),{20:[1,260]},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:261,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{26:[1,262],29:$VH1},{24:[1,263]},{26:[1,264]},{26:$Vx1},{26:[1,265]},{29:[1,266]},{20:[1,267]},o($VI1,[2,61]),o($VI1,[2,62]),{24:[1,268]},{24:[1,269]},{21:[1,270],22:[1,271]},{64:[1,272]},{64:[1,273]},o($VZ,[2,128]),{61:[1,274]},{108:[1,275]},{106:[1,276]},{106:[1,277]},o($Vy,[2,80]),o($VZ,[2,133]),o($VF1,[2,13]),o($VB,[2,23]),o($VF1,[2,14]),o($VL1,[2,30],{29:$VM1}),{20:[1,279]},o($VL1,[2,32]),o($VN1,[2,34]),{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:280,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{20:[1,281]},{19:[1,283],24:$VG1,38:282,40:222},{27:[1,284]},{29:[1,285]},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:286,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o([20,26,28,34,49,50,51,52,53,54,61,67,80,95,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,114,115,116,126,137,138,139,140,141,142,143,144,145],$VV),o($Vv1,[2,144]),o($VL1,[2,40]),{44:288,46:$VO1},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:290,41:$VH,42:[1,291],48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o($VP1,[2,157],{28:$V71,34:$V81,98:$Vi1,99:$Vj1,104:$Vk1,138:$Vn1,139:$Vo1}),o($VP1,[2,158],{28:$V71,34:$V81,98:$Vi1,99:$Vj1,104:$Vk1,138:$Vn1,139:$Vo1}),o($VQ1,[2,159],{28:$V71,34:$V81,98:$Vi1,99:$Vj1}),o($VQ1,[2,160],{28:$V71,34:$V81,98:$Vi1,99:$Vj1}),o($VQ1,[2,161],{28:$V71,34:$V81,98:$Vi1,99:$Vj1}),o($VR1,[2,162],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1}),o($VR1,[2,163],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1}),o($VR1,[2,164],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1}),o($VR1,[2,165],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1}),o($VS1,[2,166],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1}),o($VS1,[2,167],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1}),o([5,18,26,29,33,36,39,42,46,47,66,76,107,127],[2,168],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1}),o([5,18,26,29,33,36,39,42,46,47,66,76,107,127,145],[2,169],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1}),o($VT1,[2,147],{28:$V71,99:$Vj1}),o($VU1,[2,148],{28:$V71,98:$Vi1,99:$Vj1}),o($VV1,[2,45],{28:$V71,34:$V81,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1}),o($VV1,[2,46],{28:$V71,34:$V81,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1}),o($VV1,[2,47],{28:$V71,34:$V81,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1}),o($VV1,[2,48],{28:$V71,34:$V81,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1}),o($VV1,[2,49],{28:$V71,34:$V81,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1}),o($VV1,[2,50],{28:$V71,34:$V81,61:$Vg1,98:$Vi1,99:$Vj1,104:$Vk1,137:$Vm1,138:$Vn1,139:$Vo1}),o($Vv1,[2,51]),{28:$V71,34:$V81,46:[2,43],49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1},o($Vv1,[2,155]),o($Vv1,[2,156]),o($VT1,[2,149],{28:$V71,99:$Vj1}),o($VK1,[2,154]),o($VU1,[2,150],{28:$V71,98:$Vi1,99:$Vj1}),o($Vv1,[2,52]),{10:84,19:$VD,20:$VE,24:$V31,25:292,27:$VF,34:$VG,35:157,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o($Vv1,[2,53]),o($Vv1,[2,54]),{27:[1,293]},o($VI1,[2,60]),{19:$VB1,20:$VC1,59:294,65:$VD1},{19:$VB1,20:$VC1,59:295,65:$VD1},o($VW1,[2,16]),{19:[1,296]},{67:[1,297]},{20:[1,298]},{108:[1,299]},{106:[1,300]},o($VE1,[2,111]),o($VE1,[2,115]),{19:[1,302],24:$VG1,40:301},o($VL1,[2,31],{34:$VX1}),{26:[1,304],28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1},{34:[1,305]},o($VB,[2,28],{29:$VM1}),{20:[1,306]},{26:[1,307]},{19:[1,309],23:308},o($VI1,[2,63],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1}),{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:310,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o($VL1,[2,41]),{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:290,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o($VL1,[2,44],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1}),{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:311,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{26:[1,312],29:$VH1},{26:[1,313],29:[1,314]},{26:[1,315]},{26:[1,316]},{20:[1,317]},{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:318,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},{24:[1,319]},{106:[1,320]},o($VE1,[2,109]),o($VN1,[2,33]),{20:[1,321]},{20:[1,322],41:[1,323]},o($VN1,[2,37]),{10:84,19:$VD,20:$VE,24:$V31,27:$VF,34:$VG,35:324,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o($VB,[2,29],{34:$VX1}),o($VB,[2,21]),o($VB,[2,22]),{20:[1,325]},{26:[1,326],28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1},{28:$V71,34:$V81,43:327,47:$V91,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1},o($Vv1,[2,59]),o($Vv1,[2,55]),{27:[1,328]},o($Vv1,[2,57]),o($Vv1,[2,58]),{21:[1,329]},o($VC,[2,66],{17:330,28:$V71,34:$V81,39:$V61,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1}),{19:$VY1,70:331,78:332},o($VE1,[2,105]),{34:$VX1},o($VN1,[2,35]),{20:[1,334]},o($VB,[2,27],{28:$V71,34:$V81,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1,54:$Vf1,61:$Vg1,67:$Vh1,98:$Vi1,99:$Vj1,104:$Vk1,107:$Vl1,137:$Vm1,138:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1}),{21:[1,335]},{43:336,47:$V91},{46:[2,42]},{26:[1,337]},o($VW1,[2,17]),o($VC,[2,65]),{26:[1,338],29:[1,339]},o($VI1,[2,75]),{20:[1,340]},o($VN1,[2,36]),{24:[1,341]},{44:342,45:343,46:$VJ1},o($Vv1,[2,56]),{6:346,7:5,8:347,9:7,10:8,11:9,12:20,13:12,14:11,18:$V0,20:$Vx,42:$V2,55:$V3,57:$V4,58:$V5,60:$V6,63:$V7,66:$V8,68:$V9,71:[1,344],75:345},{19:$VY1,78:348},{71:[1,349]},{10:84,19:$VD,20:$VE,24:$V31,25:350,27:$VF,34:$VG,35:157,41:$VH,48:83,55:$V3,56:78,57:$V4,58:$V5,60:$V6,63:$V7,65:$VI,93:79,98:$VJ,99:$VK,102:$VL,103:$VM,105:$Vj,108:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,114:$Vp,115:$Vq,116:$Vr,117:82,118:$VN,119:$VO,123:$VP,125:81,126:$VA,128:73,129:74,130:75,131:76,132:77,133:80,135:$VQ,136:$VR,146:$VS,147:$VT,148:$VU},o($VL1,[2,38]),{44:351,46:$VO1},{72:[1,352]},{76:[1,353]},{76:[2,69]},{7:355,9:354,13:59,14:11,18:$V0,42:$V2,66:$V8,76:$Vw},o($VI1,[2,74]),{72:[1,356]},{26:[1,357],29:$VH1},o($VL1,[2,39]),{64:[1,358]},{77:[1,359]},{17:360,39:$V61,76:[2,70]},{17:361,39:$V61,76:[2,71]},{64:[1,362]},o($VB,[2,18]),{20:$VZ1,73:363},o($VY,[2,68]),{76:[2,72]},{76:[2,73]},{20:$VZ1,73:365},{74:[1,366]},o([26,29,74],[2,77]),o($VI1,[2,76]),{6:346,7:5,8:347,9:7,10:8,11:9,12:20,13:12,14:11,18:$V0,20:$Vx,42:$V2,55:$V3,57:$V4,58:$V5,60:$V6,63:$V7,66:$V8,68:$V9,75:367},{76:[1,368]},{77:[1,369]},o($VY,[2,67])],
defaultActions: {54:[2,1],57:[2,2],198:[2,176],327:[2,42],346:[2,69],360:[2,72],361:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores"); 
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 18;
break;
case 2:return 33;
break;
case 3:return 36;
break;
case 4:return 39;
break;
case 5:return  'if';
break;
case 6:return 21;
break;
case 7:return 37;
break;
case 8:return 66;
break;
case 9:return 'data';
break;
case 10:return 47;
break;
case 11:return 46;
break;
case 12:return 49;
break;
case 13:return 50;
break;
case 14:return 51;
break;
case 15:return 52;
break;
case 16:return 53;
break;
case 17:return 54;
break;
case 18:return 28;
break;
case 19:return 22;
break;
case 20:return 66;
break;
case 21:return 68;
break;
case 22:return 71;
break;
case 23:return 69;
break;
case 24:return 147;
break;
case 25:return 148;
break;
case 26:return 55;
break;
case 27:return 58;
break;
case 28:return 63;
break;
case 29:return 62;
break;
case 30:return 60;
break;
case 31:return 72;
break;
case 32:return 135;
break;
case 33:return 136;
break;
case 34:return 118;
break;
case 35:return 119;
break;
case 36:return 'comment';
break;
case 37:return 105;
break;
case 38:return 109;
break;
case 39:return 110;
break;
case 40:return 111;
break;
case 41:return 112;
break;
case 42:return 114;
break;
case 43:return 115;
break;
case 44:return 116;
break;
case 45:return 113;
break;
case 46:return 108;
break;
case 47:return 80;
break;
case 48:return 137;
break;
case 49:return 61;
break;
case 50:return 104;
break;
case 51:return 67;
break;
case 52:return 144;
break;
case 53:return 143;
break;
case 54:return 142;
break;
case 55:return 141;
break;
case 56:return 140;
break;
case 57:return 19;
break;
case 58:return 29;
break;
case 59:return 77;
break;
case 60:return 126;
break;
case 61:return 127;
break;
case 62:return 24;
break;
case 63:return 26;
break;
case 64:return 74;
break;
case 65:return 76;
break;
case 66:return 146;
break;
case 67:return 27;
break;
case 68:return 65;
break;
case 69:return 65;
break;
case 70:return 139;
break;
case 71:return 138;
break;
case 72:return 145;
break;
case 73:return 107;
break;
case 74:return 20;
break;
case 75:return 103;
break;
case 76:return 95;
break;
case 77:return 97;
break;
case 78:return 98;
break;
case 79:return 99;
break;
case 80:return 100;
break;
case 81:return 101;
break;
case 82:return 34;
break;
case 83:return 102;
break;
case 84:return 106;
break;
case 85:return 64;
break;
case 86:return 123;
break;
case 87:return 41;    
break;
case 88:
  const er = new errorGram.Error({ tipo: 'léxico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es válido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 89:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:for\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:by\b)/,/^(?:let\b)/,/^(?:data\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:let\b)/,/^(?:declare\b)/,/^(?:as\b)/,/^(?:function\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:number\b)/,/^(?:substring\b)/,/^(?:upper\b)/,/^(?:case\b)/,/^(?:lower\b)/,/^(?:xs\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\$)/,/^(?:,)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:["m"]["o"]["d"])/,/^(?:["d"]["i"]["v"])/,/^(?:["a"]["n"]["d"])/,/^(?:["o"]["r"])/,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9_]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?::)/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_XQUERY;
exports.Parser = gramatica_XQUERY.Parser;
exports.parse = function () { return gramatica_XQUERY.parse.apply(gramatica_XQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}