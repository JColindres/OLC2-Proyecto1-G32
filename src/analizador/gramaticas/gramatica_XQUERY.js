/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_XQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,34],$V1=[1,41],$V2=[1,13],$V3=[1,47],$V4=[1,16],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,14],$Vb=[1,15],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,53],$Vn=[1,46],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,56],$Vu=[5,19,25,27,28,32,33,35,38,41,42,44,46,47,51,53,54,55,56,57,58,65,71,99,101,102,103,104,105,106,107,108,109,111,112,113,114,115,117,118,119,130,140,141,142,143,144,145,146],$Vv=[1,58],$Vw=[5,44],$Vx=[5,19,25,27,28,32,33,35,38,41,42,44,46,47,51,53,54,55,56,57,58,65,71,84,99,101,102,103,104,105,106,107,108,109,111,112,113,114,115,117,118,119,130,140,141,142,143,144,145,146],$Vy=[2,126],$Vz=[1,62],$VA=[32,35,38],$VB=[2,89],$VC=[1,71],$VD=[1,72],$VE=[5,19,25,27,28,32,33,35,38,41,42,44,46,47,51,53,54,55,56,57,58,65,71,84,99,101,102,103,104,105,106,107,108,109,111,112,113,114,115,117,118,119,129,130,140,141,142,143,144,145,146],$VF=[1,79],$VG=[1,80],$VH=[1,82],$VI=[1,83],$VJ=[2,119],$VK=[1,91],$VL=[1,90],$VM=[1,139],$VN=[1,134],$VO=[1,124],$VP=[1,131],$VQ=[1,141],$VR=[1,127],$VS=[1,133],$VT=[1,140],$VU=[1,142],$VV=[1,135],$VW=[1,136],$VX=[1,128],$VY=[1,129],$VZ=[1,130],$V_=[1,132],$V$=[1,137],$V01=[1,138],$V11=[1,149],$V21=[1,150],$V31=[1,146],$V41=[1,154],$V51=[1,165],$V61=[1,167],$V71=[1,166],$V81=[19,108,121,122],$V91=[1,200],$Va1=[1,192],$Vb1=[1,184],$Vc1=[1,183],$Vd1=[1,194],$Ve1=[1,195],$Vf1=[1,196],$Vg1=[1,197],$Vh1=[1,198],$Vi1=[1,199],$Vj1=[1,179],$Vk1=[1,187],$Vl1=[1,191],$Vm1=[1,193],$Vn1=[1,180],$Vo1=[1,189],$Vp1=[1,178],$Vq1=[1,181],$Vr1=[1,182],$Vs1=[1,185],$Vt1=[1,186],$Vu1=[1,188],$Vv1=[1,190],$Vw1=[5,25,27,32,33,35,38,41,42,44,47,51,53,54,55,56,57,58,65,71,102,103,108,111,130,140,141,142,143,144,145,146],$Vx1=[5,25,27,28,32,33,35,38,41,42,44,47,51,53,54,55,56,57,58,65,71,102,103,108,111,130,140,141,142,143,144,145,146],$Vy1=[2,170],$Vz1=[2,173],$VA1=[1,209],$VB1=[1,210],$VC1=[1,220],$VD1=[25,28],$VE1=[1,225],$VF1=[18,19,23,26,33,40,46,59,61,62,64,67,69,102,103,106,107,109,112,113,114,115,117,118,119,121,122,126,129,138,139,147,148,149],$VG1=[5,44,47],$VH1=[1,273],$VI1=[5,28,32,35,38,44,47],$VJ1=[19,23,32,33,35,38,46,99,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119],$VK1=[5,25,32,35,38,41,42,44,47,51,53,54,55,56,57,58,65,71,111,130,140,143,144,145,146],$VL1=[5,25,32,35,38,41,42,44,47,51,53,54,55,56,57,58,65,71,108,111,130,140,141,142,143,144,145,146],$VM1=[5,25,32,35,38,41,42,44,47,51,71,111,130,143,144,145,146],$VN1=[5,25,32,35,38,44,47,51,71,111,130,145,146],$VO1=[5,25,32,33,35,38,41,42,44,47,51,53,54,55,56,57,58,65,71,102,108,111,130,140,141,142,143,144,145,146],$VP1=[5,25,32,33,35,38,41,42,44,47,51,53,54,55,56,57,58,65,71,108,111,130,140,141,142,143,144,145,146],$VQ1=[5,25,32,35,38,41,42,44,47,51,53,54,55,56,57,58,71,111,130,143,144,145,146],$VR1=[1,298],$VS1=[1,331],$VT1=[5,44,47,51],$VU1=[1,381],$VV1=[1,382],$VW1=[1,383],$VX1=[1,384],$VY1=[25,28,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FLWOR":6,"FOR":7,"HTML":8,"LET":9,"FUNCION":10,"IF":11,"LLAMADA_FUNCION":12,"FOR_1":13,"FOR_2":14,"L_CONDICION":15,"RETURN":16,"for":17,"dolar":18,"id":19,"in":20,"at":21,"FOR_P":22,"par_izq":23,"L_PARAM":24,"par_der":25,"integer":26,"to":27,"coma":28,"CONDICION":29,"WHERE":30,"ORDER":31,"where":32,"diagonal":33,"EXPR":34,"order":35,"by":36,"L_VALOR":37,"return":38,"VALOR":39,"arroba":40,"menor":41,"mayor":42,"llave_izq":43,"llave_der":44,"data":45,"child":46,"if":47,"THEN":48,"ELSE":49,"then":50,"else":51,"COMPARACION_XQUERY":52,"eq":53,"ne":54,"lt":55,"le":56,"gt":57,"ge":58,"number":59,"VALORES":60,"tk_string":61,"substring":62,"VALOR_LLAMADA":63,"lower":64,"menos":65,"case":66,"upper":67,"doble_pto":68,"string":69,"let":70,"igual":71,"declare":72,"function":73,"PARAMETROS":74,"as":75,"xs":76,"TIPO":77,"pto_coma":78,"PARAM":79,"tk_double":80,"tk_integer":81,"tk_boolean":82,"INSTRUCCION":83,"o":84,"RUTA":85,"FILTROS":86,"ATRIBUTO_DESCENDIENTES":87,"DESCENDIENTES_NODO":88,"DESCENDIENTE":89,"PADRE":90,"ATRIBUTO_NODO":91,"HIJOS":92,"RAIZ":93,"NODO_ACTUAL":94,"PADRE_NODO":95,"ANY":96,"EJES":97,"OPC_EJES":98,"diagonal_diagonal_arroba_ast":99,"OPC":100,"diagonal_diagonal_ast":101,"doble_diagonal":102,"diagonal_dos_pts":103,"diagonal_arroba_ast":104,"diagonal_ast":105,"punto":106,"dos_pts":107,"mul":108,"ancestor":109,"bi_pto":110,"or":111,"self":112,"attribute":113,"descendant":114,"following":115,"sibling":116,"namespace":117,"parent":118,"preceding":119,"NODO_FUNCION":120,"node":121,"text":122,"PASOS":123,"ANY_ATRIBUTO":124,"ATRIBUTO":125,"any_atributo":126,"LISTA_PREDICADO":127,"PREDICADO":128,"cor_izq":129,"cor_der":130,"ATRIBUTO_PREDICADO":131,"ARITMETICAS":132,"RELACIONALES":133,"LOGICAS":134,"ORDEN":135,"PATH":136,"OPC_PATH":137,"last":138,"position":139,"mas":140,"div":141,"mod":142,"mayor_igual":143,"menor_igual":144,"diferencia":145,"and":146,"double":147,"true":148,"false":149,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"for",18:"dolar",19:"id",20:"in",21:"at",23:"par_izq",25:"par_der",26:"integer",27:"to",28:"coma",32:"where",33:"diagonal",35:"order",36:"by",38:"return",40:"arroba",41:"menor",42:"mayor",43:"llave_izq",44:"llave_der",45:"data",46:"child",47:"if",50:"then",51:"else",53:"eq",54:"ne",55:"lt",56:"le",57:"gt",58:"ge",59:"number",61:"tk_string",62:"substring",64:"lower",65:"menos",66:"case",67:"upper",68:"doble_pto",69:"string",70:"let",71:"igual",72:"declare",73:"function",75:"as",76:"xs",78:"pto_coma",80:"tk_double",81:"tk_integer",82:"tk_boolean",84:"o",99:"diagonal_diagonal_arroba_ast",101:"diagonal_diagonal_ast",102:"doble_diagonal",103:"diagonal_dos_pts",104:"diagonal_arroba_ast",105:"diagonal_ast",106:"punto",107:"dos_pts",108:"mul",109:"ancestor",110:"bi_pto",111:"or",112:"self",113:"attribute",114:"descendant",115:"following",116:"sibling",117:"namespace",118:"parent",119:"preceding",121:"node",122:"text",126:"any_atributo",129:"cor_izq",130:"cor_der",138:"last",139:"position",140:"mas",141:"div",142:"mod",143:"mayor_igual",144:"menor_igual",145:"diferencia",146:"and",147:"double",148:"true",149:"false"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,4],[7,3],[13,4],[13,7],[22,6],[14,0],[14,1],[14,5],[14,5],[15,2],[15,1],[29,1],[29,1],[30,5],[31,3],[31,4],[16,2],[16,3],[16,2],[16,2],[37,3],[37,1],[39,4],[39,5],[39,3],[8,10],[8,14],[8,16],[8,16],[8,11],[11,9],[48,2],[48,2],[49,2],[49,2],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[12,4],[12,4],[12,4],[12,6],[12,8],[12,6],[12,6],[12,6],[63,2],[63,1],[63,1],[24,3],[24,1],[9,7],[9,6],[10,16],[74,3],[74,1],[79,6],[77,1],[77,1],[77,1],[77,1],[4,2],[4,1],[83,4],[83,2],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,2],[87,2],[88,2],[89,2],[90,2],[91,2],[92,2],[93,2],[94,1],[95,1],[96,1],[97,2],[97,6],[97,2],[97,2],[97,2],[97,5],[97,2],[97,4],[97,2],[97,2],[97,2],[97,4],[97,2],[98,1],[98,1],[98,1],[120,1],[120,1],[100,0],[100,1],[100,1],[123,1],[123,1],[124,1],[125,2],[86,0],[86,1],[127,2],[127,1],[128,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,2],[34,1],[34,1],[34,1],[34,3],[34,1],[34,1],[136,3],[136,3],[136,3],[136,3],[136,2],[136,1],[137,1],[137,2],[135,3],[135,3],[132,3],[132,3],[132,3],[132,3],[132,3],[133,3],[133,3],[133,3],[133,3],[133,3],[133,3],[134,3],[134,3],[131,2],[131,1],[131,2],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'XQUERY', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 return new NodoAST({label: 'XQUERY', hijos: [...$$[$0-1].hijos], linea: yylineno}); 
break;
case 3: case 4: case 5: case 6: case 7: case 8:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 9:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 10:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 11:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 12:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 13:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-3],($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 14:
 this.$ = new NodoAST({label: 'FOR_P', hijos: [($$[$0-5]+$$[$0-4]),...$$[$0-1].hijos], linea: yylineno}); 
break;
case 15:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [], linea: yylineno}); 
break;
case 16:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0]], linea: yylineno}); 
break;
case 17:
 this.$ = new NodoAST({label: 'FOR', hijos: [$$[$0-3],$$[$0-2],$$[$0-1]], linea: yylineno}); 
break;
case 18:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0-3],$$[$0]], linea: yylineno}); 
break;
case 19:
 this.$ = new NodoAST({label: 'LCONDICION', hijos: [...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 20:
 this.$ = new NodoAST({label: 'L_CONDICION', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 21:
 this.$ = new NodoAST({label: 'WHERE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 22:
 this.$ = new NodoAST({label: 'ORDER', hijos: [$$[$0]], linea: yylineno}); 
break;
case 23:
 this.$ = new NodoAST({label: 'WHERE', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 26: case 28:
 this.$ = new NodoAST({label: 'RETURN', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 27:
 this.$ = new NodoAST({label: 'RETURN', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 29:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 30:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 31:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 32:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 33:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 34:
 this.$ = new NodoAST({label: 'VALOR', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 35:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-8],$$[$0-5],$$[$0-1]], linea: yylineno}); 
break;
case 36:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-12],$$[$0-9],$$[$0-6],$$[$0-1]], linea: yylineno}); 
break;
case 37: case 38:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-14],$$[$0-11],$$[$0-8],$$[$0-6],$$[$0-1]], linea: yylineno}); 
break;
case 39:
 this.$ = new NodoAST({label: 'HTML', hijos: [$$[$0-9],$$[$0-5],$$[$0-1]], linea: yylineno}); 
break;
case 40:
 this.$ = new NodoAST({label: 'IF', hijos: [($$[$0-6]+$$[$0-5]),$$[$0-4],...$$[$0-3].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 41:
 this.$ = new NodoAST({label: 'THEN', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 42:
 this.$ = new NodoAST({label: 'THEN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 43:
 this.$ = new NodoAST({label: 'ELSE', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 44:
 this.$ = new NodoAST({label: 'ELSE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 45:
 this.$ = new NodoAST({label: 'eq', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 46:
 this.$ = new NodoAST({label: 'ne', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 47:
 this.$ = new NodoAST({label: 'lt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 48:
 this.$ = new NodoAST({label: 'le', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 49:
 this.$ = new NodoAST({label: 'gt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 50:
 this.$ = new NodoAST({label: 'ge', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 51:
 this.$ = new NodoAST({label: 'to', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 52:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 53:
 this.$ = new NodoAST({label: 'F_NUMBER', hijos: [$$[$0-3],...$$[$0-1].hijos], linea: yylineno}); 
break;
case 54:
 this.$ = new NodoAST({label: 'F_STRING', hijos: [$$[$0-3],...$$[$0-1].hijos], linea: yylineno}); 
break;
case 55:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [...$$[$0-3].hijos,$$[$0-1]], linea: yylineno}); 
break;
case 56:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [...$$[$0-5].hijos,$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 57:
 this.$ = new NodoAST({label: 'F_LOWERCASE', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 58:
 this.$ = new NodoAST({label: 'F_UPPERCASE', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 59:
 this.$ = new NodoAST({label: 'F_LLAMADA', hijos: [$$[$0-5],$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 60:
 this.$ = new NodoAST({label: 'dolar id', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 61: case 172:
 this.$ = new NodoAST({label: 'string', hijos: [$$[$0]], linea: yylineno}); 
break;
case 62: case 173:
 this.$ = new NodoAST({label: 'id', hijos: [$$[$0]], linea: yylineno}); 
break;
case 63: case 68:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 64: case 69:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 65:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 66:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 67:
 this.$ = new NodoAST({label: 'FUNCION', hijos: [$$[$0-13],$$[$0-11],$$[$0-9],$$[$0-4],$$[$0-2]], linea: yylineno}); 
break;
case 70:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],...$$[$0].hijos], linea: yylineno}); 
break;
case 71: case 72: case 73: case 74:
 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 75:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 76:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 77:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-3].hijos, $$[$0-2], ...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 78:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 90:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 91:
 this.$ = new NodoAST({label: 'ATRIBUTO_DESCENDIENTES', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 92: case 93:
 this.$ = new NodoAST({label: 'DESCENDIENTES_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'PADRE', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 95:
 this.$ = new NodoAST({label: 'ATRIBUTO_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 96:
 this.$ = new NodoAST({label: 'HIJOS', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 97:
 this.$ = new NodoAST({label: 'RAIZ', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 98:
 this.$ = new NodoAST({label: 'NODO_ACTUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 99:
 this.$ = new NodoAST({label: 'PADRE_NODO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 100:
 this.$ = new NodoAST({label: 'ANY', hijos: [$$[$0]], linea: yylineno}); 
break;
case 101: case 103: case 104: case 105: case 107: case 109: case 110: case 111: case 113:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 102:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-5], $$[$0-4]], linea: yylineno}); 
break;
case 106:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-4], $$[$0-3]], linea: yylineno}); 
break;
case 108: case 112:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-3], $$[$0-2]], linea: yylineno}); 
break;
case 114: case 115: case 116:
 this.$ = new NodoAST({label: 'OPC_EJES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 117: case 118:
 this.$ = new NodoAST({label: 'NODO_FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 119:
 this.$ = new NodoAST({label: 'OPC', hijos: [], linea: yylineno}); 
break;
case 120: case 121:
 this.$ = new NodoAST({label: 'OPC', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 122: case 123:
 this.$ = new NodoAST({label: 'PASOS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 124:
 this.$ = new NodoAST({label: 'ANY_ATRIBUTO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 125:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 126:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [], linea: yylineno}); 
break;
case 127:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 128:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 129:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 130:
 this.$ = new NodoAST({label: 'PREDICADO', hijos: [$$[$0-2], ...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 131: case 132: case 133: case 134: case 135: case 136: case 138: case 139: case 140: case 142: case 143:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 137:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 141:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 144: case 145:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 146: case 147:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0-2],...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 148:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-1].hijos,$$[$0],$$[$01]], linea: yylineno}); 
break;
case 149:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 150:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 151:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 152: case 153:
 this.$ = new NodoAST({label: 'ORDEN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 154: case 155: case 156: case 157: case 158:
 this.$ = new NodoAST({label: 'ARITMETICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 159: case 160: case 161: case 162: case 163: case 164:
 this.$ = new NodoAST({label: 'RELACIONALES', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 165: case 166:
 this.$ = new NodoAST({label: 'LOGICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 167:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 168:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 169:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 170:
 this.$ = new NodoAST({label: 'integer', hijos: [$$[$0]], linea: yylineno}); 
break;
case 171:
 this.$ = new NodoAST({label: 'double', hijos: [$$[$0]], linea: yylineno}); 
break;
case 174:
 this.$ = new NodoAST({label: 'punto', hijos: [$$[$0]], linea: yylineno}); 
break;
case 175:
 this.$ = new NodoAST({label: 'dos_pts', hijos: [$$[$0]], linea: yylineno}); 
break;
case 176: case 177:
 this.$ = new NodoAST({label: 'boolean', hijos: [$$[$0]], linea: yylineno}); 
break;
case 178:
 this.$ = new NodoAST({label: 'xquery', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:12,17:$V0,19:[1,17],33:$V1,41:$V2,46:$V3,47:$V4,59:$V5,61:$V6,62:$V7,64:$V8,67:$V9,70:$Va,72:$Vb,83:4,85:11,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,95:31,96:32,97:33,99:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,107:$Vj,108:$Vk,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs},{1:[3]},{5:[1,54],19:$Vt,33:$V1,46:$V3,83:55,85:11,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,95:31,96:32,97:33,99:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,107:$Vj,108:$Vk,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs},{5:[1,57]},o($Vu,[2,76],{84:$Vv}),o($Vw,[2,3]),o($Vw,[2,4]),o($Vw,[2,5]),o($Vw,[2,6]),o($Vw,[2,7]),o($Vw,[2,8]),o($Vx,$Vy,{86:59,127:60,128:61,129:$Vz}),o($VA,[2,15],{83:4,85:11,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,95:31,96:32,97:33,14:63,4:64,19:$Vt,23:[1,65],33:$V1,46:$V3,99:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,107:$Vj,108:$Vk,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs}),{19:[1,66],46:[1,67]},{18:[1,68]},{73:[1,69]},{23:[1,70]},o([5,19,33,46,84,99,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,129],$VB,{23:$VC,68:$VD}),{23:[1,73]},{23:[1,74]},{23:[1,75]},{65:[1,76]},{65:[1,77]},o($VE,[2,79]),o($VE,[2,80]),o($VE,[2,81]),o($VE,[2,82]),o($VE,[2,83]),o($VE,[2,84]),o($VE,[2,85]),o($VE,[2,86]),o($VE,[2,87]),o($VE,[2,88]),{19:$VF,98:78,108:$VG,120:81,121:$VH,122:$VI},{18:[1,84]},o($VE,$VJ,{100:85,120:86,123:87,124:88,125:89,40:$VK,121:$VH,122:$VI,126:$VL}),o($VE,$VJ,{120:86,123:87,124:88,125:89,100:92,40:$VK,121:$VH,122:$VI,126:$VL}),o($VE,$VJ,{120:86,123:87,124:88,125:89,100:93,40:$VK,121:$VH,122:$VI,126:$VL}),o($VE,$VJ,{120:86,123:87,124:88,125:89,100:94,40:$VK,121:$VH,122:$VI,126:$VL}),o($VE,$VJ,{120:86,123:87,124:88,125:89,100:95,40:$VK,121:$VH,122:$VI,126:$VL}),o($VE,$VJ,{120:86,123:87,124:88,125:89,100:96,40:$VK,121:$VH,122:$VI,126:$VL}),o($VE,$VJ,{120:86,123:87,124:88,125:89,100:97,40:$VK,121:$VH,122:$VI,126:$VL}),o($VE,[2,98]),o($VE,[2,99]),o($VE,[2,100]),{65:[1,99],110:[1,98]},{110:[1,100]},{110:[1,101]},{65:[1,103],110:[1,102]},{65:[1,105],110:[1,104]},{110:[1,106]},{110:[1,107]},{65:[1,109],110:[1,108]},{110:[1,110]},{1:[2,1]},o($Vu,[2,75],{84:$Vv}),o($VE,$VB),{1:[2,2]},{19:$Vt,33:$V1,46:$V3,85:111,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,95:31,96:32,97:33,99:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,107:$Vj,108:$Vk,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs},o($Vx,[2,78]),o($Vx,[2,127],{128:112,129:$Vz}),o($VE,[2,129]),{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:113,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{15:143,16:144,29:145,30:147,31:148,32:$V11,35:$V21,38:$V31},o($VA,[2,16],{85:11,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,95:31,96:32,97:33,83:55,19:$Vt,33:$V1,46:$V3,99:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,107:$Vj,108:$Vk,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs}),{18:$VM,19:$V41,24:152,26:[1,151],60:153,69:$VS,106:$VV,107:$VW,147:$V_,148:$V$,149:$V01},{42:[1,155]},{42:[1,156]},{19:[1,157]},{19:[1,158]},{18:[1,159]},{18:$VM,19:$V41,24:160,26:$VP,60:153,69:$VS,106:$VV,107:$VW,147:$V_,148:$V$,149:$V01},{19:[1,161]},{18:$VM,19:$V41,26:$VP,60:162,69:$VS,106:$VV,107:$VW,147:$V_,148:$V$,149:$V01},{18:$VM,19:$V41,26:$VP,60:163,69:$VS,106:$VV,107:$VW,147:$V_,148:$V$,149:$V01},{18:$V51,19:$V61,63:164,69:$V71},{66:[1,168]},{66:[1,169]},o($VE,[2,90]),o($VE,[2,114]),o($VE,[2,115]),o($VE,[2,116]),o($VE,[2,117]),o($VE,[2,118]),{19:[1,170]},o($VE,[2,91]),o($VE,[2,120]),o($VE,[2,121]),o($VE,[2,122]),o($VE,[2,123]),o($VE,[2,124]),{19:[1,171]},o($VE,[2,92]),o($VE,[2,93]),o($VE,[2,94]),o($VE,[2,95]),o($VE,[2,96]),o($VE,[2,97]),o($V81,[2,101]),{111:[1,172]},o($V81,[2,103]),o($V81,[2,104]),o($V81,[2,105]),{111:[1,173]},o($V81,[2,107]),{116:[1,174]},o($V81,[2,109]),o($V81,[2,110]),o($V81,[2,111]),{116:[1,175]},o($V81,[2,113]),o($Vx,$Vy,{127:60,128:61,86:176,129:$Vz}),o($VE,[2,128]),{27:$V91,33:$Va1,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,71:$Vk1,102:$Vl1,103:$Vm1,108:$Vn1,111:$Vo1,130:[1,177],140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1,146:$Vv1},o($Vw1,[2,131]),o($Vw1,[2,132]),o($Vw1,[2,133]),o($Vw1,[2,134]),o($Vw1,[2,135]),o($Vw1,[2,136]),{19:$VF,98:201,108:$VG,120:81,121:$VH,122:$VI},o($Vw1,[2,138]),o($Vw1,[2,139]),o($Vw1,[2,140]),{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:202,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},o($Vw1,[2,142]),o($Vw1,[2,143]),o($Vw1,$VJ,{120:86,123:87,124:88,125:89,100:203,19:[1,204],40:$VK,121:$VH,122:$VI,126:$VL}),o($Vw1,[2,168]),{23:[1,205]},{23:[1,206]},o($Vx1,$Vy1),o($Vx1,[2,171]),o($Vx1,[2,172]),o($Vw1,$Vz1,{23:$VC,68:$VD}),o($Vx1,[2,174]),o($Vx1,[2,175]),o($Vx1,[2,176]),o($Vx1,[2,177]),{4:207,19:$Vt,33:$V1,46:$V3,83:4,85:11,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,95:31,96:32,97:33,99:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,105:$Vh,106:$Vi,107:$Vj,108:$Vk,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs},{19:$VA1,40:$VB1,137:208},{19:$VA1,40:$VB1,137:211},o($Vw1,[2,149]),{16:212,29:213,30:147,31:148,32:$V11,35:$V21,38:$V31},o($Vw,[2,11],{11:214,47:$V4}),o($VA,[2,20]),{8:217,11:218,18:[1,216],23:$VC1,37:215,39:219,41:$V2,47:$V4},o($VA,[2,21]),o($VA,[2,22]),{18:[1,221]},{36:[1,222]},o($VD1,$Vy1,{27:[1,223]}),{25:[1,224],28:$VE1},o($VD1,[2,64]),o($VD1,$Vz1),{43:[1,226]},{43:[1,227]},{68:[1,228]},{68:[1,229]},{19:[1,230]},{25:[1,231],28:$VE1},{23:[1,232]},{25:[1,233]},{25:[1,234]},{28:[1,235]},{19:[1,236]},o($VD1,[2,61]),o($VD1,[2,62]),{23:[1,237]},{23:[1,238]},{20:[1,239],21:[1,240]},o($VE,[2,125]),{65:[1,241]},{112:[1,242]},{110:[1,243]},{110:[1,244]},o($Vx,[2,77]),o($VE,[2,130]),{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:245,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:246,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:247,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:248,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:249,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:250,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:251,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:252,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:253,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:254,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:255,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:256,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:257,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:258,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:259,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},o($Vw1,[2,148]),{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:260,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:261,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:262,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:263,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:264,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:265,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:266,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},o($Vw1,[2,137]),{25:[1,267],27:$V91,33:$Va1,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,71:$Vk1,102:$Vl1,103:$Vm1,108:$Vn1,111:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1,146:$Vv1},o($Vw1,[2,167]),o($Vw1,[2,169]),{25:[1,268]},{25:[1,269]},o($Vx1,[2,178],{85:11,87:23,88:24,89:25,90:26,91:27,92:28,93:29,94:30,95:31,96:32,97:33,83:55,19:$Vt,46:$V3,99:$Vc,101:$Vd,104:$Vg,105:$Vh,106:$Vi,107:$Vj,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs}),{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:270,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},o($VF1,[2,150]),{19:[1,271]},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:272,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},o($Vw,[2,9]),o($VA,[2,19]),o($Vw,[2,10]),o($VG1,[2,26],{28:$VH1}),{19:[1,274]},o($VG1,[2,28]),o($VG1,[2,29]),o($VI1,[2,31]),{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:275,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{19:[1,276]},{18:[1,278],23:$VC1,37:277,39:219},{26:[1,279]},{28:[1,280]},{18:$VM,19:$V41,26:$VP,60:281,69:$VS,106:$VV,107:$VW,147:$V_,148:$V$,149:$V01},{7:282,13:12,17:$V0,18:[1,284],45:[1,283]},{45:[1,285]},{71:[1,286]},{19:[1,287]},{33:[1,288]},o($Vw1,[2,52]),{18:$VM,19:$V41,24:289,26:$VP,60:153,69:$VS,106:$VV,107:$VW,147:$V_,148:$V$,149:$V01},o($Vw1,[2,53]),o($Vw1,[2,54]),{26:[1,290]},o($VD1,[2,60]),{18:$V51,19:$V61,63:291,69:$V71},{18:$V51,19:$V61,63:292,69:$V71},o($VJ1,[2,12]),{18:[1,293]},{112:[1,294]},{110:[1,295]},o($V81,[2,108]),o($V81,[2,112]),o($VK1,[2,154],{27:$V91,33:$Va1,102:$Vl1,103:$Vm1,108:$Vn1,141:$Vq1,142:$Vr1}),o($VK1,[2,155],{27:$V91,33:$Va1,102:$Vl1,103:$Vm1,108:$Vn1,141:$Vq1,142:$Vr1}),o($VL1,[2,156],{27:$V91,33:$Va1,102:$Vl1,103:$Vm1}),o($VL1,[2,157],{27:$V91,33:$Va1,102:$Vl1,103:$Vm1}),o($VL1,[2,158],{27:$V91,33:$Va1,102:$Vl1,103:$Vm1}),o($VM1,[2,159],{27:$V91,33:$Va1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1}),o($VM1,[2,160],{27:$V91,33:$Va1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1}),o($VM1,[2,161],{27:$V91,33:$Va1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1}),o($VM1,[2,162],{27:$V91,33:$Va1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1}),o($VN1,[2,163],{27:$V91,33:$Va1,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1}),o($VN1,[2,164],{27:$V91,33:$Va1,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1}),o([5,25,32,35,38,44,47,51,111,130],[2,165],{27:$V91,33:$Va1,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,71:$Vk1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1,146:$Vv1}),o([5,25,32,35,38,44,47,51,111,130,146],[2,166],{27:$V91,33:$Va1,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,71:$Vk1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1}),o($VO1,[2,144],{27:$V91,103:$Vm1}),o($VP1,[2,145],{27:$V91,102:$Vl1,103:$Vm1}),o($VQ1,[2,45],{27:$V91,33:$Va1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1}),o($VQ1,[2,46],{27:$V91,33:$Va1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1}),o($VQ1,[2,47],{27:$V91,33:$Va1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1}),o($VQ1,[2,48],{27:$V91,33:$Va1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1}),o($VQ1,[2,49],{27:$V91,33:$Va1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1}),o($VQ1,[2,50],{27:$V91,33:$Va1,65:$Vj1,102:$Vl1,103:$Vm1,108:$Vn1,140:$Vp1,141:$Vq1,142:$Vr1}),o($Vw1,[2,51]),o($Vw1,[2,141]),o($Vw1,[2,152]),o($Vw1,[2,153]),o($VO1,[2,146],{27:$V91,103:$Vm1}),o($VF1,[2,151]),o($VP1,[2,147],{27:$V91,102:$Vl1,103:$Vm1}),{18:[1,297],23:$VC1,39:296},o($VG1,[2,27],{33:$VR1}),{25:[1,299],27:$V91,33:$Va1,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,71:$Vk1,102:$Vl1,103:$Vm1,108:$Vn1,111:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1,146:$Vv1},{33:[1,300]},o($VA,[2,24],{28:$VH1}),{19:[1,301]},{25:[1,302]},{18:[1,304],22:303},o($VD1,[2,63]),{44:[1,305]},{23:[1,306]},{19:[1,307]},{23:[1,308]},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:309,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{23:[1,310]},{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:311,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{25:[1,312],28:$VE1},{25:[1,313],28:[1,314]},{25:[1,315]},{25:[1,316]},{19:[1,317]},{110:[1,318]},o($V81,[2,106]),o($VI1,[2,30]),{19:[1,319]},{19:[1,320],40:[1,321]},o($VI1,[2,34]),{12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:322,40:$VR,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},o($VA,[2,25],{33:$VR1}),o($VA,[2,17]),o($VA,[2,18]),{19:[1,323]},{41:[1,324]},{18:[1,325]},{44:[1,326]},{18:[1,327]},o($Vw,[2,66],{16:328,27:$V91,33:$Va1,38:$V31,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,71:$Vk1,102:$Vl1,103:$Vm1,108:$Vn1,111:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1,146:$Vv1}),{18:$VS1,74:329,79:330},{25:[1,332],27:$V91,33:$Va1,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,71:$Vk1,102:$Vl1,103:$Vm1,108:$Vn1,111:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1,146:$Vv1},o($Vw1,[2,59]),o($Vw1,[2,55]),{26:[1,333]},o($Vw1,[2,57]),o($Vw1,[2,58]),{20:[1,334]},o($V81,[2,102]),{33:$VR1},o($VI1,[2,32]),{19:[1,335]},o($VA,[2,23],{27:$V91,33:$Va1,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,71:$Vk1,102:$Vl1,103:$Vm1,108:$Vn1,111:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1,146:$Vv1}),{20:[1,336]},{33:[1,337]},{19:[1,338]},{41:[1,339]},{19:[1,340]},o($Vw,[2,65]),{25:[1,341],28:[1,342]},o($VD1,[2,69]),{19:[1,343]},{48:344,50:[1,345]},{25:[1,346]},o($VJ1,[2,13]),o($VI1,[2,33]),{23:[1,347]},{19:[1,348]},{25:[1,349],33:[1,350]},{33:[1,351]},{33:[1,352]},{75:[1,353]},{18:$VS1,79:354},{75:[1,355]},{49:356,51:[1,357]},{8:358,12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:359,40:$VR,41:$V2,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},o($Vw1,[2,56]),{18:$VM,19:$V41,24:360,26:$VP,60:153,69:$VS,106:$VV,107:$VW,147:$V_,148:$V$,149:$V01},{42:[1,361]},{44:[1,362]},{19:[1,363]},{19:[1,364]},{19:[1,365]},{76:[1,366]},o($VD1,[2,68]),{76:[1,367]},o($VG1,[2,40]),{8:368,12:126,18:$VM,19:$VN,23:$VO,26:$VP,33:$VQ,34:369,40:$VR,41:$V2,46:$V3,52:125,59:$V5,60:119,61:$V6,62:$V7,64:$V8,67:$V9,69:$VS,97:120,102:$VT,103:$VU,106:$VV,107:$VW,109:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp,117:$Vq,118:$Vr,119:$Vs,120:123,121:$VH,122:$VI,126:$VX,128:122,129:$Vz,131:114,132:115,133:116,134:117,135:118,136:121,138:$VY,139:$VZ,147:$V_,148:$V$,149:$V01},{51:[2,41]},{27:$V91,33:$Va1,41:$Vb1,42:$Vc1,51:[2,42],53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,71:$Vk1,102:$Vl1,103:$Vm1,108:$Vn1,111:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1,146:$Vv1},{25:[1,370],28:$VE1},o($VT1,[2,35]),{41:[1,371]},{25:[1,372]},{42:[1,373]},{25:[1,374]},{68:[1,375]},{68:[1,376]},o($VG1,[2,43]),o($VG1,[2,44],{27:$V91,33:$Va1,41:$Vb1,42:$Vc1,53:$Vd1,54:$Ve1,55:$Vf1,56:$Vg1,57:$Vh1,58:$Vi1,65:$Vj1,71:$Vk1,102:$Vl1,103:$Vm1,108:$Vn1,111:$Vo1,140:$Vp1,141:$Vq1,142:$Vr1,143:$Vs1,144:$Vt1,145:$Vu1,146:$Vv1}),o($VA,[2,14]),{33:[1,377]},{44:[1,378]},o($VT1,[2,39]),{44:[1,379]},{61:$VU1,77:380,80:$VV1,81:$VW1,82:$VX1},{61:$VU1,77:385,80:$VV1,81:$VW1,82:$VX1},{19:[1,386]},{41:[1,387]},{41:[1,388]},{43:[1,389]},o($VY1,[2,71]),o($VY1,[2,72]),o($VY1,[2,73]),o($VY1,[2,74]),o($VD1,[2,70]),{42:[1,390]},{33:[1,391]},{33:[1,392]},{6:393,7:5,8:6,9:7,10:8,11:9,12:10,13:12,17:$V0,19:[1,394],41:$V2,47:$V4,59:$V5,61:$V6,62:$V7,64:$V8,67:$V9,70:$Va,72:$Vb},o($VT1,[2,36]),{19:[1,395]},{46:[1,396]},{44:[1,397]},{23:$VC,68:$VD},{42:[1,398]},{42:[1,399]},{78:[1,400]},o($VT1,[2,37]),o($VT1,[2,38]),o($Vw,[2,67])],
defaultActions: {54:[2,1],57:[2,2],358:[2,41]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores"); 
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 17;
break;
case 2:return 32;
break;
case 3:return 35;
break;
case 4:return 38;
break;
case 5:return  'if';
break;
case 6:return 20;
break;
case 7:return 36;
break;
case 8:return 70;
break;
case 9:return 45;
break;
case 10:return 50;
break;
case 11:return 51;
break;
case 12:return 53;
break;
case 13:return 54;
break;
case 14:return 55;
break;
case 15:return 56;
break;
case 16:return 57;
break;
case 17:return 58;
break;
case 18:return 27;
break;
case 19:return 21;
break;
case 20:return 70;
break;
case 21:return 72;
break;
case 22:return 75;
break;
case 23:return 73;
break;
case 24:return 148;
break;
case 25:return 149;
break;
case 26:return 59;
break;
case 27:return 61;
break;
case 28:return 80;
break;
case 29:return 81;
break;
case 30:return 82;
break;
case 31:return 62;
break;
case 32:return 67;
break;
case 33:return 66;
break;
case 34:return 64;
break;
case 35:return 76;
break;
case 36:return 138;
break;
case 37:return 139;
break;
case 38:return 121;
break;
case 39:return 122;
break;
case 40:return 'comment';
break;
case 41:return 109;
break;
case 42:return 113;
break;
case 43:return 46;
break;
case 44:return 114;
break;
case 45:return 115;
break;
case 46:return 117;
break;
case 47:return 118;
break;
case 48:return 119;
break;
case 49:return 116;
break;
case 50:return 112;
break;
case 51:return 84;
break;
case 52:return 140;
break;
case 53:return 65;
break;
case 54:return 108;
break;
case 55:return 71;
break;
case 56:return 145;
break;
case 57:return 144;
break;
case 58:return 143;
break;
case 59:return 41;
break;
case 60:return 42;
break;
case 61:return 18;
break;
case 62:return 28;
break;
case 63:return 78;
break;
case 64:return 129;
break;
case 65:return 130;
break;
case 66:return 23;
break;
case 67:return 25;
break;
case 68:return 43;
break;
case 69:return 44;
break;
case 70:return 147;
break;
case 71:return 26;
break;
case 72:return 69;
break;
case 73:return 69;
break;
case 74:return 142;
break;
case 75:return 141;
break;
case 76:return 146;
break;
case 77:return 111;
break;
case 78:return 19;
break;
case 79:return 107;
break;
case 80:return 99;
break;
case 81:return 101;
break;
case 82:return 102;
break;
case 83:return 103;
break;
case 84:return 104;
break;
case 85:return 105;
break;
case 86:return 33;
break;
case 87:return 106;
break;
case 88:return 110;
break;
case 89:return 68;
break;
case 90:return 126;
break;
case 91:return 40;    
break;
case 92:
  const er = new errorGram.Error({ tipo: 'léxico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es válido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 93:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:for\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:by\b)/,/^(?:let\b)/,/^(?:data\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:let\b)/,/^(?:declare\b)/,/^(?:as\b)/,/^(?:function\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:double\b)/,/^(?:integer\b)/,/^(?:boolean\b)/,/^(?:substring\b)/,/^(?:upper\b)/,/^(?:case\b)/,/^(?:lower\b)/,/^(?:xs\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\$)/,/^(?:,)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:["m"]["o"]["d"])/,/^(?:["d"]["i"]["v"])/,/^(?:["a"]["n"]["d"])/,/^(?:["o"]["r"])/,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9_]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?::)/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_XQUERY;
exports.Parser = gramatica_XQUERY.Parser;
exports.parse = function () { return gramatica_XQUERY.parse.apply(gramatica_XQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}