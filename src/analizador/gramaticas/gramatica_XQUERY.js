/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_XQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,32],$V1=[1,39],$V2=[1,14],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,12],$V9=[1,13],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,51],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,54],$Vt=[5,18,24,26,27,31,32,34,37,40,44,46,47,48,49,50,51,58,64,72,94,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,113,114,115,126,136,137,138,139,140,141,142,143,144],$Vu=[1,56],$Vv=[5,72],$Vw=[5,18,24,26,27,31,32,34,37,40,44,46,47,48,49,50,51,58,64,72,79,94,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,113,114,115,126,136,137,138,139,140,141,142,143,144],$Vx=[2,117],$Vy=[1,60],$Vz=[31,34,37],$VA=[2,80],$VB=[1,67],$VC=[1,68],$VD=[5,18,24,26,27,31,32,34,37,40,44,46,47,48,49,50,51,58,64,72,79,94,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,113,114,115,125,126,136,137,138,139,140,141,142,143,144],$VE=[1,75],$VF=[1,76],$VG=[1,78],$VH=[1,79],$VI=[2,110],$VJ=[1,87],$VK=[1,86],$VL=[1,135],$VM=[1,130],$VN=[1,120],$VO=[1,127],$VP=[1,137],$VQ=[1,123],$VR=[1,129],$VS=[1,136],$VT=[1,138],$VU=[1,131],$VV=[1,132],$VW=[1,124],$VX=[1,125],$VY=[1,126],$VZ=[1,128],$V_=[1,133],$V$=[1,134],$V01=[1,145],$V11=[1,146],$V21=[1,142],$V31=[1,150],$V41=[1,159],$V51=[1,161],$V61=[1,160],$V71=[18,103,117,118],$V81=[1,194],$V91=[1,186],$Va1=[1,188],$Vb1=[1,189],$Vc1=[1,190],$Vd1=[1,191],$Ve1=[1,192],$Vf1=[1,193],$Vg1=[1,173],$Vh1=[1,181],$Vi1=[1,185],$Vj1=[1,187],$Vk1=[1,174],$Vl1=[1,183],$Vm1=[1,172],$Vn1=[1,175],$Vo1=[1,176],$Vp1=[1,177],$Vq1=[1,178],$Vr1=[1,179],$Vs1=[1,180],$Vt1=[1,182],$Vu1=[1,184],$Vv1=[5,24,26,31,32,34,37,40,44,46,47,48,49,50,51,58,64,72,97,98,103,106,126,136,137,138,139,140,141,142,143,144],$Vw1=[5,24,26,27,31,32,34,37,40,44,46,47,48,49,50,51,58,64,72,97,98,103,106,126,136,137,138,139,140,141,142,143,144],$Vx1=[2,161],$Vy1=[2,164],$Vz1=[1,203],$VA1=[1,204],$VB1=[1,213],$VC1=[24,27],$VD1=[1,218],$VE1=[17,18,22,25,32,39,52,54,55,57,60,62,97,98,101,102,104,107,108,109,110,111,113,114,115,117,118,122,125,134,135,145,146,147],$VF1=[5,40,72],$VG1=[1,264],$VH1=[5,27,31,34,37,40,72],$VI1=[18,22,31,32,34,37,94,96,97,98,99,100,101,102,103,104,107,108,109,110,111,113,114,115],$VJ1=[5,24,31,34,37,40,44,46,47,48,49,50,51,58,64,72,106,126,136,139,140,141,142,143,144],$VK1=[5,24,31,34,37,40,44,46,47,48,49,50,51,58,64,72,103,106,126,136,137,138,139,140,141,142,143,144],$VL1=[5,24,31,34,37,40,44,64,72,106,126,139,140,141,142,143,144],$VM1=[5,24,31,34,37,40,44,64,72,106,126,143,144],$VN1=[5,24,31,32,34,37,40,44,46,47,48,49,50,51,58,64,72,97,103,106,126,136,137,138,139,140,141,142,143,144],$VO1=[5,24,31,32,34,37,40,44,46,47,48,49,50,51,58,64,72,103,106,126,136,137,138,139,140,141,142,143,144],$VP1=[5,24,31,34,37,40,44,46,47,48,49,50,51,64,72,106,126,139,140,141,142,143,144],$VQ1=[1,285],$VR1=[1,310],$VS1=[1,337],$VT1=[1,338],$VU1=[1,339],$VV1=[1,340],$VW1=[24,27,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FLWOR":6,"FOR":7,"LET":8,"FUNCION":9,"IF":10,"LLAMADA_FUNCION":11,"FOR_1":12,"FOR_2":13,"L_CONDICION":14,"RETURN":15,"for":16,"dolar":17,"id":18,"in":19,"at":20,"FOR_P":21,"par_izq":22,"L_PARAM":23,"par_der":24,"integer":25,"to":26,"coma":27,"CONDICION":28,"WHERE":29,"ORDER":30,"where":31,"diagonal":32,"EXPR":33,"order":34,"by":35,"L_VALOR":36,"return":37,"VALOR":38,"arroba":39,"if":40,"THEN":41,"ELSE":42,"then":43,"else":44,"COMPARACION_XQUERY":45,"eq":46,"ne":47,"lt":48,"le":49,"gt":50,"ge":51,"number":52,"VALORES":53,"tk_string":54,"substring":55,"VALOR_LLAMADA":56,"lower":57,"menos":58,"case":59,"upper":60,"doble_pto":61,"string":62,"let":63,"igual":64,"declare":65,"function":66,"PARAMETROS":67,"as":68,"xs":69,"TIPO":70,"llave_izq":71,"llave_der":72,"pto_coma":73,"PARAM":74,"tk_double":75,"tk_integer":76,"tk_boolean":77,"INSTRUCCION":78,"o":79,"RUTA":80,"FILTROS":81,"ATRIBUTO_DESCENDIENTES":82,"DESCENDIENTES_NODO":83,"DESCENDIENTE":84,"PADRE":85,"ATRIBUTO_NODO":86,"HIJOS":87,"RAIZ":88,"NODO_ACTUAL":89,"PADRE_NODO":90,"ANY":91,"EJES":92,"OPC_EJES":93,"diagonal_diagonal_arroba_ast":94,"OPC":95,"diagonal_diagonal_ast":96,"doble_diagonal":97,"diagonal_dos_pts":98,"diagonal_arroba_ast":99,"diagonal_ast":100,"punto":101,"dos_pts":102,"mul":103,"ancestor":104,"bi_pto":105,"or":106,"self":107,"attribute":108,"child":109,"descendant":110,"following":111,"sibling":112,"namespace":113,"parent":114,"preceding":115,"NODO_FUNCION":116,"node":117,"text":118,"PASOS":119,"ANY_ATRIBUTO":120,"ATRIBUTO":121,"any_atributo":122,"LISTA_PREDICADO":123,"PREDICADO":124,"cor_izq":125,"cor_der":126,"ATRIBUTO_PREDICADO":127,"ARITMETICAS":128,"RELACIONALES":129,"LOGICAS":130,"ORDEN":131,"PATH":132,"OPC_PATH":133,"last":134,"position":135,"mas":136,"div":137,"mod":138,"mayor":139,"menor":140,"mayor_igual":141,"menor_igual":142,"diferencia":143,"and":144,"double":145,"true":146,"false":147,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"for",17:"dolar",18:"id",19:"in",20:"at",22:"par_izq",24:"par_der",25:"integer",26:"to",27:"coma",31:"where",32:"diagonal",34:"order",35:"by",37:"return",39:"arroba",40:"if",43:"then",44:"else",46:"eq",47:"ne",48:"lt",49:"le",50:"gt",51:"ge",52:"number",54:"tk_string",55:"substring",57:"lower",58:"menos",59:"case",60:"upper",61:"doble_pto",62:"string",63:"let",64:"igual",65:"declare",66:"function",68:"as",69:"xs",71:"llave_izq",72:"llave_der",73:"pto_coma",75:"tk_double",76:"tk_integer",77:"tk_boolean",79:"o",94:"diagonal_diagonal_arroba_ast",96:"diagonal_diagonal_ast",97:"doble_diagonal",98:"diagonal_dos_pts",99:"diagonal_arroba_ast",100:"diagonal_ast",101:"punto",102:"dos_pts",103:"mul",104:"ancestor",105:"bi_pto",106:"or",107:"self",108:"attribute",109:"child",110:"descendant",111:"following",112:"sibling",113:"namespace",114:"parent",115:"preceding",117:"node",118:"text",122:"any_atributo",125:"cor_izq",126:"cor_der",134:"last",135:"position",136:"mas",137:"div",138:"mod",139:"mayor",140:"menor",141:"mayor_igual",142:"menor_igual",143:"diferencia",144:"and",145:"double",146:"true",147:"false"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,4],[7,3],[12,4],[12,7],[21,6],[13,0],[13,1],[13,5],[13,5],[14,2],[14,1],[28,1],[28,1],[29,5],[30,3],[30,4],[15,2],[15,3],[15,2],[36,3],[36,1],[38,4],[38,5],[38,3],[10,9],[41,2],[42,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[11,4],[11,4],[11,4],[11,6],[11,8],[11,6],[11,6],[11,6],[56,2],[56,1],[56,1],[23,3],[23,1],[8,7],[8,6],[9,16],[67,3],[67,1],[74,6],[70,1],[70,1],[70,1],[70,1],[4,2],[4,1],[78,4],[78,2],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,2],[82,2],[83,2],[84,2],[85,2],[86,2],[87,2],[88,2],[89,1],[90,1],[91,1],[92,2],[92,6],[92,2],[92,2],[92,2],[92,5],[92,2],[92,4],[92,2],[92,2],[92,2],[92,4],[92,2],[93,1],[93,1],[93,1],[116,1],[116,1],[95,0],[95,1],[95,1],[119,1],[119,1],[120,1],[121,2],[81,0],[81,1],[123,2],[123,1],[124,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2],[33,1],[33,1],[33,1],[33,3],[33,1],[33,1],[132,3],[132,3],[132,3],[132,3],[132,2],[132,1],[133,1],[133,2],[131,3],[131,3],[128,3],[128,3],[128,3],[128,3],[128,3],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[130,3],[130,3],[127,2],[127,1],[127,2],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'XQUERY', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 return new NodoAST({label: 'XQUERY', hijos: [...$$[$0-1].hijos], linea: yylineno}); 
break;
case 3: case 4: case 5: case 6: case 7:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 8:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 9:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 10:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 11:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 12:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-3],($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 13:
 this.$ = new NodoAST({label: 'FOR_P', hijos: [($$[$0-5]+$$[$0-4]),...$$[$0-1].hijos], linea: yylineno}); 
break;
case 14:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [], linea: yylineno}); 
break;
case 15:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0]], linea: yylineno}); 
break;
case 16:
 this.$ = new NodoAST({label: 'FOR', hijos: [$$[$0-3],$$[$0-2],$$[$0-1]], linea: yylineno}); 
break;
case 17:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0-3],$$[$0]], linea: yylineno}); 
break;
case 18:
 this.$ = new NodoAST({label: 'LCONDICION', hijos: [...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 19:
 this.$ = new NodoAST({label: 'L_CONDICION', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 20:
 this.$ = new NodoAST({label: 'WHERE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 21:
 this.$ = new NodoAST({label: 'ORDER', hijos: [$$[$0]], linea: yylineno}); 
break;
case 22:
 this.$ = new NodoAST({label: 'WHERE', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 23:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'RETURN', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 26:
 this.$ = new NodoAST({label: 'RETURN', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 27:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 28:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 29:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 30:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 31:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 32:
 this.$ = new NodoAST({label: 'VALOR', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 33:
 this.$ = new NodoAST({label: 'IF', hijos: [($$[$0-6]+$$[$0-5]),$$[$0-4],...$$[$0-3].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 34:
 this.$ = new NodoAST({label: 'THEN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 35:
 this.$ = new NodoAST({label: 'ELSE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 36:
 this.$ = new NodoAST({label: 'eq', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 37:
 this.$ = new NodoAST({label: 'ne', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 38:
 this.$ = new NodoAST({label: 'lt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 39:
 this.$ = new NodoAST({label: 'le', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 40:
 this.$ = new NodoAST({label: 'gt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 41:
 this.$ = new NodoAST({label: 'ge', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 42:
 this.$ = new NodoAST({label: 'to', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 43:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 44:
 this.$ = new NodoAST({label: 'F_NUMBER', hijos: [$$[$0-3],...$$[$0-1].hijos], linea: yylineno}); 
break;
case 45:
 this.$ = new NodoAST({label: 'F_STRING', hijos: [$$[$0-3],...$$[$0-1].hijos], linea: yylineno}); 
break;
case 46:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [...$$[$0-3].hijos,$$[$0-1]], linea: yylineno}); 
break;
case 47:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [...$$[$0-5].hijos,$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 48:
 this.$ = new NodoAST({label: 'F_LOWERCASE', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 49:
 this.$ = new NodoAST({label: 'F_UPPERCASE', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 50:
 this.$ = new NodoAST({label: 'F_LLAMADA', hijos: [$$[$0-5],$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 51:
 this.$ = new NodoAST({label: 'dolar id', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 52: case 163:
 this.$ = new NodoAST({label: 'string', hijos: [$$[$0]], linea: yylineno}); 
break;
case 53: case 164:
 this.$ = new NodoAST({label: 'id', hijos: [$$[$0]], linea: yylineno}); 
break;
case 54: case 59:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 55: case 60:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 56:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 57:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 58:
 this.$ = new NodoAST({label: 'FUNCION', hijos: [$$[$0-13],$$[$0-11],$$[$0-9],$$[$0-4],$$[$0-2]], linea: yylineno}); 
break;
case 61:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],...$$[$0].hijos], linea: yylineno}); 
break;
case 62: case 63: case 64: case 65:
 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 66:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 67:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 68:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-3].hijos, $$[$0-2], ...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 69:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 81:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 82:
 this.$ = new NodoAST({label: 'ATRIBUTO_DESCENDIENTES', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 83: case 84:
 this.$ = new NodoAST({label: 'DESCENDIENTES_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 85:
 this.$ = new NodoAST({label: 'PADRE', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 86:
 this.$ = new NodoAST({label: 'ATRIBUTO_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 87:
 this.$ = new NodoAST({label: 'HIJOS', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 88:
 this.$ = new NodoAST({label: 'RAIZ', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 89:
 this.$ = new NodoAST({label: 'NODO_ACTUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 90:
 this.$ = new NodoAST({label: 'PADRE_NODO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 91:
 this.$ = new NodoAST({label: 'ANY', hijos: [$$[$0]], linea: yylineno}); 
break;
case 92: case 94: case 95: case 96: case 98: case 100: case 101: case 102: case 104:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 93:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-5], $$[$0-4]], linea: yylineno}); 
break;
case 97:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-4], $$[$0-3]], linea: yylineno}); 
break;
case 99: case 103:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-3], $$[$0-2]], linea: yylineno}); 
break;
case 105: case 106: case 107:
 this.$ = new NodoAST({label: 'OPC_EJES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 108: case 109:
 this.$ = new NodoAST({label: 'NODO_FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 110:
 this.$ = new NodoAST({label: 'OPC', hijos: [], linea: yylineno}); 
break;
case 111: case 112:
 this.$ = new NodoAST({label: 'OPC', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 113: case 114:
 this.$ = new NodoAST({label: 'PASOS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 115:
 this.$ = new NodoAST({label: 'ANY_ATRIBUTO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 116:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 117:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [], linea: yylineno}); 
break;
case 118:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 119:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 120:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 121:
 this.$ = new NodoAST({label: 'PREDICADO', hijos: [$$[$0-2], ...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 122: case 123: case 124: case 125: case 126: case 127: case 129: case 130: case 131: case 133: case 134:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 128:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 132:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 135: case 136:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 137: case 138:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0-2],...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 139:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-1].hijos,$$[$0],$$[$01]], linea: yylineno}); 
break;
case 140:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 141:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 142:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 143: case 144:
 this.$ = new NodoAST({label: 'ORDEN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 145: case 146: case 147: case 148: case 149:
 this.$ = new NodoAST({label: 'ARITMETICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 150: case 151: case 152: case 153: case 154: case 155:
 this.$ = new NodoAST({label: 'RELACIONALES', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 156: case 157:
 this.$ = new NodoAST({label: 'LOGICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 158:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 159:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 160:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 161:
 this.$ = new NodoAST({label: 'integer', hijos: [$$[$0]], linea: yylineno}); 
break;
case 162:
 this.$ = new NodoAST({label: 'double', hijos: [$$[$0]], linea: yylineno}); 
break;
case 165:
 this.$ = new NodoAST({label: 'punto', hijos: [$$[$0]], linea: yylineno}); 
break;
case 166:
 this.$ = new NodoAST({label: 'dos_pts', hijos: [$$[$0]], linea: yylineno}); 
break;
case 167: case 168:
 this.$ = new NodoAST({label: 'boolean', hijos: [$$[$0]], linea: yylineno}); 
break;
case 169:
 this.$ = new NodoAST({label: 'xquery', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:11,16:$V0,18:[1,15],32:$V1,40:$V2,52:$V3,54:$V4,55:$V5,57:$V6,60:$V7,63:$V8,65:$V9,78:4,80:10,82:21,83:22,84:23,85:24,86:25,87:26,88:27,89:28,90:29,91:30,92:31,94:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr},{1:[3]},{5:[1,52],18:$Vs,32:$V1,78:53,80:10,82:21,83:22,84:23,85:24,86:25,87:26,88:27,89:28,90:29,91:30,92:31,94:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr},{5:[1,55]},o($Vt,[2,67],{79:$Vu}),o($Vv,[2,3]),o($Vv,[2,4]),o($Vv,[2,5]),o($Vv,[2,6]),o($Vv,[2,7]),o($Vw,$Vx,{81:57,123:58,124:59,125:$Vy}),o($Vz,[2,14],{78:4,80:10,82:21,83:22,84:23,85:24,86:25,87:26,88:27,89:28,90:29,91:30,92:31,13:61,4:62,18:$Vs,22:[1,63],32:$V1,94:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr}),{17:[1,64]},{66:[1,65]},{22:[1,66]},o([5,18,32,79,94,96,97,98,99,100,101,102,103,104,107,108,109,110,111,113,114,115,125],$VA,{22:$VB,61:$VC}),{22:[1,69]},{22:[1,70]},{22:[1,71]},{58:[1,72]},{58:[1,73]},o($VD,[2,70]),o($VD,[2,71]),o($VD,[2,72]),o($VD,[2,73]),o($VD,[2,74]),o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),{18:$VE,93:74,103:$VF,116:77,117:$VG,118:$VH},{17:[1,80]},o($VD,$VI,{95:81,116:82,119:83,120:84,121:85,39:$VJ,117:$VG,118:$VH,122:$VK}),o($VD,$VI,{116:82,119:83,120:84,121:85,95:88,39:$VJ,117:$VG,118:$VH,122:$VK}),o($VD,$VI,{116:82,119:83,120:84,121:85,95:89,39:$VJ,117:$VG,118:$VH,122:$VK}),o($VD,$VI,{116:82,119:83,120:84,121:85,95:90,39:$VJ,117:$VG,118:$VH,122:$VK}),o($VD,$VI,{116:82,119:83,120:84,121:85,95:91,39:$VJ,117:$VG,118:$VH,122:$VK}),o($VD,$VI,{116:82,119:83,120:84,121:85,95:92,39:$VJ,117:$VG,118:$VH,122:$VK}),o($VD,$VI,{116:82,119:83,120:84,121:85,95:93,39:$VJ,117:$VG,118:$VH,122:$VK}),o($VD,[2,89]),o($VD,[2,90]),o($VD,[2,91]),{58:[1,95],105:[1,94]},{105:[1,96]},{105:[1,97]},{58:[1,99],105:[1,98]},{58:[1,101],105:[1,100]},{105:[1,102]},{105:[1,103]},{58:[1,105],105:[1,104]},{105:[1,106]},{1:[2,1]},o($Vt,[2,66],{79:$Vu}),o($VD,$VA),{1:[2,2]},{18:$Vs,32:$V1,80:107,82:21,83:22,84:23,85:24,86:25,87:26,88:27,89:28,90:29,91:30,92:31,94:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr},o($Vw,[2,69]),o($Vw,[2,118],{124:108,125:$Vy}),o($VD,[2,120]),{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:109,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{14:139,15:140,28:141,29:143,30:144,31:$V01,34:$V11,37:$V21},o($Vz,[2,15],{80:10,82:21,83:22,84:23,85:24,86:25,87:26,88:27,89:28,90:29,91:30,92:31,78:53,18:$Vs,32:$V1,94:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr}),{17:$VL,18:$V31,23:148,25:[1,147],53:149,62:$VR,101:$VU,102:$VV,145:$VZ,146:$V_,147:$V$},{18:[1,151]},{18:[1,152]},{17:[1,153]},{17:$VL,18:$V31,23:154,25:$VO,53:149,62:$VR,101:$VU,102:$VV,145:$VZ,146:$V_,147:$V$},{18:[1,155]},{17:$VL,18:$V31,25:$VO,53:156,62:$VR,101:$VU,102:$VV,145:$VZ,146:$V_,147:$V$},{17:$VL,18:$V31,25:$VO,53:157,62:$VR,101:$VU,102:$VV,145:$VZ,146:$V_,147:$V$},{17:$V41,18:$V51,56:158,62:$V61},{59:[1,162]},{59:[1,163]},o($VD,[2,81]),o($VD,[2,105]),o($VD,[2,106]),o($VD,[2,107]),o($VD,[2,108]),o($VD,[2,109]),{18:[1,164]},o($VD,[2,82]),o($VD,[2,111]),o($VD,[2,112]),o($VD,[2,113]),o($VD,[2,114]),o($VD,[2,115]),{18:[1,165]},o($VD,[2,83]),o($VD,[2,84]),o($VD,[2,85]),o($VD,[2,86]),o($VD,[2,87]),o($VD,[2,88]),o($V71,[2,92]),{106:[1,166]},o($V71,[2,94]),o($V71,[2,95]),o($V71,[2,96]),{106:[1,167]},o($V71,[2,98]),{112:[1,168]},o($V71,[2,100]),o($V71,[2,101]),o($V71,[2,102]),{112:[1,169]},o($V71,[2,104]),o($Vw,$Vx,{123:58,124:59,81:170,125:$Vy}),o($VD,[2,119]),{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,64:$Vh1,97:$Vi1,98:$Vj1,103:$Vk1,106:$Vl1,126:[1,171],136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1,143:$Vt1,144:$Vu1},o($Vv1,[2,122]),o($Vv1,[2,123]),o($Vv1,[2,124]),o($Vv1,[2,125]),o($Vv1,[2,126]),o($Vv1,[2,127]),{18:$VE,93:195,103:$VF,116:77,117:$VG,118:$VH},o($Vv1,[2,129]),o($Vv1,[2,130]),o($Vv1,[2,131]),{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:196,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},o($Vv1,[2,133]),o($Vv1,[2,134]),o($Vv1,$VI,{116:82,119:83,120:84,121:85,95:197,18:[1,198],39:$VJ,117:$VG,118:$VH,122:$VK}),o($Vv1,[2,159]),{22:[1,199]},{22:[1,200]},o($Vw1,$Vx1),o($Vw1,[2,162]),o($Vw1,[2,163]),o($Vv1,$Vy1,{22:$VB,61:$VC}),o($Vw1,[2,165]),o($Vw1,[2,166]),o($Vw1,[2,167]),o($Vw1,[2,168]),{4:201,18:$Vs,32:$V1,78:4,80:10,82:21,83:22,84:23,85:24,86:25,87:26,88:27,89:28,90:29,91:30,92:31,94:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr},{18:$Vz1,39:$VA1,133:202},{18:$Vz1,39:$VA1,133:205},o($Vv1,[2,140]),{15:206,28:207,29:143,30:144,31:$V01,34:$V11,37:$V21},o($Vv,[2,10],{10:208,40:$V2}),o($Vz,[2,19]),{10:211,17:[1,210],22:$VB1,36:209,38:212,40:$V2},o($Vz,[2,20]),o($Vz,[2,21]),{17:[1,214]},{35:[1,215]},o($VC1,$Vx1,{26:[1,216]}),{24:[1,217],27:$VD1},o($VC1,[2,55]),o($VC1,$Vy1),{61:[1,219]},{61:[1,220]},{18:[1,221]},{24:[1,222],27:$VD1},{22:[1,223]},{24:[1,224]},{24:[1,225]},{27:[1,226]},{18:[1,227]},o($VC1,[2,52]),o($VC1,[2,53]),{22:[1,228]},{22:[1,229]},{19:[1,230],20:[1,231]},o($VD,[2,116]),{58:[1,232]},{107:[1,233]},{105:[1,234]},{105:[1,235]},o($Vw,[2,68]),o($VD,[2,121]),{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:236,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:237,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:238,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:239,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:240,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:241,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:242,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:243,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:244,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:245,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:246,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:247,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:248,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:249,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:250,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},o($Vv1,[2,139]),{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:251,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:252,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:253,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:254,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:255,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:256,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:257,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},o($Vv1,[2,128]),{24:[1,258],26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,64:$Vh1,97:$Vi1,98:$Vj1,103:$Vk1,106:$Vl1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1,143:$Vt1,144:$Vu1},o($Vv1,[2,158]),o($Vv1,[2,160]),{24:[1,259]},{24:[1,260]},o($Vw1,[2,169],{80:10,82:21,83:22,84:23,85:24,86:25,87:26,88:27,89:28,90:29,91:30,92:31,78:53,18:$Vs,94:$Va,96:$Vb,99:$Ve,100:$Vf,101:$Vg,102:$Vh,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr}),{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:261,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},o($VE1,[2,141]),{18:[1,262]},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:263,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},o($Vv,[2,8]),o($Vz,[2,18]),o($Vv,[2,9]),o($VF1,[2,25],{27:$VG1}),{18:[1,265]},o($VF1,[2,27]),o($VH1,[2,29]),{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:266,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{18:[1,267]},{17:[1,269],22:$VB1,36:268,38:212},{25:[1,270]},{27:[1,271]},{17:$VL,18:$V31,25:$VO,53:272,62:$VR,101:$VU,102:$VV,145:$VZ,146:$V_,147:$V$},{64:[1,273]},{18:[1,274]},{32:[1,275]},o($Vv1,[2,43]),{17:$VL,18:$V31,23:276,25:$VO,53:149,62:$VR,101:$VU,102:$VV,145:$VZ,146:$V_,147:$V$},o($Vv1,[2,44]),o($Vv1,[2,45]),{25:[1,277]},o($VC1,[2,51]),{17:$V41,18:$V51,56:278,62:$V61},{17:$V41,18:$V51,56:279,62:$V61},o($VI1,[2,11]),{17:[1,280]},{107:[1,281]},{105:[1,282]},o($V71,[2,99]),o($V71,[2,103]),o($VJ1,[2,145],{26:$V81,32:$V91,97:$Vi1,98:$Vj1,103:$Vk1,137:$Vn1,138:$Vo1}),o($VJ1,[2,146],{26:$V81,32:$V91,97:$Vi1,98:$Vj1,103:$Vk1,137:$Vn1,138:$Vo1}),o($VK1,[2,147],{26:$V81,32:$V91,97:$Vi1,98:$Vj1}),o($VK1,[2,148],{26:$V81,32:$V91,97:$Vi1,98:$Vj1}),o($VK1,[2,149],{26:$V81,32:$V91,97:$Vi1,98:$Vj1}),o($VL1,[2,150],{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1}),o($VL1,[2,151],{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1}),o($VL1,[2,152],{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1}),o($VL1,[2,153],{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1}),o($VM1,[2,154],{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1}),o($VM1,[2,155],{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1}),o([5,24,31,34,37,40,44,72,106,126],[2,156],{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,64:$Vh1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1,143:$Vt1,144:$Vu1}),o([5,24,31,34,37,40,44,72,106,126,144],[2,157],{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,64:$Vh1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1,143:$Vt1}),o($VN1,[2,135],{26:$V81,98:$Vj1}),o($VO1,[2,136],{26:$V81,97:$Vi1,98:$Vj1}),o($VP1,[2,36],{26:$V81,32:$V91,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1}),o($VP1,[2,37],{26:$V81,32:$V91,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1}),o($VP1,[2,38],{26:$V81,32:$V91,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1}),o($VP1,[2,39],{26:$V81,32:$V91,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1}),o($VP1,[2,40],{26:$V81,32:$V91,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1}),o($VP1,[2,41],{26:$V81,32:$V91,58:$Vg1,97:$Vi1,98:$Vj1,103:$Vk1,136:$Vm1,137:$Vn1,138:$Vo1}),o($Vv1,[2,42]),o($Vv1,[2,132]),o($Vv1,[2,143]),o($Vv1,[2,144]),o($VN1,[2,137],{26:$V81,98:$Vj1}),o($VE1,[2,142]),o($VO1,[2,138],{26:$V81,97:$Vi1,98:$Vj1}),{17:[1,284],22:$VB1,38:283},o($VF1,[2,26],{32:$VQ1}),{24:[1,286],26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,64:$Vh1,97:$Vi1,98:$Vj1,103:$Vk1,106:$Vl1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1,143:$Vt1,144:$Vu1},{32:[1,287]},o($Vz,[2,23],{27:$VG1}),{18:[1,288]},{24:[1,289]},{17:[1,291],21:290},o($VC1,[2,54]),{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:292,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{22:[1,293]},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:294,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{24:[1,295],27:$VD1},{24:[1,296],27:[1,297]},{24:[1,298]},{24:[1,299]},{18:[1,300]},{105:[1,301]},o($V71,[2,97]),o($VH1,[2,28]),{18:[1,302]},{18:[1,303],39:[1,304]},o($VH1,[2,32]),{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:305,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},o($Vz,[2,24],{32:$VQ1}),o($Vz,[2,16]),o($Vz,[2,17]),{18:[1,306]},o($Vv,[2,57],{15:307,26:$V81,32:$V91,37:$V21,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,64:$Vh1,97:$Vi1,98:$Vj1,103:$Vk1,106:$Vl1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1,143:$Vt1,144:$Vu1}),{17:$VR1,67:308,74:309},{24:[1,311],26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,64:$Vh1,97:$Vi1,98:$Vj1,103:$Vk1,106:$Vl1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1,143:$Vt1,144:$Vu1},o($Vv1,[2,50]),o($Vv1,[2,46]),{25:[1,312]},o($Vv1,[2,48]),o($Vv1,[2,49]),{19:[1,313]},o($V71,[2,93]),{32:$VQ1},o($VH1,[2,30]),{18:[1,314]},o($Vz,[2,22],{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,64:$Vh1,97:$Vi1,98:$Vj1,103:$Vk1,106:$Vl1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1,143:$Vt1,144:$Vu1}),{19:[1,315]},o($Vv,[2,56]),{24:[1,316],27:[1,317]},o($VC1,[2,60]),{18:[1,318]},{41:319,43:[1,320]},{24:[1,321]},o($VI1,[2,12]),o($VH1,[2,31]),{22:[1,322]},{68:[1,323]},{17:$VR1,74:324},{68:[1,325]},{42:326,44:[1,327]},{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:328,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},o($Vv1,[2,47]),{17:$VL,18:$V31,23:329,25:$VO,53:149,62:$VR,101:$VU,102:$VV,145:$VZ,146:$V_,147:$V$},{69:[1,330]},o($VC1,[2,59]),{69:[1,331]},o($VF1,[2,33]),{11:122,17:$VL,18:$VM,22:$VN,25:$VO,32:$VP,33:332,39:$VQ,45:121,52:$V3,53:115,54:$V4,55:$V5,57:$V6,60:$V7,62:$VR,92:116,97:$VS,98:$VT,101:$VU,102:$VV,104:$Vj,107:$Vk,108:$Vl,109:$Vm,110:$Vn,111:$Vo,113:$Vp,114:$Vq,115:$Vr,116:119,117:$VG,118:$VH,122:$VW,124:118,125:$Vy,127:110,128:111,129:112,130:113,131:114,132:117,134:$VX,135:$VY,145:$VZ,146:$V_,147:$V$},{26:$V81,32:$V91,44:[2,34],46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,64:$Vh1,97:$Vi1,98:$Vj1,103:$Vk1,106:$Vl1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1,143:$Vt1,144:$Vu1},{24:[1,333],27:$VD1},{61:[1,334]},{61:[1,335]},o($VF1,[2,35],{26:$V81,32:$V91,46:$Va1,47:$Vb1,48:$Vc1,49:$Vd1,50:$Ve1,51:$Vf1,58:$Vg1,64:$Vh1,97:$Vi1,98:$Vj1,103:$Vk1,106:$Vl1,136:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1,140:$Vq1,141:$Vr1,142:$Vs1,143:$Vt1,144:$Vu1}),o($Vz,[2,13]),{54:$VS1,70:336,75:$VT1,76:$VU1,77:$VV1},{54:$VS1,70:341,75:$VT1,76:$VU1,77:$VV1},{71:[1,342]},o($VW1,[2,62]),o($VW1,[2,63]),o($VW1,[2,64]),o($VW1,[2,65]),o($VC1,[2,61]),{6:343,7:5,8:6,9:7,10:8,11:9,12:11,16:$V0,18:[1,344],40:$V2,52:$V3,54:$V4,55:$V5,57:$V6,60:$V7,63:$V8,65:$V9},{72:[1,345]},{22:$VB,61:$VC},{73:[1,346]},o($Vv,[2,58])],
defaultActions: {52:[2,1],55:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores"); 
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 16;
break;
case 2:return 31;
break;
case 3:return 34;
break;
case 4:return 37;
break;
case 5:return  'if';
break;
case 6:return 19;
break;
case 7:return 35;
break;
case 8:return 63;
break;
case 9:return 'data';
break;
case 10:return 43;
break;
case 11:return 44;
break;
case 12:return 46;
break;
case 13:return 47;
break;
case 14:return 48;
break;
case 15:return 49;
break;
case 16:return 50;
break;
case 17:return 51;
break;
case 18:return 26;
break;
case 19:return 20;
break;
case 20:return 63;
break;
case 21:return 65;
break;
case 22:return 68;
break;
case 23:return 66;
break;
case 24:return 146;
break;
case 25:return 147;
break;
case 26:return 52;
break;
case 27:return 54;
break;
case 28:return 75;
break;
case 29:return 76;
break;
case 30:return 77;
break;
case 31:return 55;
break;
case 32:return 60;
break;
case 33:return 59;
break;
case 34:return 57;
break;
case 35:return 69;
break;
case 36:return 134;
break;
case 37:return 135;
break;
case 38:return 117;
break;
case 39:return 118;
break;
case 40:return 'comment';
break;
case 41:return 104;
break;
case 42:return 108;
break;
case 43:return 109;
break;
case 44:return 110;
break;
case 45:return 111;
break;
case 46:return 113;
break;
case 47:return 114;
break;
case 48:return 115;
break;
case 49:return 112;
break;
case 50:return 107;
break;
case 51:return 79;
break;
case 52:return 136;
break;
case 53:return 58;
break;
case 54:return 103;
break;
case 55:return 64;
break;
case 56:return 143;
break;
case 57:return 142;
break;
case 58:return 141;
break;
case 59:return 140;
break;
case 60:return 139;
break;
case 61:return 17;
break;
case 62:return 27;
break;
case 63:return 73;
break;
case 64:return 125;
break;
case 65:return 126;
break;
case 66:return 22;
break;
case 67:return 24;
break;
case 68:return 71;
break;
case 69:return 72;
break;
case 70:return 145;
break;
case 71:return 25;
break;
case 72:return 62;
break;
case 73:return 62;
break;
case 74:return 138;
break;
case 75:return 137;
break;
case 76:return 144;
break;
case 77:return 106;
break;
case 78:return 18;
break;
case 79:return 102;
break;
case 80:return 94;
break;
case 81:return 96;
break;
case 82:return 97;
break;
case 83:return 98;
break;
case 84:return 99;
break;
case 85:return 100;
break;
case 86:return 32;
break;
case 87:return 101;
break;
case 88:return 105;
break;
case 89:return 61;
break;
case 90:return 122;
break;
case 91:return 39;    
break;
case 92:
  const er = new errorGram.Error({ tipo: 'léxico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es válido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 93:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:for\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:by\b)/,/^(?:let\b)/,/^(?:data\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:let\b)/,/^(?:declare\b)/,/^(?:as\b)/,/^(?:function\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:double\b)/,/^(?:integer\b)/,/^(?:boolean\b)/,/^(?:substring\b)/,/^(?:upper\b)/,/^(?:case\b)/,/^(?:lower\b)/,/^(?:xs\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\$)/,/^(?:,)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:["m"]["o"]["d"])/,/^(?:["d"]["i"]["v"])/,/^(?:["a"]["n"]["d"])/,/^(?:["o"]["r"])/,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9_]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?::)/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_XQUERY;
exports.Parser = gramatica_XQUERY.Parser;
exports.parse = function () { return gramatica_XQUERY.parse.apply(gramatica_XQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}