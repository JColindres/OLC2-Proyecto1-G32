/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_XQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,20],$V2=[1,29],$V3=[1,9],$V4=[1,35],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,41],$Vg=[1,34],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[5,16,26,27,29,32,40,67,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,88],$Vn=[1,45],$Vo=[5,16,26,27,29,32,40,52,67,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,88],$Vp=[2,89],$Vq=[1,49],$Vr=[5,16,26,27,29,32,40,52,67,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,88,99],$Vs=[1,56],$Vt=[1,57],$Vu=[1,59],$Vv=[1,60],$Vw=[2,82],$Vx=[1,67],$Vy=[1,68],$Vz=[1,110],$VA=[1,101],$VB=[1,107],$VC=[1,114],$VD=[1,113],$VE=[1,115],$VF=[1,111],$VG=[1,112],$VH=[1,104],$VI=[1,103],$VJ=[1,105],$VK=[1,106],$VL=[1,108],$VM=[1,109],$VN=[1,122],$VO=[1,123],$VP=[1,119],$VQ=[26,29,32],$VR=[5,16,22,26,27,29,32,35,36,40,45,46,47,48,49,50,52,67,69,70,71,72,73,74,75,76,77,79,80,81,82,83,84,86,87,88,99,100,111,112,113,114,115,116,117,118],$VS=[16,76,90,91],$VT=[1,149],$VU=[1,141],$VV=[1,140],$VW=[1,151],$VX=[1,152],$VY=[1,153],$VZ=[1,154],$V_=[1,155],$V$=[1,156],$V01=[1,148],$V11=[1,150],$V21=[1,137],$V31=[1,136],$V41=[1,146],$V51=[1,135],$V61=[1,138],$V71=[1,139],$V81=[1,142],$V91=[1,143],$Va1=[1,144],$Vb1=[1,145],$Vc1=[1,147],$Vd1=[22,26,27,29,32,35,36,45,46,47,48,49,50,70,71,76,79,80,100,111,112,113,114,115,116,117,118],$Ve1=[1,164],$Vf1=[1,165],$Vg1=[5,38],$Vh1=[1,170],$Vi1=[16,19,20,27,40,70,71,74,75,77,81,82,83,84,86,87,88,90,91,95,96,99,109,110,119,120],$Vj1=[5,38,41],$Vk1=[1,214],$Vl1=[5,26,29,32,33,38,41],$Vm1=[16,19,27,40,67,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,88],$Vn1=[22,26,29,32,35,36,45,46,47,48,49,50,79,80,100,111,114,115,116,117,118],$Vo1=[22,26,29,32,35,36,45,46,47,48,49,50,76,79,80,100,111,112,113,114,115,116,117,118],$Vp1=[22,26,29,32,35,36,80,100,114,115,116,117,118],$Vq1=[22,26,29,32,80,100,116,117,118],$Vr1=[22,26,27,29,32,35,36,45,46,47,48,49,50,70,76,79,80,100,111,112,113,114,115,116,117,118],$Vs1=[22,26,27,29,32,35,36,45,46,47,48,49,50,76,79,80,100,111,112,113,114,115,116,117,118],$Vt1=[22,26,29,32,35,36,45,46,47,48,49,50,80,100,114,115,116,117,118],$Vu1=[1,230],$Vv1=[5,38,41,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FLWOR":6,"FOR":7,"HTML":8,"FOR_1":9,"FOR_2":10,"L_CONDICION":11,"RETURN":12,"IF":13,"for":14,"dolar":15,"id":16,"in":17,"at":18,"par_izq":19,"integer":20,"to":21,"par_der":22,"CONDICION":23,"WHERE":24,"ORDER":25,"where":26,"diagonal":27,"EXPR":28,"order":29,"by":30,"L_VALOR":31,"return":32,"coma":33,"VALOR":34,"menor":35,"mayor":36,"llave_izq":37,"llave_der":38,"data":39,"child":40,"if":41,"then":42,"else":43,"COMPARACION_XQUERY":44,"eq":45,"ne":46,"lt":47,"le":48,"gt":49,"ge":50,"INSTRUCCION":51,"o":52,"RUTA":53,"FILTROS":54,"ATRIBUTO_DESCENDIENTES":55,"DESCENDIENTES_NODO":56,"DESCENDIENTE":57,"PADRE":58,"ATRIBUTO_NODO":59,"HIJOS":60,"RAIZ":61,"NODO_ACTUAL":62,"PADRE_NODO":63,"ANY":64,"EJES":65,"OPC_EJES":66,"diagonal_diagonal_arroba_ast":67,"OPC":68,"diagonal_diagonal_ast":69,"doble_diagonal":70,"diagonal_dos_pts":71,"diagonal_arroba_ast":72,"diagonal_ast":73,"punto":74,"dos_pts":75,"mul":76,"ancestor":77,"bi_pto":78,"menos":79,"or":80,"self":81,"attribute":82,"descendant":83,"following":84,"sibling":85,"namespace":86,"parent":87,"preceding":88,"NODO_FUNCION":89,"node":90,"text":91,"PASOS":92,"ANY_ATRIBUTO":93,"ATRIBUTO":94,"any_atributo":95,"arroba":96,"LISTA_PREDICADO":97,"PREDICADO":98,"cor_izq":99,"cor_der":100,"ATRIBUTO_PREDICADO":101,"ARITMETICAS":102,"RELACIONALES":103,"LOGICAS":104,"ORDEN":105,"VALORES":106,"PATH":107,"OPC_PATH":108,"last":109,"position":110,"mas":111,"div":112,"mod":113,"mayor_igual":114,"menor_igual":115,"igual":116,"diferencia":117,"and":118,"double":119,"string":120,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"for",15:"dolar",16:"id",17:"in",18:"at",19:"par_izq",20:"integer",21:"to",22:"par_der",26:"where",27:"diagonal",29:"order",30:"by",32:"return",33:"coma",35:"menor",36:"mayor",37:"llave_izq",38:"llave_der",39:"data",40:"child",41:"if",42:"then",43:"else",45:"eq",46:"ne",47:"lt",48:"le",49:"gt",50:"ge",52:"o",67:"diagonal_diagonal_arroba_ast",69:"diagonal_diagonal_ast",70:"doble_diagonal",71:"diagonal_dos_pts",72:"diagonal_arroba_ast",73:"diagonal_ast",74:"punto",75:"dos_pts",76:"mul",77:"ancestor",78:"bi_pto",79:"menos",80:"or",81:"self",82:"attribute",83:"descendant",84:"following",85:"sibling",86:"namespace",87:"parent",88:"preceding",90:"node",91:"text",95:"any_atributo",96:"arroba",99:"cor_izq",100:"cor_der",109:"last",110:"position",111:"mas",112:"div",113:"mod",114:"mayor_igual",115:"menor_igual",116:"igual",117:"diferencia",118:"and",119:"double",120:"string"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[7,4],[7,4],[7,3],[9,4],[9,8],[10,1],[10,5],[11,2],[11,1],[23,1],[23,1],[24,5],[25,3],[25,4],[12,2],[12,3],[12,2],[12,2],[31,3],[31,1],[34,4],[8,10],[8,14],[8,16],[8,16],[8,11],[13,11],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[4,2],[4,1],[51,4],[51,2],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,2],[55,2],[56,2],[57,2],[58,2],[59,2],[60,2],[61,2],[62,1],[63,1],[64,1],[65,2],[65,6],[65,2],[65,2],[65,2],[65,5],[65,2],[65,4],[65,2],[65,2],[65,2],[65,4],[65,2],[66,1],[66,1],[66,1],[89,1],[89,1],[68,0],[68,1],[68,1],[92,1],[92,1],[93,1],[94,2],[54,0],[54,1],[97,2],[97,1],[98,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,2],[28,1],[28,1],[28,1],[28,3],[28,1],[107,3],[107,3],[107,3],[107,3],[107,2],[107,1],[108,1],[108,2],[105,3],[105,3],[102,3],[102,3],[102,3],[102,3],[102,3],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[104,3],[104,3],[101,2],[101,1],[101,2],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:5,8:6,9:8,14:$V0,16:$V1,27:$V2,35:$V3,40:$V4,51:4,53:7,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:17,63:18,64:19,65:21,67:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl},{1:[3]},{5:[1,42],16:$V1,27:$V2,40:$V4,51:43,53:7,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:17,63:18,64:19,65:21,67:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl},{5:[1,44]},o($Vm,[2,39],{52:$Vn}),{5:[2,3]},{5:[2,4]},o($Vo,$Vp,{54:46,97:47,98:48,99:$Vq}),{4:51,10:50,16:$V1,19:[1,52],27:$V2,40:$V4,51:4,53:7,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:17,63:18,64:19,65:21,67:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl},{16:[1,53],40:[1,54]},o($Vr,[2,42]),o($Vr,[2,43]),o($Vr,[2,44]),o($Vr,[2,45]),o($Vr,[2,46]),o($Vr,[2,47]),o($Vr,[2,48]),o($Vr,[2,49]),o($Vr,[2,50]),o($Vr,[2,51]),o($Vr,[2,52]),{16:$Vs,66:55,76:$Vt,89:58,90:$Vu,91:$Vv},{15:[1,61]},o($Vr,$Vw,{68:62,89:63,92:64,93:65,94:66,90:$Vu,91:$Vv,95:$Vx,96:$Vy}),o($Vr,$Vw,{89:63,92:64,93:65,94:66,68:69,90:$Vu,91:$Vv,95:$Vx,96:$Vy}),o($Vr,$Vw,{89:63,92:64,93:65,94:66,68:70,90:$Vu,91:$Vv,95:$Vx,96:$Vy}),o($Vr,$Vw,{89:63,92:64,93:65,94:66,68:71,90:$Vu,91:$Vv,95:$Vx,96:$Vy}),o($Vr,$Vw,{89:63,92:64,93:65,94:66,68:72,90:$Vu,91:$Vv,95:$Vx,96:$Vy}),o($Vr,$Vw,{89:63,92:64,93:65,94:66,68:73,90:$Vu,91:$Vv,95:$Vx,96:$Vy}),o($Vr,$Vw,{89:63,92:64,93:65,94:66,68:74,90:$Vu,91:$Vv,95:$Vx,96:$Vy}),o($Vr,[2,61]),o($Vr,[2,62]),o($Vr,[2,63]),{78:[1,75],79:[1,76]},{78:[1,77]},{78:[1,78]},{78:[1,79],79:[1,80]},{78:[1,81],79:[1,82]},{78:[1,83]},{78:[1,84]},{78:[1,85],79:[1,86]},{78:[1,87]},{1:[2,1]},o($Vm,[2,38],{52:$Vn}),{1:[2,2]},{16:$V1,27:$V2,40:$V4,53:88,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:17,63:18,64:19,65:21,67:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl},o($Vo,[2,41]),o($Vo,[2,90],{98:89,99:$Vq}),o($Vr,[2,92]),{16:$Vz,19:$VA,20:$VB,27:$VC,28:90,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{11:116,12:117,23:118,24:120,25:121,26:$VN,29:$VO,32:$VP},o($VQ,[2,10],{53:7,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:17,63:18,64:19,65:21,51:43,16:$V1,27:$V2,40:$V4,67:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl}),{20:[1,124]},{36:[1,125]},{36:[1,126]},o($Vr,[2,53]),o($VR,[2,77]),o($VR,[2,78]),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),{16:[1,127]},o($Vr,[2,54]),o($VR,[2,83]),o($VR,[2,84]),o($VR,[2,85]),o($VR,[2,86]),o($VR,[2,87]),{16:[1,128]},o($Vr,[2,55]),o($Vr,[2,56]),o($Vr,[2,57]),o($Vr,[2,58]),o($Vr,[2,59]),o($Vr,[2,60]),o($VS,[2,64]),{80:[1,129]},o($VS,[2,66]),o($VS,[2,67]),o($VS,[2,68]),{80:[1,130]},o($VS,[2,70]),{85:[1,131]},o($VS,[2,72]),o($VS,[2,73]),o($VS,[2,74]),{85:[1,132]},o($VS,[2,76]),o($Vo,$Vp,{97:47,98:48,54:133,99:$Vq}),o($Vr,[2,91]),{27:$VT,35:$VU,36:$VV,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,80:$V41,100:[1,134],111:$V51,112:$V61,113:$V71,114:$V81,115:$V91,116:$Va1,117:$Vb1,118:$Vc1},o($Vd1,[2,94]),o($Vd1,[2,95]),o($Vd1,[2,96]),o($Vd1,[2,97]),o($Vd1,[2,98]),o($Vd1,[2,99]),{16:$Vs,66:157,76:$Vt,89:58,90:$Vu,91:$Vv},o($Vd1,[2,101]),o($Vd1,[2,102]),o($Vd1,[2,103]),{16:$Vz,19:$VA,20:$VB,27:$VC,28:158,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},o($Vd1,[2,105]),o($Vd1,$Vw,{89:63,92:64,93:65,94:66,68:159,16:[1,160],90:$Vu,91:$Vv,95:$Vx,96:$Vy}),o($Vd1,[2,130]),{19:[1,161]},{19:[1,162]},o($Vd1,[2,132]),o($Vd1,[2,133]),o($Vd1,[2,134]),o($Vd1,[2,135]),o($Vd1,[2,136]),o($Vd1,[2,137]),{16:$Ve1,96:$Vf1,108:163},{16:$Ve1,96:$Vf1,108:166},o($Vd1,[2,111]),{12:167,23:168,24:120,25:121,26:$VN,29:$VO,32:$VP},o($Vg1,[2,7],{13:169,41:$Vh1}),o($VQ,[2,13]),{8:173,13:174,15:[1,172],31:171,34:175,35:$V3,41:$Vh1},o($VQ,[2,14]),o($VQ,[2,15]),{15:[1,176]},{30:[1,177]},{21:[1,178]},{37:[1,179]},{37:[1,180]},{17:[1,181]},o($VR,[2,88]),{79:[1,182]},{81:[1,183]},{78:[1,184]},{78:[1,185]},o($Vo,[2,40]),o($VR,[2,93]),{16:$Vz,19:$VA,20:$VB,27:$VC,28:186,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:187,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:188,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:189,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:190,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:191,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:192,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:193,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:194,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:195,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:196,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:197,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:198,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:199,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:200,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},o($Vd1,[2,110]),{16:$Vz,19:$VA,20:$VB,27:$VC,28:201,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:202,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:203,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:204,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:205,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:$Vz,19:$VA,20:$VB,27:$VC,28:206,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},o($Vd1,[2,100]),{22:[1,207],27:$VT,35:$VU,36:$VV,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,80:$V41,111:$V51,112:$V61,113:$V71,114:$V81,115:$V91,116:$Va1,117:$Vb1,118:$Vc1},o($Vd1,[2,129]),o($Vd1,[2,131]),{22:[1,208]},{22:[1,209]},{16:$Vz,19:$VA,20:$VB,27:$VC,28:210,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},o($Vi1,[2,112]),{16:[1,211]},{16:$Vz,19:$VA,20:$VB,27:$VC,28:212,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},o($Vg1,[2,5]),o($VQ,[2,12]),o($Vg1,[2,6]),{19:[1,213]},o($Vj1,[2,19],{33:$Vk1}),{16:[1,215]},o($Vj1,[2,21]),o($Vj1,[2,22]),o($Vl1,[2,24]),{16:[1,216]},{15:[1,218],31:217,34:175},{20:[1,219]},{7:220,9:8,14:$V0,15:[1,222],39:[1,221]},{39:[1,223]},o($Vm1,[2,8],{18:[1,224]}),{81:[1,225]},{78:[1,226]},o($VS,[2,71]),o($VS,[2,75]),o($Vn1,[2,116],{27:$VT,70:$V01,71:$V11,76:$V21,112:$V61,113:$V71}),o($Vn1,[2,117],{27:$VT,70:$V01,71:$V11,76:$V21,112:$V61,113:$V71}),o($Vo1,[2,118],{27:$VT,70:$V01,71:$V11}),o($Vo1,[2,119],{27:$VT,70:$V01,71:$V11}),o($Vo1,[2,120],{27:$VT,70:$V01,71:$V11}),o($Vp1,[2,121],{27:$VT,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71}),o($Vp1,[2,122],{27:$VT,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71}),o($Vp1,[2,123],{27:$VT,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71}),o($Vp1,[2,124],{27:$VT,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71}),o($Vq1,[2,125],{27:$VT,35:$VU,36:$VV,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71,114:$V81,115:$V91}),o($Vq1,[2,126],{27:$VT,35:$VU,36:$VV,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71,114:$V81,115:$V91}),o([22,26,29,32,80,100],[2,127],{27:$VT,35:$VU,36:$VV,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71,114:$V81,115:$V91,116:$Va1,117:$Vb1,118:$Vc1}),o([22,26,29,32,80,100,118],[2,128],{27:$VT,35:$VU,36:$VV,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71,114:$V81,115:$V91,116:$Va1,117:$Vb1}),o($Vr1,[2,106],{71:$V11}),o($Vs1,[2,107],{70:$V01,71:$V11}),o($Vt1,[2,32],{27:$VT,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71}),o($Vt1,[2,33],{27:$VT,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71}),o($Vt1,[2,34],{27:$VT,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71}),o($Vt1,[2,35],{27:$VT,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71}),o($Vt1,[2,36],{27:$VT,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71}),o($Vt1,[2,37],{27:$VT,70:$V01,71:$V11,76:$V21,79:$V31,111:$V51,112:$V61,113:$V71}),o($Vd1,[2,104]),o($Vd1,[2,114]),o($Vd1,[2,115]),o($Vr1,[2,108],{71:$V11}),o($Vi1,[2,113]),o($Vs1,[2,109],{70:$V01,71:$V11}),{15:[1,227]},{15:[1,229],34:228},o($Vj1,[2,20],{27:$Vu1}),{27:[1,231]},o($VQ,[2,17],{33:$Vk1}),{16:[1,232]},{22:[1,233]},{38:[1,234]},{19:[1,235]},{16:[1,236]},{19:[1,237]},{15:[1,238]},{78:[1,239]},o($VS,[2,69]),{16:[1,240]},o($Vl1,[2,23]),{16:[1,241]},{16:[1,242]},{16:$Vz,19:$VA,20:$VB,27:$VC,28:243,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},o($VQ,[2,18],{27:$Vu1}),o($VQ,[2,11]),{35:[1,244]},{15:[1,245]},{38:[1,246]},{15:[1,247]},{16:[1,248]},o($VS,[2,65]),{27:[1,249]},{27:$Vu1},o($Vl1,[2,25]),o($VQ,[2,16],{27:$VT,35:$VU,36:$VV,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,80:$V41,111:$V51,112:$V61,113:$V71,114:$V81,115:$V91,116:$Va1,117:$Vb1,118:$Vc1}),{27:[1,250]},{16:[1,251]},{35:[1,252]},{16:[1,253]},{17:[1,254]},{16:$Vz,19:$VA,20:$VB,27:$VC,28:255,40:$V4,44:102,65:97,70:$VD,71:$VE,74:$VF,75:$VG,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,86:$Vj,87:$Vk,88:$Vl,89:100,90:$Vu,91:$Vv,95:$VH,96:$VI,98:99,99:$Vq,101:91,102:92,103:93,104:94,105:95,106:96,107:98,109:$VJ,110:$VK,119:$VL,120:$VM},{16:[1,256]},{22:[1,257],27:[1,258]},{27:[1,259]},{27:[1,260]},o($Vm1,[2,9]),{22:[1,261],27:$VT,35:$VU,36:$VV,45:$VW,46:$VX,47:$VY,48:$VZ,49:$V_,50:$V$,70:$V01,71:$V11,76:$V21,79:$V31,80:$V41,111:$V51,112:$V61,113:$V71,114:$V81,115:$V91,116:$Va1,117:$Vb1,118:$Vc1},{36:[1,262]},{38:[1,263]},{16:[1,264]},{16:[1,265]},{16:[1,266]},{42:[1,267]},o($Vv1,[2,26]),{35:[1,268]},{22:[1,269]},{36:[1,270]},{22:[1,271]},{8:272,35:$V3},{27:[1,273]},{38:[1,274]},o($Vv1,[2,30]),{38:[1,275]},{43:[1,276]},{16:[1,277]},{35:[1,278]},{35:[1,279]},{8:280,35:$V3},{36:[1,281]},{27:[1,282]},{27:[1,283]},o($Vj1,[2,31]),o($Vv1,[2,27]),{16:[1,284]},{40:[1,285]},{36:[1,286]},{36:[1,287]},o($Vv1,[2,28]),o($Vv1,[2,29])],
defaultActions: {5:[2,3],6:[2,4],42:[2,1],44:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

   /* const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores"); */
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 14;
break;
case 2:return 26;
break;
case 3:return 29;
break;
case 4:return  'if';
break;
case 5:return 17;
break;
case 6:return 30;
break;
case 7:return 'let';
break;
case 8:return 39;
break;
case 9:return 42;
break;
case 10:return 43;
break;
case 11:return 45;
break;
case 12:return 46;
break;
case 13:return 47;
break;
case 14:return 48;
break;
case 15:return 49;
break;
case 16:return 50;
break;
case 17:return 21;
break;
case 18:return 18;
break;
case 19:return 'let';
break;
case 20:return 'declare';
break;
case 21:return 'as';
break;
case 22:return 'function';
break;
case 23:return 109;
break;
case 24:return 110;
break;
case 25:return 90;
break;
case 26:return 91;
break;
case 27:return 'comment';
break;
case 28:return 77;
break;
case 29:return 82;
break;
case 30:return 40;
break;
case 31:return 83;
break;
case 32:return 84;
break;
case 33:return 86;
break;
case 34:return 87;
break;
case 35:return 88;
break;
case 36:return 85;
break;
case 37:return 81;
break;
case 38:return 52;
break;
case 39:return 111;
break;
case 40:return 79;
break;
case 41:return 76;
break;
case 42:return 116;
break;
case 43:return 117;
break;
case 44:return 115;
break;
case 45:return 114;
break;
case 46:return 35;
break;
case 47:return 36;
break;
case 48:return 15;
break;
case 49:return 33;
break;
case 50:return 99;
break;
case 51:return 100;
break;
case 52:return 19;
break;
case 53:return 22;
break;
case 54:return 37;
break;
case 55:return 38;
break;
case 56:return 119;
break;
case 57:return 20;
break;
case 58:return 120;
break;
case 59:return 120;
break;
case 60:return 32;
break;
case 61:return 113;
break;
case 62:return 112;
break;
case 63:return 118;
break;
case 64:return 80;
break;
case 65:return 16;
break;
case 66:return 75;
break;
case 67:return 67;
break;
case 68:return 69;
break;
case 69:return 70;
break;
case 70:return 71;
break;
case 71:return 72;
break;
case 72:return 73;
break;
case 73:return 27;
break;
case 74:return 74;
break;
case 75:return 78;
break;
case 76:return 'doble_pto';
break;
case 77:return 95;
break;
case 78:return 96;    
break;
case 79:
  /*const er = new errorGram.Error({ tipo: 'léxico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es válido.` });
  tablaErrores.Errores.getInstance().push(er);*/

break;
case 80:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:for\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:by\b)/,/^(?:let\b)/,/^(?:data\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:let\b)/,/^(?:declare\b)/,/^(?:as\b)/,/^(?:function\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\$)/,/^(?:,)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:["r"]["e"]["t"]["u"]["r"]["n"])/,/^(?:["m"]["o"]["d"])/,/^(?:["d"]["i"]["v"])/,/^(?:["a"]["n"]["d"])/,/^(?:["o"]["r"])/,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9_]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?::)/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_XQUERY;
exports.Parser = gramatica_XQUERY.Parser;
exports.parse = function () { return gramatica_XQUERY.parse.apply(gramatica_XQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}