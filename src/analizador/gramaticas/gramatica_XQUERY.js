/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_XQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,32],$V1=[1,39],$V2=[1,14],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,12],$V9=[1,13],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,51],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,54],$Vt=[5,18,24,26,27,31,32,34,37,40,44,45,47,48,49,50,51,52,59,65,73,92,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,111,112,113,124,134,135,136,137,138,139,140,141,142],$Vu=[1,56],$Vv=[5,73],$Vw=[5,18,24,26,27,31,32,34,37,40,44,45,47,48,49,50,51,52,59,65,73,77,92,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,111,112,113,124,134,135,136,137,138,139,140,141,142],$Vx=[2,118],$Vy=[1,60],$Vz=[31,34,37],$VA=[1,92],$VB=[1,87],$VC=[1,84],$VD=[1,94],$VE=[1,80],$VF=[1,86],$VG=[1,93],$VH=[1,95],$VI=[1,88],$VJ=[1,89],$VK=[1,96],$VL=[1,97],$VM=[1,81],$VN=[1,82],$VO=[1,83],$VP=[1,85],$VQ=[1,90],$VR=[1,91],$VS=[2,81],$VT=[1,98],$VU=[1,99],$VV=[5,18,24,26,27,31,32,34,37,40,44,45,47,48,49,50,51,52,59,65,73,77,92,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,111,112,113,123,124,134,135,136,137,138,139,140,141,142],$VW=[1,106],$VX=[1,107],$VY=[2,111],$VZ=[1,116],$V_=[1,115],$V$=[1,139],$V01=[1,146],$V11=[1,147],$V21=[1,143],$V31=[1,178],$V41=[1,170],$V51=[1,179],$V61=[1,172],$V71=[1,173],$V81=[1,174],$V91=[1,175],$Va1=[1,176],$Vb1=[1,177],$Vc1=[1,157],$Vd1=[1,165],$Ve1=[1,169],$Vf1=[1,171],$Vg1=[1,158],$Vh1=[1,167],$Vi1=[1,156],$Vj1=[1,159],$Vk1=[1,160],$Vl1=[1,161],$Vm1=[1,162],$Vn1=[1,163],$Vo1=[1,164],$Vp1=[1,166],$Vq1=[1,168],$Vr1=[5,24,26,27,31,32,34,37,40,44,45,47,48,49,50,51,52,59,65,73,95,96,101,104,124,134,135,136,137,138,139,140,141,142],$Vs1=[2,162],$Vt1=[2,165],$Vu1=[1,187],$Vv1=[1,188],$Vw1=[1,193],$Vx1=[1,196],$Vy1=[1,198],$Vz1=[1,197],$VA1=[18,101,115,116],$VB1=[1,216],$VC1=[1,221],$VD1=[24,27],$VE1=[1,228],$VF1=[17,18,22,25,32,39,53,55,56,58,61,63,95,96,99,100,102,105,106,107,108,109,111,112,113,115,116,120,123,132,133,143,144,145],$VG1=[5,40,73],$VH1=[1,271],$VI1=[5,27,31,34,37,40,73],$VJ1=[1,284],$VK1=[5,24,27,31,34,37,40,44,45,47,48,49,50,51,52,59,65,73,104,124,134,137,138,139,140,141,142],$VL1=[5,24,27,31,34,37,40,44,45,47,48,49,50,51,52,59,65,73,101,104,124,134,135,136,137,138,139,140,141,142],$VM1=[5,24,27,31,34,37,40,44,45,65,73,104,124,137,138,139,140,141,142],$VN1=[5,24,27,31,34,37,40,44,45,65,73,104,124,141,142],$VO1=[5,24,27,31,32,34,37,40,44,45,47,48,49,50,51,52,59,65,73,95,101,104,124,134,135,136,137,138,139,140,141,142],$VP1=[5,24,27,31,32,34,37,40,44,45,47,48,49,50,51,52,59,65,73,101,104,124,134,135,136,137,138,139,140,141,142],$VQ1=[5,24,27,31,34,37,40,44,45,47,48,49,50,51,52,65,73,104,124,137,138,139,140,141,142],$VR1=[18,22,31,32,34,37,92,94,95,96,97,98,99,100,101,102,105,106,107,108,109,111,112,113],$VS1=[1,296],$VT1=[1,322],$VU1=[1,348];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FLWOR":6,"FOR":7,"LET":8,"FUNCION":9,"IF":10,"LLAMADA_FUNCION":11,"FOR_1":12,"FOR_2":13,"L_CONDICION":14,"RETURN":15,"for":16,"dolar":17,"id":18,"in":19,"at":20,"FOR_P":21,"par_izq":22,"L_PARAM":23,"par_der":24,"integer":25,"to":26,"coma":27,"CONDICION":28,"WHERE":29,"ORDER":30,"where":31,"diagonal":32,"EXPR":33,"order":34,"by":35,"L_VALOR":36,"return":37,"VALOR":38,"arroba":39,"if":40,"THEN":41,"ELSE":42,"ELSE_IF":43,"else":44,"then":45,"COMPARACION_XQUERY":46,"eq":47,"ne":48,"lt":49,"le":50,"gt":51,"ge":52,"number":53,"VALORES":54,"tk_string":55,"substring":56,"VALOR_LLAMADA":57,"lower":58,"menos":59,"case":60,"upper":61,"doble_pto":62,"string":63,"let":64,"igual":65,"declare":66,"function":67,"PARAMETROS":68,"as":69,"xs":70,"TIPO":71,"llave_izq":72,"llave_der":73,"pto_coma":74,"PARAM":75,"INSTRUCCION":76,"o":77,"RUTA":78,"FILTROS":79,"ATRIBUTO_DESCENDIENTES":80,"DESCENDIENTES_NODO":81,"DESCENDIENTE":82,"PADRE":83,"ATRIBUTO_NODO":84,"HIJOS":85,"RAIZ":86,"NODO_ACTUAL":87,"PADRE_NODO":88,"ANY":89,"EJES":90,"OPC_EJES":91,"diagonal_diagonal_arroba_ast":92,"OPC":93,"diagonal_diagonal_ast":94,"doble_diagonal":95,"diagonal_dos_pts":96,"diagonal_arroba_ast":97,"diagonal_ast":98,"punto":99,"dos_pts":100,"mul":101,"ancestor":102,"bi_pto":103,"or":104,"self":105,"attribute":106,"child":107,"descendant":108,"following":109,"sibling":110,"namespace":111,"parent":112,"preceding":113,"NODO_FUNCION":114,"node":115,"text":116,"PASOS":117,"ANY_ATRIBUTO":118,"ATRIBUTO":119,"any_atributo":120,"LISTA_PREDICADO":121,"PREDICADO":122,"cor_izq":123,"cor_der":124,"ATRIBUTO_PREDICADO":125,"ARITMETICAS":126,"RELACIONALES":127,"LOGICAS":128,"ORDEN":129,"PATH":130,"OPC_PATH":131,"last":132,"position":133,"mas":134,"div":135,"mod":136,"mayor":137,"menor":138,"mayor_igual":139,"menor_igual":140,"diferencia":141,"and":142,"double":143,"true":144,"false":145,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"for",17:"dolar",18:"id",19:"in",20:"at",22:"par_izq",24:"par_der",25:"integer",26:"to",27:"coma",31:"where",32:"diagonal",34:"order",35:"by",37:"return",39:"arroba",40:"if",44:"else",45:"then",47:"eq",48:"ne",49:"lt",50:"le",51:"gt",52:"ge",53:"number",55:"tk_string",56:"substring",58:"lower",59:"menos",60:"case",61:"upper",62:"doble_pto",63:"string",64:"let",65:"igual",66:"declare",67:"function",69:"as",70:"xs",72:"llave_izq",73:"llave_der",74:"pto_coma",77:"o",92:"diagonal_diagonal_arroba_ast",94:"diagonal_diagonal_ast",95:"doble_diagonal",96:"diagonal_dos_pts",97:"diagonal_arroba_ast",98:"diagonal_ast",99:"punto",100:"dos_pts",101:"mul",102:"ancestor",103:"bi_pto",104:"or",105:"self",106:"attribute",107:"child",108:"descendant",109:"following",110:"sibling",111:"namespace",112:"parent",113:"preceding",115:"node",116:"text",120:"any_atributo",123:"cor_izq",124:"cor_der",132:"last",133:"position",134:"mas",135:"div",136:"mod",137:"mayor",138:"menor",139:"mayor_igual",140:"menor_igual",141:"diferencia",142:"and",143:"double",144:"true",145:"false"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,4],[7,3],[12,4],[12,7],[21,6],[13,0],[13,1],[13,5],[13,5],[14,2],[14,1],[28,1],[28,1],[29,5],[30,3],[30,4],[15,2],[15,3],[15,2],[36,3],[36,1],[38,4],[38,5],[38,3],[10,9],[10,10],[10,4],[10,5],[43,4],[41,2],[42,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[11,4],[11,4],[11,4],[11,6],[11,8],[11,6],[11,6],[11,6],[57,2],[57,1],[57,1],[23,3],[23,1],[8,7],[8,6],[9,16],[68,3],[68,1],[75,6],[71,1],[4,2],[4,1],[76,4],[76,2],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,2],[80,2],[81,2],[82,2],[83,2],[84,2],[85,2],[86,2],[87,1],[88,1],[89,1],[90,2],[90,6],[90,2],[90,2],[90,2],[90,5],[90,2],[90,4],[90,2],[90,2],[90,2],[90,4],[90,2],[91,1],[91,1],[91,1],[114,1],[114,1],[93,0],[93,1],[93,1],[117,1],[117,1],[118,1],[119,2],[79,0],[79,1],[121,2],[121,1],[122,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2],[33,1],[33,1],[33,1],[33,3],[33,1],[33,1],[130,3],[130,3],[130,3],[130,3],[130,2],[130,1],[131,1],[131,2],[129,3],[129,3],[126,3],[126,3],[126,3],[126,3],[126,3],[127,3],[127,3],[127,3],[127,3],[127,3],[127,3],[128,3],[128,3],[125,2],[125,1],[125,2],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'XQUERY', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 return new NodoAST({label: 'XQUERY', hijos: [...$$[$0-1].hijos], linea: yylineno}); 
break;
case 3: case 4: case 5: case 6: case 7:
 this.$ = new NodoAST({label: 'FLWOR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 8:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 9:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-3].hijos,...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 10:
 this.$ = new NodoAST({label: 'FOR', hijos: [...$$[$0-2].hijos,...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 11:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 12:
 this.$ = new NodoAST({label: 'FOR_1', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-3],($$[$0-2]+$$[$0-1]),$$[$0]], linea: yylineno}); 
break;
case 13:
 this.$ = new NodoAST({label: 'FOR_P', hijos: [($$[$0-5]+$$[$0-4]),...$$[$0-1].hijos], linea: yylineno}); 
break;
case 14:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [], linea: yylineno}); 
break;
case 15:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0]], linea: yylineno}); 
break;
case 16:
 this.$ = new NodoAST({label: 'FOR', hijos: [$$[$0-3],$$[$0-2],$$[$0-1]], linea: yylineno}); 
break;
case 17:
 this.$ = new NodoAST({label: 'FOR_2', hijos: [$$[$0-3],$$[$0]], linea: yylineno}); 
break;
case 18:
 this.$ = new NodoAST({label: 'LCONDICION', hijos: [...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 19:
 this.$ = new NodoAST({label: 'L_CONDICION', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 20:
 this.$ = new NodoAST({label: 'WHERE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 21:
 this.$ = new NodoAST({label: 'ORDER', hijos: [$$[$0]], linea: yylineno}); 
break;
case 22:
 this.$ = new NodoAST({label: 'WHERE', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 23:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'ORDER BY', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'RETURN', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 26:
 this.$ = new NodoAST({label: 'RETURN', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 27:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 28:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 29:
 this.$ = new NodoAST({label: 'L_VALOR', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 30:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-3]+$$[$0-2]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 31:
 this.$ = new NodoAST({label: 'VALOR', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 32:
 this.$ = new NodoAST({label: 'VALOR', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 33:
 this.$ = new NodoAST({label: 'IF', hijos: [($$[$0-6]+$$[$0-5]),$$[$0-4],...$$[$0-3].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 34:
 this.$ = new NodoAST({label: 'IF', hijos: [($$[$0-7]+$$[$0-6]),$$[$0-5],...$$[$0-4].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 35:
 this.$ = new NodoAST({label: 'IF', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 36:
 this.$ = new NodoAST({label: 'IF', hijos: [...$$[$0-3].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 37:
 this.$ = new NodoAST({label: 'ELSE_IF', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 38:
 this.$ = new NodoAST({label: 'THEN', hijos: [...$$[$0].hijos,], linea: yylineno}); 
break;
case 39:
 this.$ = new NodoAST({label: 'ELSE', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 40:
 this.$ = new NodoAST({label: 'eq', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 41:
 this.$ = new NodoAST({label: 'ne', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 42:
 this.$ = new NodoAST({label: 'lt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 43:
 this.$ = new NodoAST({label: 'le', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 44:
 this.$ = new NodoAST({label: 'gt', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 45:
 this.$ = new NodoAST({label: 'ge', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 46:
 this.$ = new NodoAST({label: 'to', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 47:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 48:
 this.$ = new NodoAST({label: 'F_NUMBER', hijos: [$$[$0-3],...$$[$0-1].hijos], linea: yylineno}); 
break;
case 49:
 this.$ = new NodoAST({label: 'F_STRING', hijos: [$$[$0-3],...$$[$0-1].hijos], linea: yylineno}); 
break;
case 50:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [...$$[$0-3].hijos,$$[$0-1]], linea: yylineno}); 
break;
case 51:
 this.$ = new NodoAST({label: 'F_SUBSTRING', hijos: [...$$[$0-5].hijos,$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 52:
 this.$ = new NodoAST({label: 'F_LOWERCASE', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 53:
 this.$ = new NodoAST({label: 'F_UPPERCASE', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 54:
 this.$ = new NodoAST({label: 'F_LLAMADA', hijos: [$$[$0-5],$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 55:
 this.$ = new NodoAST({label: 'dolar id', hijos: [($$[$0-1]+$$[$0])], linea: yylineno}); 
break;
case 56: case 164:
 this.$ = new NodoAST({label: 'string', hijos: [$$[$0]], linea: yylineno}); 
break;
case 57: case 165:
 this.$ = new NodoAST({label: 'id', hijos: [$$[$0]], linea: yylineno}); 
break;
case 58: case 63:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0-2].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 59: case 64:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 60:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 61:
 this.$ = new NodoAST({label: 'LET', hijos: [($$[$0-4]+$$[$0-3]),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 62:
 this.$ = new NodoAST({label: 'FUNCION', hijos: [$$[$0-13],$$[$0-11],$$[$0-9],$$[$0-4],$$[$0-2]], linea: yylineno}); 
break;
case 65:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [($$[$0-5]+$$[$0-4]),$$[$0-2],...$$[$0].hijos], linea: yylineno}); 
break;
case 66:

             if ($$[$0] == 'string'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
             else if ($$[$0] == 'boolean'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
            else if ($$[$0] == 'integer'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
            else if ($$[$0] == 'double'){
                 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); }  
            else{
                 tablaErrores.Errores.getInstance().push(new errorGram.Error({ tipo: 'Semántico', linea: `${yylineno + 1}`, descripcion: `No es un tipo valido "${$$[$0]}"  Columna: ${this._$.first_column + 1}.`}));
             }
        
break;
case 67:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 68:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 69:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-3].hijos, $$[$0-2], ...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 70:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 82:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 83:
 this.$ = new NodoAST({label: 'ATRIBUTO_DESCENDIENTES', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 84: case 85:
 this.$ = new NodoAST({label: 'DESCENDIENTES_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 86:
 this.$ = new NodoAST({label: 'PADRE', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 87:
 this.$ = new NodoAST({label: 'ATRIBUTO_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 88:
 this.$ = new NodoAST({label: 'HIJOS', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 89:
 this.$ = new NodoAST({label: 'RAIZ', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 90:
 this.$ = new NodoAST({label: 'NODO_ACTUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 91:
 this.$ = new NodoAST({label: 'PADRE_NODO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 92:
 this.$ = new NodoAST({label: 'ANY', hijos: [$$[$0]], linea: yylineno}); 
break;
case 93: case 95: case 96: case 97: case 99: case 101: case 102: case 103: case 105:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-5], $$[$0-4]], linea: yylineno}); 
break;
case 98:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-4], $$[$0-3]], linea: yylineno}); 
break;
case 100: case 104:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-3], $$[$0-2]], linea: yylineno}); 
break;
case 106: case 107: case 108:
 this.$ = new NodoAST({label: 'OPC_EJES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 109: case 110:
 this.$ = new NodoAST({label: 'NODO_FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 111:
 this.$ = new NodoAST({label: 'OPC', hijos: [], linea: yylineno}); 
break;
case 112: case 113:
 this.$ = new NodoAST({label: 'OPC', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 114: case 115:
 this.$ = new NodoAST({label: 'PASOS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 116:
 this.$ = new NodoAST({label: 'ANY_ATRIBUTO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 117:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 118:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [], linea: yylineno}); 
break;
case 119:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 120:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 121:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 122:
 this.$ = new NodoAST({label: 'PREDICADO', hijos: [$$[$0-2], ...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 123: case 124: case 125: case 126: case 127: case 128: case 130: case 131: case 132: case 134: case 135:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 129:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 133:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 136: case 137:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 138: case 139:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0-2],...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 140:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-1].hijos,$$[$0],$$[$01]], linea: yylineno}); 
break;
case 141:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 142:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 143:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 144: case 145:
 this.$ = new NodoAST({label: 'ORDEN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 146: case 147: case 148: case 149: case 150:
 this.$ = new NodoAST({label: 'ARITMETICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 151: case 152: case 153: case 154: case 155: case 156:
 this.$ = new NodoAST({label: 'RELACIONALES', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 157: case 158:
 this.$ = new NodoAST({label: 'LOGICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 159:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 160:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 161:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 162:
 this.$ = new NodoAST({label: 'integer', hijos: [$$[$0]], linea: yylineno}); 
break;
case 163:
 this.$ = new NodoAST({label: 'double', hijos: [$$[$0]], linea: yylineno}); 
break;
case 166:
 this.$ = new NodoAST({label: 'punto', hijos: [$$[$0]], linea: yylineno}); 
break;
case 167:
 this.$ = new NodoAST({label: 'dos_pts', hijos: [$$[$0]], linea: yylineno}); 
break;
case 168: case 169:
 this.$ = new NodoAST({label: 'boolean', hijos: [$$[$0]], linea: yylineno}); 
break;
case 170:
 this.$ = new NodoAST({label: 'xquery', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:11,16:$V0,18:[1,15],32:$V1,40:$V2,53:$V3,55:$V4,56:$V5,58:$V6,61:$V7,64:$V8,66:$V9,76:4,78:10,80:21,81:22,82:23,83:24,84:25,85:26,86:27,87:28,88:29,89:30,90:31,92:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr},{1:[3]},{5:[1,52],18:$Vs,32:$V1,76:53,78:10,80:21,81:22,82:23,83:24,84:25,85:26,86:27,87:28,88:29,89:30,90:31,92:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr},{5:[1,55]},o($Vt,[2,68],{77:$Vu}),o($Vv,[2,3]),o($Vv,[2,4]),o($Vv,[2,5]),o($Vv,[2,6]),o($Vv,[2,7]),o($Vw,$Vx,{79:57,121:58,122:59,123:$Vy}),o($Vz,[2,14],{76:4,78:10,80:21,81:22,82:23,83:24,84:25,85:26,86:27,87:28,88:29,89:30,90:31,13:61,4:62,18:$Vs,22:[1,63],32:$V1,92:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr}),{17:[1,64]},{67:[1,65]},{11:79,17:$VA,18:$VB,22:[1,66],25:$VC,32:$VD,33:67,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},o([5,18,32,77,92,94,95,96,97,98,99,100,101,102,105,106,107,108,109,111,112,113,123],$VS,{22:$VT,62:$VU}),{22:[1,100]},{22:[1,101]},{22:[1,102]},{59:[1,103]},{59:[1,104]},o($VV,[2,71]),o($VV,[2,72]),o($VV,[2,73]),o($VV,[2,74]),o($VV,[2,75]),o($VV,[2,76]),o($VV,[2,77]),o($VV,[2,78]),o($VV,[2,79]),o($VV,[2,80]),{18:$VW,91:105,101:$VX,114:108,115:$VK,116:$VL},{17:[1,109]},o($VV,$VY,{93:110,114:111,117:112,118:113,119:114,39:$VZ,115:$VK,116:$VL,120:$V_}),o($VV,$VY,{114:111,117:112,118:113,119:114,93:117,39:$VZ,115:$VK,116:$VL,120:$V_}),o($VV,$VY,{114:111,117:112,118:113,119:114,93:118,39:$VZ,115:$VK,116:$VL,120:$V_}),o($VV,$VY,{114:111,117:112,118:113,119:114,93:119,39:$VZ,115:$VK,116:$VL,120:$V_}),o($VV,$VY,{114:111,117:112,118:113,119:114,93:120,39:$VZ,115:$VK,116:$VL,120:$V_}),o($VV,$VY,{114:111,117:112,118:113,119:114,93:121,39:$VZ,115:$VK,116:$VL,120:$V_}),o($VV,$VY,{114:111,117:112,118:113,119:114,93:122,39:$VZ,115:$VK,116:$VL,120:$V_}),o($VV,[2,90]),o($VV,[2,91]),o($VV,[2,92]),{59:[1,124],103:[1,123]},{103:[1,125]},{103:[1,126]},{59:[1,128],103:[1,127]},{59:[1,130],103:[1,129]},{103:[1,131]},{103:[1,132]},{59:[1,134],103:[1,133]},{103:[1,135]},{1:[2,1]},o($Vt,[2,67],{77:$Vu}),o($VV,$VS),{1:[2,2]},{18:$Vs,32:$V1,78:136,80:21,81:22,82:23,83:24,84:25,85:26,86:27,87:28,88:29,89:30,90:31,92:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr},o($Vw,[2,70]),o($Vw,[2,119],{122:137,123:$Vy}),o($VV,[2,121]),{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:138,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{14:140,15:141,28:142,29:144,30:145,31:$V01,34:$V11,37:$V21},o($Vz,[2,15],{78:10,80:21,81:22,82:23,83:24,84:25,85:26,86:27,87:28,88:29,89:30,90:31,76:53,18:$Vs,32:$V1,92:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr}),{11:79,17:$VA,18:$VB,22:$V$,23:149,25:[1,148],32:$VD,33:150,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{18:[1,151]},{18:[1,152]},{11:79,17:[1,153],18:$VB,22:$V$,25:$VC,32:$VD,33:154,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{26:$V31,32:$V41,41:155,45:$V51,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1},o($Vr1,[2,123]),o($Vr1,[2,124]),o($Vr1,[2,125]),o($Vr1,[2,126]),o($Vr1,[2,127]),o($Vr1,[2,128]),{18:$VW,91:180,101:$VX,114:108,115:$VK,116:$VL},o($Vr1,[2,130]),o($Vr1,[2,131]),o($Vr1,[2,132]),o($Vr1,[2,134]),o($Vr1,[2,135]),o($Vr1,$VY,{114:111,117:112,118:113,119:114,93:181,18:[1,182],39:$VZ,115:$VK,116:$VL,120:$V_}),o($Vr1,[2,160]),{22:[1,183]},{22:[1,184]},o($Vr1,$Vs1),o($Vr1,[2,163]),o($Vr1,[2,164]),o($Vr1,$Vt1,{22:$VT,62:$VU}),o($Vr1,[2,166]),o($Vr1,[2,167]),o($Vr1,[2,168]),o($Vr1,[2,169]),{4:185,18:$Vs,32:$V1,76:4,78:10,80:21,81:22,82:23,83:24,84:25,85:26,86:27,87:28,88:29,89:30,90:31,92:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr},{18:$Vu1,39:$Vv1,131:186},{18:$Vu1,39:$Vv1,131:189},o($Vr1,[2,141]),o($VV,[2,109]),o($VV,[2,110]),{11:79,17:$VA,18:$VB,22:$V$,23:190,25:$VC,32:$VD,33:150,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{18:[1,191]},{17:$VA,18:$Vw1,25:$VC,54:192,63:$VF,99:$VI,100:$VJ,143:$VP,144:$VQ,145:$VR},{17:$VA,18:$Vw1,25:$VC,54:194,63:$VF,99:$VI,100:$VJ,143:$VP,144:$VQ,145:$VR},{17:$Vx1,18:$Vy1,57:195,63:$Vz1},{60:[1,199]},{60:[1,200]},o($VV,[2,82]),o($VV,[2,106]),o($VV,[2,107]),o($VV,[2,108]),{18:[1,201]},o($VV,[2,83]),o($VV,[2,112]),o($VV,[2,113]),o($VV,[2,114]),o($VV,[2,115]),o($VV,[2,116]),{18:[1,202]},o($VV,[2,84]),o($VV,[2,85]),o($VV,[2,86]),o($VV,[2,87]),o($VV,[2,88]),o($VV,[2,89]),o($VA1,[2,93]),{104:[1,203]},o($VA1,[2,95]),o($VA1,[2,96]),o($VA1,[2,97]),{104:[1,204]},o($VA1,[2,99]),{110:[1,205]},o($VA1,[2,101]),o($VA1,[2,102]),o($VA1,[2,103]),{110:[1,206]},o($VA1,[2,105]),o($Vw,$Vx,{121:58,122:59,79:207,123:$Vy}),o($VV,[2,120]),{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,124:[1,208],134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:154,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{15:209,28:210,29:144,30:145,31:$V01,34:$V11,37:$V21},o($Vv,[2,10],{10:211,40:$V2}),o($Vz,[2,19]),{10:214,17:[1,213],22:$VB1,36:212,38:215,40:$V2},o($Vz,[2,20]),o($Vz,[2,21]),{17:[1,217]},{35:[1,218]},o([24,26,27,32,47,48,49,50,51,52,59,65,95,96,101,104,134,135,136,137,138,139,140,141,142],$Vs1),{24:[1,220],27:$VC1},o($VD1,[2,59],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1}),{62:[1,222]},{62:[1,223]},{4:185,18:[1,224],32:$V1,76:4,78:10,80:21,81:22,82:23,83:24,84:25,85:26,86:27,87:28,88:29,89:30,90:31,92:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr},{24:[1,225],26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1},{42:226,43:227,44:$VE1},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:229,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:230,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:231,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:232,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:233,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:234,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:235,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:236,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:237,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:238,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:239,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:240,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:241,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:242,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:243,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},o($Vr1,[2,140]),{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:244,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:245,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:246,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:247,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:248,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:249,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:250,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:251,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},o($Vr1,[2,129]),o($Vr1,[2,159]),o($Vr1,[2,161]),{24:[1,252]},{24:[1,253]},o($Vr1,[2,170],{78:10,80:21,81:22,82:23,83:24,84:25,85:26,86:27,87:28,88:29,89:30,90:31,76:53,18:$Vs,92:$Va,94:$Vb,97:$Ve,98:$Vf,99:$Vg,100:$Vh,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr}),{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:254,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},o($VF1,[2,142]),{18:[1,255]},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:256,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{24:[1,257],27:$VC1},{22:[1,258]},{24:[1,259]},{24:$Vt1},{24:[1,260]},{27:[1,261]},{18:[1,262]},o($VD1,[2,56]),o($VD1,[2,57]),{22:[1,263]},{22:[1,264]},{19:[1,265],20:[1,266]},o($VV,[2,117]),{59:[1,267]},{105:[1,268]},{103:[1,269]},{103:[1,270]},o($Vw,[2,69]),o($VV,[2,122]),o($Vv,[2,8]),o($Vz,[2,18]),o($Vv,[2,9]),o($VG1,[2,25],{27:$VH1}),{18:[1,272]},o($VG1,[2,27]),o($VI1,[2,29]),{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:273,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{18:[1,274]},{17:[1,276],22:$VB1,36:275,38:215},{25:[1,277]},{27:[1,278]},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:279,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{65:[1,280]},{18:[1,281]},o([18,24,26,32,47,48,49,50,51,52,59,65,77,92,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,111,112,113,123,134,135,136,137,138,139,140,141,142],$VS),o($Vr1,[2,133]),o($VG1,[2,35]),{42:283,44:$VJ1},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:285,39:$VE,40:[1,286],46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},o($VK1,[2,146],{26:$V31,32:$V41,95:$Ve1,96:$Vf1,101:$Vg1,135:$Vj1,136:$Vk1}),o($VK1,[2,147],{26:$V31,32:$V41,95:$Ve1,96:$Vf1,101:$Vg1,135:$Vj1,136:$Vk1}),o($VL1,[2,148],{26:$V31,32:$V41,95:$Ve1,96:$Vf1}),o($VL1,[2,149],{26:$V31,32:$V41,95:$Ve1,96:$Vf1}),o($VL1,[2,150],{26:$V31,32:$V41,95:$Ve1,96:$Vf1}),o($VM1,[2,151],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1}),o($VM1,[2,152],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1}),o($VM1,[2,153],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1}),o($VM1,[2,154],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1}),o($VN1,[2,155],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1}),o($VN1,[2,156],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1}),o([5,24,27,31,34,37,40,44,45,73,104,124],[2,157],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1}),o([5,24,27,31,34,37,40,44,45,73,104,124,142],[2,158],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1}),o($VO1,[2,136],{26:$V31,96:$Vf1}),o($VP1,[2,137],{26:$V31,95:$Ve1,96:$Vf1}),o($VQ1,[2,40],{26:$V31,32:$V41,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1}),o($VQ1,[2,41],{26:$V31,32:$V41,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1}),o($VQ1,[2,42],{26:$V31,32:$V41,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1}),o($VQ1,[2,43],{26:$V31,32:$V41,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1}),o($VQ1,[2,44],{26:$V31,32:$V41,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1}),o($VQ1,[2,45],{26:$V31,32:$V41,59:$Vc1,95:$Ve1,96:$Vf1,101:$Vg1,134:$Vi1,135:$Vj1,136:$Vk1}),o($Vr1,[2,46]),{26:$V31,32:$V41,44:[2,38],47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1},o($Vr1,[2,144]),o($Vr1,[2,145]),o($VO1,[2,138],{26:$V31,96:$Vf1}),o($VF1,[2,143]),o($VP1,[2,139],{26:$V31,95:$Ve1,96:$Vf1}),o($Vr1,[2,47]),{11:79,17:$VA,18:$VB,22:$V$,23:287,25:$VC,32:$VD,33:150,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},o($Vr1,[2,48]),o($Vr1,[2,49]),{25:[1,288]},o($VD1,[2,55]),{17:$Vx1,18:$Vy1,57:289,63:$Vz1},{17:$Vx1,18:$Vy1,57:290,63:$Vz1},o($VR1,[2,11]),{17:[1,291]},{105:[1,292]},{103:[1,293]},o($VA1,[2,100]),o($VA1,[2,104]),{17:[1,295],22:$VB1,38:294},o($VG1,[2,26],{32:$VS1}),{24:[1,297],26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1},{32:[1,298]},o($Vz,[2,23],{27:$VH1}),{18:[1,299]},{24:[1,300]},{17:[1,302],21:301},o($VD1,[2,58],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1}),{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:303,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{22:[1,304]},{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:305,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},o($VG1,[2,36]),{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:285,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},o($VG1,[2,39],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1}),{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:306,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{24:[1,307],27:$VC1},{24:[1,308],27:[1,309]},{24:[1,310]},{24:[1,311]},{18:[1,312]},{103:[1,313]},o($VA1,[2,98]),o($VI1,[2,28]),{18:[1,314]},{18:[1,315],39:[1,316]},o($VI1,[2,32]),{11:79,17:$VA,18:$VB,22:$V$,25:$VC,32:$VD,33:317,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},o($Vz,[2,24],{32:$VS1}),o($Vz,[2,16]),o($Vz,[2,17]),{18:[1,318]},o($Vv,[2,61],{15:319,26:$V31,32:$V41,37:$V21,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1}),{17:$VT1,68:320,75:321},{24:[1,323],26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1},{26:$V31,32:$V41,41:324,45:$V51,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1},o($Vr1,[2,54]),o($Vr1,[2,50]),{25:[1,325]},o($Vr1,[2,52]),o($Vr1,[2,53]),{19:[1,326]},o($VA1,[2,94]),{32:$VS1},o($VI1,[2,30]),{18:[1,327]},o($Vz,[2,22],{26:$V31,32:$V41,47:$V61,48:$V71,49:$V81,50:$V91,51:$Va1,52:$Vb1,59:$Vc1,65:$Vd1,95:$Ve1,96:$Vf1,101:$Vg1,104:$Vh1,134:$Vi1,135:$Vj1,136:$Vk1,137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1,141:$Vp1,142:$Vq1}),{19:[1,328]},o($Vv,[2,60]),{24:[1,329],27:[1,330]},o($VD1,[2,64]),{18:[1,331]},{41:332,45:$V51},{44:[2,37]},{24:[1,333]},o($VR1,[2,12]),o($VI1,[2,31]),{22:[1,334]},{69:[1,335]},{17:$VT1,75:336},{69:[1,337]},{42:338,43:339,44:$VE1},o($Vr1,[2,51]),{11:79,17:$VA,18:$VB,22:$V$,23:340,25:$VC,32:$VD,33:150,39:$VE,46:78,53:$V3,54:73,55:$V4,56:$V5,58:$V6,61:$V7,63:$VF,90:74,95:$VG,96:$VH,99:$VI,100:$VJ,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,111:$Vp,112:$Vq,113:$Vr,114:77,115:$VK,116:$VL,120:$VM,122:76,123:$Vy,125:68,126:69,127:70,128:71,129:72,130:75,132:$VN,133:$VO,143:$VP,144:$VQ,145:$VR},{70:[1,341]},o($VD1,[2,63]),{70:[1,342]},o($VG1,[2,33]),{42:343,44:$VJ1},{24:[1,344],27:$VC1},{62:[1,345]},{62:[1,346]},o($VG1,[2,34]),o($Vz,[2,13]),{18:$VU1,71:347},{18:$VU1,71:349},{72:[1,350]},o([24,27,72],[2,66]),o($VD1,[2,65]),{6:351,7:5,8:6,9:7,10:8,11:9,12:11,16:$V0,18:[1,352],40:$V2,53:$V3,55:$V4,56:$V5,58:$V6,61:$V7,64:$V8,66:$V9},{73:[1,353]},{22:$VT,62:$VU},{74:[1,354]},o($Vv,[2,62])],
defaultActions: {52:[2,1],55:[2,2],193:[2,165],324:[2,37]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores"); 
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 16;
break;
case 2:return 31;
break;
case 3:return 34;
break;
case 4:return 37;
break;
case 5:return  'if';
break;
case 6:return 19;
break;
case 7:return 35;
break;
case 8:return 64;
break;
case 9:return 'data';
break;
case 10:return 45;
break;
case 11:return 44;
break;
case 12:return 47;
break;
case 13:return 48;
break;
case 14:return 49;
break;
case 15:return 50;
break;
case 16:return 51;
break;
case 17:return 52;
break;
case 18:return 26;
break;
case 19:return 20;
break;
case 20:return 64;
break;
case 21:return 66;
break;
case 22:return 69;
break;
case 23:return 67;
break;
case 24:return 144;
break;
case 25:return 145;
break;
case 26:return 53;
break;
case 27:return 56;
break;
case 28:return 61;
break;
case 29:return 60;
break;
case 30:return 58;
break;
case 31:return 70;
break;
case 32:return 132;
break;
case 33:return 133;
break;
case 34:return 115;
break;
case 35:return 116;
break;
case 36:return 'comment';
break;
case 37:return 102;
break;
case 38:return 106;
break;
case 39:return 107;
break;
case 40:return 108;
break;
case 41:return 109;
break;
case 42:return 111;
break;
case 43:return 112;
break;
case 44:return 113;
break;
case 45:return 110;
break;
case 46:return 105;
break;
case 47:return 77;
break;
case 48:return 134;
break;
case 49:return 59;
break;
case 50:return 101;
break;
case 51:return 65;
break;
case 52:return 141;
break;
case 53:return 140;
break;
case 54:return 139;
break;
case 55:return 138;
break;
case 56:return 137;
break;
case 57:return 17;
break;
case 58:return 27;
break;
case 59:return 74;
break;
case 60:return 123;
break;
case 61:return 124;
break;
case 62:return 22;
break;
case 63:return 24;
break;
case 64:return 72;
break;
case 65:return 73;
break;
case 66:return 143;
break;
case 67:return 25;
break;
case 68:return 63;
break;
case 69:return 63;
break;
case 70:return 136;
break;
case 71:return 135;
break;
case 72:return 142;
break;
case 73:return 104;
break;
case 74:return 18;
break;
case 75:return 100;
break;
case 76:return 92;
break;
case 77:return 94;
break;
case 78:return 95;
break;
case 79:return 96;
break;
case 80:return 97;
break;
case 81:return 98;
break;
case 82:return 32;
break;
case 83:return 99;
break;
case 84:return 103;
break;
case 85:return 62;
break;
case 86:return 120;
break;
case 87:return 39;    
break;
case 88:
  const er = new errorGram.Error({ tipo: 'léxico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es válido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 89:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:for\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:by\b)/,/^(?:let\b)/,/^(?:data\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:let\b)/,/^(?:declare\b)/,/^(?:as\b)/,/^(?:function\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:number\b)/,/^(?:substring\b)/,/^(?:upper\b)/,/^(?:case\b)/,/^(?:lower\b)/,/^(?:xs\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\$)/,/^(?:,)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:["m"]["o"]["d"])/,/^(?:["d"]["i"]["v"])/,/^(?:["a"]["n"]["d"])/,/^(?:["o"]["r"])/,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9_]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?::)/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_XQUERY;
exports.Parser = gramatica_XQUERY.Parser;
exports.parse = function () { return gramatica_XQUERY.parse.apply(gramatica_XQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}