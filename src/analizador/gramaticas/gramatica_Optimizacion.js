/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_Optimizacion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[5,35,36],$V3=[26,34],$V4=[1,17],$V5=[12,35,36],$V6=[1,44],$V7=[1,45],$V8=[1,43],$V9=[1,42],$Va=[1,39],$Vb=[1,37],$Vc=[1,38],$Vd=[1,35],$Ve=[1,36],$Vf=[17,22],$Vg=[1,55],$Vh=[13,18,20,21,23,27,40,51,53,56],$Vi=[16,17,29,44,58,59,60,61,62,63,64,68,69,70,71],$Vj=[1,74],$Vk=[1,73],$Vl=[1,75],$Vm=[1,77],$Vn=[1,80],$Vo=[1,100],$Vp=[1,98],$Vq=[1,99],$Vr=[1,101],$Vs=[16,17,29,44,58,59,60,61,62,63,68,69,70,71],$Vt=[1,118],$Vu=[1,117],$Vv=[1,119],$Vw=[1,120],$Vx=[1,121],$Vy=[15,20,21,23,28,42,44],$Vz=[17,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INICIO":4,"EOF":5,"HEADER":6,"FUNCIONES":7,"include":8,"stdio":9,"L_DECLARACION":10,"DECLARACION":11,"double":12,"heap":13,"cor_izq":14,"integer":15,"cor_der":16,"pto_coma":17,"stack":18,"L_TEMPORAL":19,"p_Heap":20,"p_Stack":21,"coma":22,"temporal":23,"FUNCION":24,"TIPO_F":25,"funtion":26,"id":27,"par_izq":28,"par_der":29,"llave_izq":30,"BLOQUES":31,"RETURN":32,"llave_der":33,"main":34,"int":35,"void":36,"TIPO":37,"float":38,"char":39,"return":40,"VALOR":41,"decimal":42,"PUNTERO":43,"resta":44,"BLOQUE":45,"IF":46,"GOTO":47,"LLAMADA":48,"PRINT":49,"ASIGNA":50,"printf":51,"string":52,"if":53,"CONDICION":54,"OP_COMPARACION":55,"goto":56,"etiqueta":57,"diferente_que":58,"igual_que":59,"mayor_igual":60,"menor_igual":61,"mayor":62,"menor":63,"igual":64,"EXPR":65,"ACCESO":66,"OP_ARITMETICO":67,"suma":68,"multiplicacion":69,"division":70,"modulo":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"include",9:"stdio",12:"double",13:"heap",14:"cor_izq",15:"integer",16:"cor_der",17:"pto_coma",18:"stack",20:"p_Heap",21:"p_Stack",22:"coma",23:"temporal",26:"funtion",27:"id",28:"par_izq",29:"par_der",30:"llave_izq",33:"llave_der",34:"main",35:"int",36:"void",38:"float",39:"char",40:"return",42:"decimal",44:"resta",51:"printf",52:"string",53:"if",56:"goto",57:"etiqueta",58:"diferente_que",59:"igual_que",60:"mayor_igual",61:"menor_igual",62:"mayor",63:"menor",64:"igual",68:"suma",69:"multiplicacion",70:"division",71:"modulo"},
productions_: [0,[3,2],[4,2],[6,3],[10,2],[10,1],[11,6],[11,6],[11,3],[11,3],[11,3],[19,3],[19,1],[7,2],[7,1],[24,9],[24,6],[25,1],[25,1],[37,1],[37,1],[37,1],[37,1],[32,2],[32,4],[32,3],[41,1],[41,1],[41,1],[41,4],[41,4],[41,4],[41,4],[41,1],[41,2],[31,2],[31,1],[45,1],[45,1],[45,1],[45,1],[45,1],[48,4],[49,7],[46,5],[54,3],[47,3],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[50,4],[50,4],[50,4],[50,4],[50,4],[50,4],[50,4],[65,3],[66,4],[66,4],[43,1],[43,1],[67,1],[67,1],[67,1],[67,1],[67,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'S', hijos: [$$[$0-1]], linea: yylineno});
break;
case 2:
 this.$ = new NodoAST({label: 'INICIO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 3:
 this.$ = new NodoAST({label: 'HEADER', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 4:
 this.$ = new NodoAST({label: 'L_DECLARACION', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 5:
this.$ = new NodoAST({label: 'L_DECLARACION', hijos: [$$[$0]], linea: yylineno});
break;
case 6: case 7:
this.$ = new NodoAST({label: 'DECLARACION', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno});
break;
case 8:
this.$ = new NodoAST({label: 'DECLARACION', hijos: [$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno});
break;
case 9: case 10:
this.$ = new NodoAST({label: 'DECLARACION', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno});
break;
case 11:
this.$ = new NodoAST({label: 'L_TEMPORAL', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 12:
this.$ = new NodoAST({label: 'L_DECLARACION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 13:
this.$ = new NodoAST({label: 'FUNCIONES', hijos: [...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 14:
this.$ = new NodoAST({label: 'FUNCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 15:
this.$ = new NodoAST({label: 'FUNCION', hijos: [$$[$0-8],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno});
break;
case 16:
this.$ = new NodoAST({label: 'FUNCION', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno});
break;
case 17: case 19: case 20: case 21: case 22: case 47: case 48: case 49: case 50: case 51: case 52: case 63: case 64: case 65: case 66: case 67: case 68: case 69:
 this.$ = $$[$0]
break;
case 18:
this.$ = $$[$0]
break;
case 23:
this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 24:
this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 25:
this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno});
break;
case 26:
this.$ = new NodoAST({label: 'temporal', hijos: [$$[$0]], linea: yylineno}); 
break;
case 27:
this.$ = new NodoAST({label: 'integer', hijos: [$$[$0]], linea: yylineno}); 
break;
case 28:
this.$ = new NodoAST({label: 'decimal', hijos: [$$[$0]], linea: yylineno}); 
break;
case 29: case 30: case 31: case 32:
this.$ = new NodoAST({label: 'acceso', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno});
break;
case 33:
this.$ = new NodoAST({label: 'PUNTERO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 34:
this.$ = new NodoAST({label: 'umenos', hijos: [($$[$0-1]+$$[$0])], linea: yylineno});
break;
case 35:
this.$ = new NodoAST({label: 'BLOQUES', hijos: [...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 36:
this.$ = new NodoAST({label: 'BLOQUES', hijos: [...$$[$0].hijos], linea: yylineno});
break;
case 37: case 39: case 40: case 41:
this.$ = new NodoAST({label: 'BLOQUE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 38:
 this.$ = new NodoAST({label: 'BLOQUE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 42:
this.$ = new NodoAST({label: 'LLAMADA', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 43:
this.$ = new NodoAST({label: 'LLAMADA', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno});
break;
case 44:
this.$ = new NodoAST({label: 'IF', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno});
break;
case 45:
this.$ = new NodoAST({label: 'CONDICION', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno});
break;
case 46:
this.$ = new NodoAST({label: 'GOTO', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 53: case 55: case 58:
this.$ = new NodoAST({label: 'ASIGNA_EXPR', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno});
break;
case 54: case 56: case 57:
this.$ = new NodoAST({label: 'ASIGNA', hijos: [$$[$0-3],$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno});
break;
case 59:
this.$ = new NodoAST({label: 'ASIGNA', hijos: [...$$[$0-3].hijos,$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno});
break;
case 60:
this.$ = new NodoAST({label: 'EXPR', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno});
break;
case 61: case 62:
this.$ = new NodoAST({label: 'ACCESO', hijos: [$$[$0-3],$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno});
break;
}
},
table: [{3:1,4:2,6:3,8:[1,4]},{1:[3]},{5:[1,5]},{7:6,24:7,25:8,35:$V0,36:$V1},{9:[1,11]},{1:[2,1]},{5:[2,2],24:12,25:8,35:$V0,36:$V1},o($V2,[2,14]),{26:[1,13],34:[1,14]},o($V3,[2,17]),o($V3,[2,18]),{10:15,11:16,12:$V4},o($V2,[2,13]),{27:[1,18]},{30:[1,19]},o([35,36],[2,3],{11:20,12:$V4}),o($V5,[2,5]),{13:[1,21],18:[1,22],19:23,20:[1,24],21:[1,25],23:[1,26]},{28:[1,27]},{13:$V6,18:$V7,20:$V8,21:$V9,23:$Va,27:$Vb,31:28,43:40,45:29,46:30,47:31,48:32,49:33,50:34,51:$Vc,53:$Vd,56:$Ve,66:41},o($V5,[2,4]),{14:[1,46]},{14:[1,47]},{17:[1,48],22:[1,49]},{17:[1,50]},{17:[1,51]},o($Vf,[2,12]),{29:[1,52]},{13:$V6,18:$V7,20:$V8,21:$V9,23:$Va,27:$Vb,32:53,40:$Vg,43:40,45:54,46:30,47:31,48:32,49:33,50:34,51:$Vc,53:$Vd,56:$Ve,66:41},o($Vh,[2,36]),o($Vh,[2,37]),o($Vh,[2,38]),o($Vh,[2,39]),o($Vh,[2,40]),o($Vh,[2,41]),{28:[1,56]},{57:[1,57]},{28:[1,58]},{28:[1,59]},{64:[1,60]},{64:[1,61]},{64:[1,62]},o($Vi,[2,63]),o($Vi,[2,64]),{14:[1,63]},{14:[1,64]},{15:[1,65]},{15:[1,66]},o($V5,[2,8]),{23:[1,67]},o($V5,[2,9]),o($V5,[2,10]),{30:[1,68]},{33:[1,69]},o($Vh,[2,35]),{15:$Vj,17:[1,70],20:$V8,21:$V9,23:$Vk,28:[1,71],41:72,42:$Vl,43:76,44:$Vm},{15:$Vj,20:$V8,21:$V9,23:$Vk,28:$Vn,41:79,42:$Vl,43:76,44:$Vm,54:78},{17:[1,81]},{29:[1,82]},{52:[1,83]},{13:$V6,15:$Vj,18:$V7,20:$V8,21:$V9,23:$Vk,28:$Vn,41:85,42:$Vl,43:76,44:$Vm,65:84,66:86},{15:$Vj,20:$V8,21:$V9,23:$Vk,28:$Vn,41:88,42:$Vl,43:76,44:$Vm,65:87},{15:$Vj,20:$V8,21:$V9,23:$Vk,28:$Vn,41:90,42:$Vl,43:76,44:$Vm,65:89},{15:$Vj,20:$V8,21:$V9,23:$Vk,28:$Vn,41:91,42:$Vl,43:76,44:$Vm},{15:$Vj,20:$V8,21:$V9,23:$Vk,28:$Vn,41:92,42:$Vl,43:76,44:$Vm},{16:[1,93]},{16:[1,94]},o($Vf,[2,11]),{13:$V6,18:$V7,20:$V8,21:$V9,23:$Va,27:$Vb,31:95,43:40,45:29,46:30,47:31,48:32,49:33,50:34,51:$Vc,53:$Vd,56:$Ve,66:41},o($V2,[2,16]),{33:[2,23]},{12:$Vo,29:[1,96],35:$Vp,37:97,38:$Vq,39:$Vr},{17:[1,102]},o($Vs,[2,26]),o($Vs,[2,27]),o($Vs,[2,28]),o($Vs,[2,33]),{15:[1,103]},{29:[1,104]},{55:105,58:[1,106],59:[1,107],60:[1,108],61:[1,109],62:[1,110],63:[1,111]},{12:$Vo,35:$Vp,37:97,38:$Vq,39:$Vr},o($Vh,[2,46]),{17:[1,112]},{22:[1,113]},{17:[1,114]},{17:[1,115],44:$Vt,67:116,68:$Vu,69:$Vv,70:$Vw,71:$Vx},{17:[1,122]},{17:[1,123]},{17:[1,124],44:$Vt,67:116,68:$Vu,69:$Vv,70:$Vw,71:$Vx},{17:[1,125]},{17:[1,126],44:$Vt,67:116,68:$Vu,69:$Vv,70:$Vw,71:$Vx},{16:[1,127]},{16:[1,128]},{17:[1,129]},{17:[1,130]},{13:$V6,18:$V7,20:$V8,21:$V9,23:$Va,27:$Vb,32:131,40:$Vg,43:40,45:54,46:30,47:31,48:32,49:33,50:34,51:$Vc,53:$Vd,56:$Ve,66:41},{17:[1,132]},{29:[1,133]},{29:[2,19]},{29:[2,20]},{29:[2,21]},{29:[2,22]},{33:[2,25]},o($Vs,[2,34]),{47:134,56:$Ve},{15:$Vj,20:$V8,21:$V9,23:$Vk,28:$Vn,41:135,42:$Vl,43:76,44:$Vm},o($Vy,[2,47]),o($Vy,[2,48]),o($Vy,[2,49]),o($Vy,[2,50]),o($Vy,[2,51]),o($Vy,[2,52]),o($Vh,[2,42]),{15:$Vj,20:$V8,21:$V9,23:$Vk,28:$Vn,41:136,42:$Vl,43:76,44:$Vm},o($Vh,[2,53]),o($Vh,[2,54]),{15:$Vj,20:$V8,21:$V9,23:$Vk,28:$Vn,41:137,42:$Vl,43:76,44:$Vm},o($Vy,[2,65]),o($Vy,[2,66]),o($Vy,[2,67]),o($Vy,[2,68]),o($Vy,[2,69]),o($Vh,[2,57]),o($Vh,[2,55]),o($Vh,[2,56]),o($Vh,[2,58]),o($Vh,[2,59]),o($Vz,[2,61]),o($Vz,[2,62]),o($V5,[2,6]),o($V5,[2,7]),{33:[1,138]},{33:[2,24]},{12:[1,140],15:[1,139],20:[1,142],21:[1,141]},o($Vh,[2,44]),{29:[2,45]},{29:[1,143]},{17:[2,60]},o($V2,[2,15]),o($Vs,[2,29]),o($Vs,[2,30]),o($Vs,[2,31]),o($Vs,[2,32]),{17:[1,144]},o($Vh,[2,43])],
defaultActions: {5:[2,1],70:[2,23],98:[2,19],99:[2,20],100:[2,21],101:[2,22],102:[2,25],132:[2,24],135:[2,45],137:[2,60]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores");
    const Objeto_Optimizar = require("../Reportes/Objeto_Optimizar");
    const Rep_Optimizar = require("../Reportes/Rep_Optimizar");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 8;
break;
case 4:return 9;
break;
case 5:return 12;
break;
case 6:return 35;
break;
case 7:return 21;
break;
case 8:return 20;
break;
case 9:return 13;
break;
case 10:return 18;
break;
case 11:return 34;
break;
case 12:return 56;
break;
case 13:return 53;
break;
case 14:return 36; 
break;
case 15:return 35;
break;
case 16:return 38;
break;
case 17:return 12;
break;
case 18:return 39; 
break;
case 19:return 'function';
break;
case 20:return 40;
break;
case 21:return 51;
break;
case 22:return 17;
break;
case 23:return 'dos_pts';
break;
case 24:return 14;
break;
case 25:return 16;
break;
case 26:return 30;
break;
case 27:return 33;
break;
case 28:return 28;
break;
case 29:return 29;
break;
case 30:return 68;
break;
case 31:return 44;
break;
case 32:return 69;
break;
case 33:return 70;
break;
case 34:return 71;
break;
case 35:return 60;
break;
case 36:return 61;
break;
case 37:return 58;
break;
case 38:return 59;
break;
case 39:return 64;
break;
case 40:return 62;
break;
case 41:return 63;
break;
case 42:return 22;
break;
case 43:return 23;
break;
case 44:return 57;
break;
case 45:return 27;
break;
case 46:return 42;
break;
case 47:return 15;
break;
case 48:return 52;
break;
case 49:return 52;
break;
case 50:
  const er = new errorGram.Error({ tipo: 'léxico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es válido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 51:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:#include\b)/,/^(?:<stdio\.h>)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:S\b)/,/^(?:H\b)/,/^(?:heap\b)/,/^(?:stack\b)/,/^(?:main\(\))/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:void\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:printf\b)/,/^(?:;)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:,)/,/^(?:T[0-9]+)/,/^(?:L[0-9]+)/,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ_]+[[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9_]*)/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_Optimizacion;
exports.Parser = gramatica_Optimizacion.Parser;
exports.parse = function () { return gramatica_Optimizacion.parse.apply(gramatica_Optimizacion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}