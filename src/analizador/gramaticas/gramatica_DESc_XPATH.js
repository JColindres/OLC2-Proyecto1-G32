/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_DESC_XPATH = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,15],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,35],$Ve=[1,28],$Vf=[1,29],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[5,10,21,24,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,45,46,47],$Vm=[2,56],$Vn=[1,41],$Vo=[5,10,21,24,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,45,46,47,60],$Vp=[1,43],$Vq=[1,44],$Vr=[1,46],$Vs=[1,47],$Vt=[2,47],$Vu=[1,53],$Vv=[1,54],$Vw=[5,21,24,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,45,46,47],$Vx=[1,95],$Vy=[1,98],$Vz=[1,100],$VA=[1,99],$VB=[1,96],$VC=[1,97],$VD=[1,89],$VE=[1,88],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[5,10,21,24,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,45,46,47,60,62,73,74,75,76,77,78,79,80],$VL=[21,34,49,52],$VM=[1,121],$VN=[1,122],$VO=[1,112],$VP=[1,111],$VQ=[1,110],$VR=[1,113],$VS=[1,114],$VT=[1,115],$VU=[1,116],$VV=[1,117],$VW=[1,118],$VX=[1,120],$VY=[27,31,34,37,38,62,73,74,75,76,77,78,79,80],$VZ=[1,129],$V_=[1,130],$V$=[21,27,28,31,32,33,35,39,40,41,42,43,45,46,47,49,52,56,57,60,71,72,81,82,83],$V01=[37,38,62,73,76,77,78,79,80],$V11=[34,37,38,62,73,74,75,76,77,78,79,80],$V21=[38,62,76,77,78,79,80],$V31=[38,62,78,79,80],$V41=[31,34,37,38,62,73,74,75,76,77,78,79,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"RUTA":7,"FILTROS":8,"OPC_I":9,"o":10,"ATRIBUTO_DESCENDIENTES":11,"DESCENDIENTES_NODO":12,"DESCENDIENTE":13,"PADRE":14,"ATRIBUTO_NODO":15,"HIJOS":16,"RAIZ":17,"NODO_ACTUAL":18,"PADRE_NODO":19,"ANY":20,"id":21,"EJES":22,"OPC_EJES":23,"diagonal_diagonal_arroba_ast":24,"OPC":25,"diagonal_diagonal_ast":26,"doble_diagonal":27,"diagonal_dos_pts":28,"diagonal_arroba_ast":29,"diagonal_ast":30,"diagonal":31,"punto":32,"dos_pts":33,"mul":34,"ancestor":35,"bi_pto":36,"menos":37,"or":38,"self":39,"attribute":40,"child":41,"descendant":42,"following":43,"sibling":44,"namespace":45,"parent":46,"preceding":47,"NODO_FUNCION":48,"node":49,"par_izq":50,"par_der":51,"text":52,"PASOS":53,"ANY_ATRIBUTO":54,"ATRIBUTO":55,"any_atributo":56,"arroba":57,"LISTA_PREDICADO":58,"PREDICADO":59,"cor_izq":60,"EXPR":61,"cor_der":62,"ATRIBUTO_PREDICADO":63,"ARITMETICAS":64,"RELACIONALES":65,"LOGICAS":66,"ORDEN":67,"VALORES":68,"PATH":69,"OPC_PATH":70,"last":71,"position":72,"mas":73,"div":74,"mod":75,"mayor":76,"menor":77,"igual":78,"diferencia":79,"and":80,"integer":81,"double":82,"string":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"o",21:"id",24:"diagonal_diagonal_arroba_ast",26:"diagonal_diagonal_ast",27:"doble_diagonal",28:"diagonal_dos_pts",29:"diagonal_arroba_ast",30:"diagonal_ast",31:"diagonal",32:"punto",33:"dos_pts",34:"mul",35:"ancestor",36:"bi_pto",37:"menos",38:"or",39:"self",40:"attribute",41:"child",42:"descendant",43:"following",44:"sibling",45:"namespace",46:"parent",47:"preceding",49:"node",50:"par_izq",51:"par_der",52:"text",56:"any_atributo",57:"arroba",60:"cor_izq",62:"cor_der",71:"last",72:"position",73:"mas",74:"div",75:"mod",76:"mayor",77:"menor",78:"igual",79:"diferencia",80:"and",81:"integer",82:"double",83:"string"},
productions_: [0,[3,2],[4,2],[4,0],[6,3],[9,0],[9,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,1],[19,1],[20,1],[22,2],[22,6],[22,2],[22,2],[22,2],[22,5],[22,2],[22,4],[22,2],[22,2],[22,2],[22,4],[22,2],[23,1],[23,1],[23,1],[48,3],[48,3],[25,0],[25,1],[25,1],[53,1],[53,1],[54,1],[55,2],[8,1],[58,2],[58,0],[59,3],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,2],[61,1],[61,1],[61,1],[69,3],[69,3],[69,3],[69,3],[69,1],[70,1],[70,2],[67,3],[67,3],[64,3],[64,3],[64,3],[64,3],[64,3],[65,3],[65,3],[65,4],[65,4],[65,3],[65,3],[66,3],[66,3],[63,2],[63,1],[63,2],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:$V1,22:16,24:$V2,26:$V3,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk},{1:[3]},{5:[1,36]},{4:37,5:$V0,6:3,7:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:$V1,22:16,24:$V2,26:$V3,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk},o($Vl,$Vm,{8:38,58:39,59:40,60:$Vn}),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),{21:$Vp,23:42,34:$Vq,48:45,49:$Vr,52:$Vs},o($Vo,$Vt,{25:48,48:49,53:50,54:51,55:52,49:$Vr,52:$Vs,56:$Vu,57:$Vv}),o($Vo,$Vt,{48:49,53:50,54:51,55:52,25:55,49:$Vr,52:$Vs,56:$Vu,57:$Vv}),o($Vo,$Vt,{48:49,53:50,54:51,55:52,25:56,49:$Vr,52:$Vs,56:$Vu,57:$Vv}),o($Vo,$Vt,{48:49,53:50,54:51,55:52,25:57,49:$Vr,52:$Vs,56:$Vu,57:$Vv}),o($Vo,$Vt,{48:49,53:50,54:51,55:52,25:58,49:$Vr,52:$Vs,56:$Vu,57:$Vv}),o($Vo,$Vt,{48:49,53:50,54:51,55:52,25:59,49:$Vr,52:$Vs,56:$Vu,57:$Vv}),o($Vo,$Vt,{48:49,53:50,54:51,55:52,25:60,49:$Vr,52:$Vs,56:$Vu,57:$Vv}),o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),{36:[1,61],37:[1,62]},{36:[1,63]},{36:[1,64]},{36:[1,65],37:[1,66]},{36:[1,67],37:[1,68]},{36:[1,69]},{36:[1,70]},{36:[1,71],37:[1,72]},{36:[1,73]},{1:[2,1]},{5:[2,2]},o($Vw,[2,5],{9:74,10:[1,75]}),o($Vl,[2,54]),o($Vl,$Vm,{59:40,58:76,60:$Vn}),{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:77,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},o($Vo,[2,18]),o($VK,[2,42]),o($VK,[2,43]),o($VK,[2,44]),{50:[1,101]},{50:[1,102]},o($Vo,[2,19]),o($VK,[2,48]),o($VK,[2,49]),o($VK,[2,50]),o($VK,[2,51]),o($VK,[2,52]),{21:[1,103]},o($Vo,[2,20]),o($Vo,[2,21]),o($Vo,[2,22]),o($Vo,[2,23]),o($Vo,[2,24]),o($Vo,[2,25]),o($VL,[2,29]),{38:[1,104]},o($VL,[2,31]),o($VL,[2,32]),o($VL,[2,33]),{38:[1,105]},o($VL,[2,35]),{44:[1,106]},o($VL,[2,37]),o($VL,[2,38]),o($VL,[2,39]),{44:[1,107]},o($VL,[2,41]),o($Vw,[2,4]),{6:108,7:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:$V1,22:16,24:$V2,26:$V3,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk},o($Vl,[2,55]),{27:$VM,31:$VN,34:$VO,37:$VP,38:[1,119],62:[1,109],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},o($VY,[2,58]),o($VY,[2,59]),o($VY,[2,60]),o($VY,[2,61]),o($VY,[2,62]),o($VY,[2,63]),{21:$Vp,23:123,34:$Vq,48:45,49:$Vr,52:$Vs},o($VY,[2,65]),o($VY,[2,66]),o($VY,[2,67]),o($VY,$Vt,{48:49,53:50,54:51,55:52,25:124,21:[1,125],49:$Vr,52:$Vs,56:$Vu,57:$Vv}),o($VY,[2,91]),{50:[1,126]},{50:[1,127]},o($VY,[2,93]),o($VY,[2,94]),o($VY,[2,95]),o($VY,[2,96]),o($VY,[2,97]),o($VY,[2,98]),{21:$VZ,57:$V_,70:128},{21:$VZ,57:$V_,70:131},o($VY,[2,72]),{51:[1,132]},{51:[1,133]},o($VK,[2,53]),{37:[1,134]},{39:[1,135]},{36:[1,136]},{36:[1,137]},o($Vw,[2,6]),o($VK,[2,57]),{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:138,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:139,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:140,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:141,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:142,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:143,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,78:[1,144],81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:145,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,78:[1,146],81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:147,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:148,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:149,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:150,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:151,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:152,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},o($VY,[2,64]),o($VY,[2,90]),o($VY,[2,92]),{51:[1,153]},{51:[1,154]},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:155,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},o($V$,[2,73]),{21:[1,156]},{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:157,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},o($VK,[2,45]),o($VK,[2,46]),{39:[1,158]},{36:[1,159]},o($VL,[2,36]),o($VL,[2,40]),o($V01,[2,77],{27:$VM,31:$VN,34:$VO,74:$VR,75:$VS}),o($V01,[2,78],{27:$VM,31:$VN,34:$VO,74:$VR,75:$VS}),o($V11,[2,79],{27:$VM,31:$VN}),o($V11,[2,80],{27:$VM,31:$VN}),o($V11,[2,81],{27:$VM,31:$VN}),o($V21,[2,82],{27:$VM,31:$VN,34:$VO,37:$VP,73:$VQ,74:$VR,75:$VS}),{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:160,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},o($V21,[2,83],{27:$VM,31:$VN,34:$VO,37:$VP,73:$VQ,74:$VR,75:$VS}),{21:$Vx,22:84,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,45:$Vi,46:$Vj,47:$Vk,48:87,49:$Vr,52:$Vs,56:$VD,57:$VE,59:86,60:$Vn,61:161,63:78,64:79,65:80,66:81,67:82,68:83,69:85,71:$VF,72:$VG,81:$VH,82:$VI,83:$VJ},o($V31,[2,86],{27:$VM,31:$VN,34:$VO,37:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU}),o($V31,[2,87],{27:$VM,31:$VN,34:$VO,37:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU}),o([38,62],[2,88],{27:$VM,31:$VN,34:$VO,37:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX}),o([38,62,80],[2,89],{27:$VM,31:$VN,34:$VO,37:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW}),o($VY,[2,68]),o($V41,[2,69],{27:$VM}),o($VY,[2,75]),o($VY,[2,76]),o($VY,[2,70]),o($V$,[2,74]),o($V41,[2,71],{27:$VM}),{36:[1,162]},o($VL,[2,34]),o($V21,[2,84],{27:$VM,31:$VN,34:$VO,37:$VP,73:$VQ,74:$VR,75:$VS}),o($V21,[2,85],{27:$VM,31:$VN,34:$VO,37:$VP,73:$VQ,74:$VR,75:$VS}),o($VL,[2,30])],
defaultActions: {36:[2,1],37:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 71;
break;
case 2:return 72;
break;
case 3:return 49;
break;
case 4:return 52;
break;
case 5:return 'comment';
break;
case 6:return 35;
break;
case 7:return 40;
break;
case 8:return 41;
break;
case 9:return 42;
break;
case 10:return 43;
break;
case 11:return 45;
break;
case 12:return 46;
break;
case 13:return 47;
break;
case 14:return 44;
break;
case 15:return 39;
break;
case 16:return 10;
break;
case 17:return 73;
break;
case 18:return 37;
break;
case 19:return 34;
break;
case 20:return 74;
break;
case 21:return 78;
break;
case 22:return 79;
break;
case 23:return 77;
break;
case 24:return 76;
break;
case 25:return 38;
break;
case 26:return 80;
break;
case 27:return 75;
break;
case 28:return 60;
break;
case 29:return 62;
break;
case 30:return 50;
break;
case 31:return 51;
break;
case 32:return 82;
break;
case 33:return 81;
break;
case 34:return 83;
break;
case 35:return 83;
break;
case 36:return 21;
break;
case 37:return 33;
break;
case 38:return 24;
break;
case 39:return 26;
break;
case 40:return 27;
break;
case 41:return 28;
break;
case 42:return 29;
break;
case 43:return 30;
break;
case 44:return 31;
break;
case 45:return 32;
break;
case 46:return 36;
break;
case 47:return 56;
break;
case 48:return 57;    
break;
case 49:
  const er = new errorGram.Error({ tipo: 'léxico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es válido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 50:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_DESC_XPATH;
exports.Parser = gramatica_DESC_XPATH.Parser;
exports.parse = function () { return gramatica_DESC_XPATH.parse.apply(gramatica_DESC_XPATH, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}