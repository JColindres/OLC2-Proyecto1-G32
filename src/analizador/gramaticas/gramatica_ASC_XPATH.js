/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_ASC_XPATH = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,18],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,36],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[5,21,24,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,45,46,47],$Vl=[1,39],$Vm=[5,8,21,24,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,45,46,47],$Vn=[2,54],$Vo=[1,43],$Vp=[5,8,21,24,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,45,46,47,58],$Vq=[1,45],$Vr=[1,46],$Vs=[1,48],$Vt=[1,49],$Vu=[2,47],$Vv=[1,55],$Vw=[1,56],$Vx=[1,97],$Vy=[1,100],$Vz=[1,102],$VA=[1,101],$VB=[1,98],$VC=[1,99],$VD=[1,91],$VE=[1,90],$VF=[1,89],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[5,8,21,24,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,45,46,47,58,60,69,73,74,75,76,77,78,79,80,81,82],$VM=[21,34,49,50],$VN=[1,123],$VO=[1,125],$VP=[1,124],$VQ=[1,112],$VR=[1,111],$VS=[1,121],$VT=[1,110],$VU=[1,113],$VV=[1,114],$VW=[1,115],$VX=[1,116],$VY=[1,117],$VZ=[1,118],$V_=[1,119],$V$=[1,120],$V01=[1,122],$V11=[27,28,31,34,37,38,60,69,73,74,75,76,77,78,79,80,81,82],$V21=[1,133],$V31=[1,134],$V41=[21,27,28,31,32,33,35,39,40,41,42,43,45,46,47,49,50,54,55,58,68,71,72,83,84,85],$V51=[37,38,60,69,73,76,77,78,79,80,81,82],$V61=[34,37,38,60,69,73,74,75,76,77,78,79,80,81,82],$V71=[38,60,69,76,77,78,79,80,81,82],$V81=[38,60,69,80,81,82],$V91=[27,31,34,37,38,60,69,73,74,75,76,77,78,79,80,81,82],$Va1=[31,34,37,38,60,69,73,74,75,76,77,78,79,80,81,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"espacios":7,"o":8,"RUTA":9,"FILTROS":10,"ATRIBUTO_DESCENDIENTES":11,"DESCENDIENTES_NODO":12,"DESCENDIENTE":13,"PADRE":14,"ATRIBUTO_NODO":15,"HIJOS":16,"RAIZ":17,"NODO_ACTUAL":18,"PADRE_NODO":19,"ANY":20,"id":21,"EJES":22,"OPC_EJES":23,"diagonal_diagonal_arroba_ast":24,"OPC":25,"diagonal_diagonal_ast":26,"doble_diagonal":27,"diagonal_dos_pts":28,"diagonal_arroba_ast":29,"diagonal_ast":30,"diagonal":31,"punto":32,"dos_pts":33,"mul":34,"ancestor":35,"bi_pto":36,"menos":37,"or":38,"self":39,"attribute":40,"child":41,"descendant":42,"following":43,"sibling":44,"namespace":45,"parent":46,"preceding":47,"NODO_FUNCION":48,"node":49,"text":50,"PASOS":51,"ANY_ATRIBUTO":52,"ATRIBUTO":53,"any_atributo":54,"arroba":55,"LISTA_PREDICADO":56,"PREDICADO":57,"cor_izq":58,"EXPR":59,"cor_der":60,"ATRIBUTO_PREDICADO":61,"ARITMETICAS":62,"RELACIONALES":63,"LOGICAS":64,"ORDEN":65,"VALORES":66,"PATH":67,"par_izq":68,"par_der":69,"OPC_PATH":70,"last":71,"position":72,"mas":73,"div":74,"mod":75,"mayor":76,"menor":77,"mayor_igual":78,"menor_igual":79,"igual":80,"diferencia":81,"and":82,"integer":83,"double":84,"string":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"espacios",8:"o",21:"id",24:"diagonal_diagonal_arroba_ast",26:"diagonal_diagonal_ast",27:"doble_diagonal",28:"diagonal_dos_pts",29:"diagonal_arroba_ast",30:"diagonal_ast",31:"diagonal",32:"punto",33:"dos_pts",34:"mul",35:"ancestor",36:"bi_pto",37:"menos",38:"or",39:"self",40:"attribute",41:"child",42:"descendant",43:"following",44:"sibling",45:"namespace",46:"parent",47:"preceding",49:"node",50:"text",54:"any_atributo",55:"arroba",58:"cor_izq",60:"cor_der",68:"par_izq",69:"par_der",71:"last",72:"position",73:"mas",74:"div",75:"mod",76:"mayor",77:"menor",78:"mayor_igual",79:"menor_igual",80:"igual",81:"diferencia",82:"and",83:"integer",84:"double",85:"string"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,4],[6,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,1],[19,1],[20,1],[22,2],[22,6],[22,2],[22,2],[22,2],[22,5],[22,2],[22,4],[22,2],[22,2],[22,2],[22,4],[22,2],[23,1],[23,1],[23,1],[48,1],[48,1],[25,0],[25,1],[25,1],[51,1],[51,1],[52,1],[53,2],[10,0],[10,1],[56,2],[56,1],[57,3],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,2],[59,1],[59,1],[59,1],[59,3],[67,3],[67,3],[67,3],[67,3],[67,2],[67,1],[70,1],[70,2],[65,3],[65,3],[62,3],[62,3],[62,3],[62,3],[62,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[64,3],[64,3],[61,2],[61,1],[61,2],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'S', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 3:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 4:
   tablaErrores.Errores.getInstance().push(new errorGram.Error({ tipo: 'Sem√°ntico', linea: `${yylineno + 1}`, descripcion: `No se permiten espacios`}));
                
break;
case 5:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-3].hijos, $$[$0-2], ...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 6:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 18:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 19:
 this.$ = new NodoAST({label: 'ATRIBUTO_DESCENDIENTES', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 20: case 21:
 this.$ = new NodoAST({label: 'DESCENDIENTES_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 22:
 this.$ = new NodoAST({label: 'PADRE', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 23:
 this.$ = new NodoAST({label: 'ATRIBUTO_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'HIJOS', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'RAIZ', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 26:
 this.$ = new NodoAST({label: 'NODO_ACTUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 27:
 this.$ = new NodoAST({label: 'PADRE_NODO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 28:
 this.$ = new NodoAST({label: 'ANY', hijos: [$$[$0]], linea: yylineno}); 
break;
case 29: case 31: case 32: case 33: case 35: case 37: case 38: case 39: case 41:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 30:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-5], $$[$0-4]], linea: yylineno}); 
break;
case 34:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-4], $$[$0-3]], linea: yylineno}); 
break;
case 36: case 40:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-3], $$[$0-2]], linea: yylineno}); 
break;
case 42: case 43: case 44:
 this.$ = new NodoAST({label: 'OPC_EJES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 45: case 46:
 this.$ = new NodoAST({label: 'NODO_FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 47:
 this.$ = new NodoAST({label: 'OPC', hijos: [], linea: yylineno}); 
break;
case 48: case 49:
 this.$ = new NodoAST({label: 'OPC', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 50: case 51:
 this.$ = new NodoAST({label: 'PASOS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 52:
 this.$ = new NodoAST({label: 'ANY_ATRIBUTO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 53:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 54:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [], linea: yylineno}); 
break;
case 55:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 56:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 57:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 58:
 this.$ = new NodoAST({label: 'PREDICADO', hijos: [$$[$0-2], ...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 59: case 60: case 61: case 62: case 63: case 66: case 67: case 68:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 64:
 this.$ = new NodoAST({label: 'EXPR', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 65:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 69:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 70: case 71:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 72: case 73:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0-2],...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 74:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-1].hijos,$$[$0],$$[$01]], linea: yylineno}); 
break;
case 75:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 76:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 77:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 78: case 79:
 this.$ = new NodoAST({label: 'ORDEN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 80: case 81: case 82: case 83: case 84:
 this.$ = new NodoAST({label: 'ARITMETICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 85: case 86: case 87: case 88: case 89: case 90:
 this.$ = new NodoAST({label: 'RELACIONALES', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 91: case 92:
 this.$ = new NodoAST({label: 'LOGICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 93:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 95:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 96: case 97: case 98: case 99: case 100: case 101:
 this.$ = new NodoAST({label: 'VALORES', hijos: [$$[$0]], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:[1,4],9:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:17,24:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj},{1:[3]},{5:[1,37],6:38,9:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:17,24:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj},o($Vk,[2,3],{8:$Vl}),o($Vk,[2,4]),o($Vm,$Vn,{10:40,56:41,57:42,58:$Vo}),o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,10]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),{21:$Vq,23:44,34:$Vr,48:47,49:$Vs,50:$Vt},o($Vp,$Vu,{25:50,48:51,51:52,52:53,53:54,49:$Vs,50:$Vt,54:$Vv,55:$Vw}),o($Vp,$Vu,{48:51,51:52,52:53,53:54,25:57,49:$Vs,50:$Vt,54:$Vv,55:$Vw}),o($Vp,$Vu,{48:51,51:52,52:53,53:54,25:58,49:$Vs,50:$Vt,54:$Vv,55:$Vw}),o($Vp,$Vu,{48:51,51:52,52:53,53:54,25:59,49:$Vs,50:$Vt,54:$Vv,55:$Vw}),o($Vp,$Vu,{48:51,51:52,52:53,53:54,25:60,49:$Vs,50:$Vt,54:$Vv,55:$Vw}),o($Vp,$Vu,{48:51,51:52,52:53,53:54,25:61,49:$Vs,50:$Vt,54:$Vv,55:$Vw}),o($Vp,$Vu,{48:51,51:52,52:53,53:54,25:62,49:$Vs,50:$Vt,54:$Vv,55:$Vw}),o($Vp,[2,26]),o($Vp,[2,27]),o($Vp,[2,28]),{36:[1,63],37:[1,64]},{36:[1,65]},{36:[1,66]},{36:[1,67],37:[1,68]},{36:[1,69],37:[1,70]},{36:[1,71]},{36:[1,72]},{36:[1,73],37:[1,74]},{36:[1,75]},{1:[2,1]},o($Vk,[2,2],{8:$Vl}),{9:76,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:17,24:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj},o($Vm,[2,6]),o($Vm,[2,55],{57:77,58:$Vo}),o($Vp,[2,57]),{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:78,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},o($Vp,[2,18]),o($VL,[2,42]),o($VL,[2,43]),o($VL,[2,44]),o($VL,[2,45]),o($VL,[2,46]),o($Vp,[2,19]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),o($VL,[2,52]),{21:[1,103]},o($Vp,[2,20]),o($Vp,[2,21]),o($Vp,[2,22]),o($Vp,[2,23]),o($Vp,[2,24]),o($Vp,[2,25]),o($VM,[2,29]),{38:[1,104]},o($VM,[2,31]),o($VM,[2,32]),o($VM,[2,33]),{38:[1,105]},o($VM,[2,35]),{44:[1,106]},o($VM,[2,37]),o($VM,[2,38]),o($VM,[2,39]),{44:[1,107]},o($VM,[2,41]),o($Vm,$Vn,{56:41,57:42,10:108,58:$Vo}),o($Vp,[2,56]),{27:$VN,28:$VO,31:$VP,34:$VQ,37:$VR,38:$VS,60:[1,109],73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01},o($V11,[2,59]),o($V11,[2,60]),o($V11,[2,61]),o($V11,[2,62]),o($V11,[2,63]),o($V11,[2,64]),{21:$Vq,23:126,34:$Vr,48:47,49:$Vs,50:$Vt},o($V11,[2,66]),o($V11,[2,67]),o($V11,[2,68]),{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:127,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},o($V11,$Vu,{48:51,51:52,52:53,53:54,25:128,21:[1,129],49:$Vs,50:$Vt,54:$Vv,55:$Vw}),o($V11,[2,94]),{68:[1,130]},{68:[1,131]},o($V11,[2,96]),o($V11,[2,97]),o($V11,[2,98]),o($V11,[2,99]),o($V11,[2,100]),o($V11,[2,101]),{21:$V21,55:$V31,70:132},{21:$V21,55:$V31,70:135},o($V11,[2,75]),o($VL,[2,53]),{37:[1,136]},{39:[1,137]},{36:[1,138]},{36:[1,139]},o($Vm,[2,5]),o($VL,[2,58]),{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:140,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:141,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:142,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:143,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:144,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:145,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:146,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:147,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:148,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:149,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:150,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:151,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:152,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:153,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:154,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},o($V11,[2,74]),o($V11,[2,65]),{27:$VN,28:$VO,31:$VP,34:$VQ,37:$VR,38:$VS,69:[1,155],73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01},o($V11,[2,93]),o($V11,[2,95]),{69:[1,156]},{69:[1,157]},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:158,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},o($V41,[2,76]),{21:[1,159]},{21:$Vx,22:85,27:$Vy,28:$Vz,31:$VA,32:$VB,33:$VC,35:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,47:$Vj,48:88,49:$Vs,50:$Vt,54:$VD,55:$VE,57:87,58:$Vo,59:160,61:79,62:80,63:81,64:82,65:83,66:84,67:86,68:$VF,71:$VG,72:$VH,83:$VI,84:$VJ,85:$VK},{39:[1,161]},{36:[1,162]},o($VM,[2,36]),o($VM,[2,40]),o($V51,[2,80],{27:$VN,28:$VO,31:$VP,34:$VQ,74:$VU,75:$VV}),o($V51,[2,81],{27:$VN,28:$VO,31:$VP,34:$VQ,74:$VU,75:$VV}),o($V61,[2,82],{27:$VN,28:$VO,31:$VP}),o($V61,[2,83],{27:$VN,28:$VO,31:$VP}),o($V61,[2,84],{27:$VN,28:$VO,31:$VP}),o($V71,[2,85],{27:$VN,28:$VO,31:$VP,34:$VQ,37:$VR,73:$VT,74:$VU,75:$VV}),o($V71,[2,86],{27:$VN,28:$VO,31:$VP,34:$VQ,37:$VR,73:$VT,74:$VU,75:$VV}),o($V71,[2,87],{27:$VN,28:$VO,31:$VP,34:$VQ,37:$VR,73:$VT,74:$VU,75:$VV}),o($V71,[2,88],{27:$VN,28:$VO,31:$VP,34:$VQ,37:$VR,73:$VT,74:$VU,75:$VV}),o($V81,[2,89],{27:$VN,28:$VO,31:$VP,34:$VQ,37:$VR,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ}),o($V81,[2,90],{27:$VN,28:$VO,31:$VP,34:$VQ,37:$VR,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ}),o([38,60,69],[2,91],{27:$VN,28:$VO,31:$VP,34:$VQ,37:$VR,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01}),o([38,60,69,82],[2,92],{27:$VN,28:$VO,31:$VP,34:$VQ,37:$VR,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),o($V91,[2,70],{28:$VO}),o($Va1,[2,71],{27:$VN,28:$VO}),o($V11,[2,69]),o($V11,[2,78]),o($V11,[2,79]),o($V91,[2,72],{28:$VO}),o($V41,[2,77]),o($Va1,[2,73],{27:$VN,28:$VO}),{36:[1,163]},o($VM,[2,34]),o($VM,[2,30])],
defaultActions: {37:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores");
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 71;
break;
case 1:return 72;
break;
case 2:return 49;
break;
case 3:return 50;
break;
case 4:return 'comment';
break;
case 5:return 35;
break;
case 6:return 40;
break;
case 7:return 41;
break;
case 8:return 42;
break;
case 9:return 43;
break;
case 10:return 45;
break;
case 11:return 46;
break;
case 12:return 47;
break;
case 13:return 44;
break;
case 14:return 39;
break;
case 15:return 8;
break;
case 16:return 73;
break;
case 17:return 37;
break;
case 18:return 34;
break;
case 19:return 74;
break;
case 20:return 80;
break;
case 21:return 81;
break;
case 22:return 79;
break;
case 23:return 78;
break;
case 24:return 77;
break;
case 25:return 76;
break;
case 26:return 38;
break;
case 27:return 82;
break;
case 28:return 75;
break;
case 29:return 58;
break;
case 30:return 60;
break;
case 31:return 68;
break;
case 32:return 69;
break;
case 33:return 84;
break;
case 34:return 83;
break;
case 35:return 85;
break;
case 36:return 85;
break;
case 37:return 21;
break;
case 38:return 33;
break;
case 39:return 24;
break;
case 40:return 26;
break;
case 41:return 27;
break;
case 42:return 28;
break;
case 43:return 29;
break;
case 44:return 30;
break;
case 45:return 31;
break;
case 46:return 32;
break;
case 47:return 36;
break;
case 48:return 54;
break;
case 49:return 55;    
break;
case 50:return 7;
break;
case 51:
  const er = new errorGram.Error({ tipo: 'l√©xico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es v√°lido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 52:return 5;
break;
}
},
rules: [/^(?:last\b)/,/^(?:position\b)/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[a-zA-Z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö0-9]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:\s+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_ASC_XPATH;
exports.Parser = gramatica_ASC_XPATH.Parser;
exports.parse = function () { return gramatica_ASC_XPATH.parse.apply(gramatica_ASC_XPATH, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}